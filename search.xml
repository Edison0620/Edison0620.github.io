<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023 年做过的一些梦</title>
    <url>//dream-in-2023.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><em>常年在社交网络上记录记录做过的梦，定期摘录下汇总到这里~</em></p>
<h3 id="登山"><a href="#登山" class="headerlink" title="登山"></a>登山</h3><p>登山的时候，一位西装革履的先生走上来和我问好，我点点头算作认识，没有摘下我的墨镜。他说最近天气很好，随后开始和我上证五百和中证五百的区别，科技版和医疗版的未来几周走势，并就看大盘时吃哪个牌子的曲奇展开了激烈的演讲。在他停下的间隙，我手指比划，示意我又聋又哑。他并没有拿他上衣口袋的鳄梨敲我，只是说，你怎么不早说，太好了，前阵子我刚好在学哑剧表演。说完他就开始了表演，一个嗓子哑了的人失恋后歇斯底里的做家务。在表演的最后一段，他一只手手掌展开扶在半空中的事物上，另一只手像捏住什么来回摆动，然后停住，侧着头微笑的看着我，新年快乐，友谊万岁。</p>
<h3 id="宠物"><a href="#宠物" class="headerlink" title="宠物"></a>宠物</h3><p>主人离家后，所有宠物开始直立行走，在房间里踱步，在镜子前做鬼脸，泡猫薄荷&#x2F;骨头味咖啡，坐在马桶上发呆放空。看书读报，读后感写：我感觉到，人类好像正在崩溃。 ​​​</p>
<h3 id="鸽子"><a href="#鸽子" class="headerlink" title="鸽子"></a>鸽子</h3><p>在 HK 的街道，连排的平房都是半掩着的老式木门，每间房里分别是各式赤脚盘腿坐着的算命先生，有男有女，有相面摸骨，有塔罗占星。头顶的鸽群飞出一只，落在我的肩膀上，啄了啄我的脖子。我问它最近去了哪，知不知道我很想它。它没有理我，跟着我，上了旅行大巴，大巴一直开，开到它的伦敦老家。 ​​​</p>
<h3 id="舞会"><a href="#舞会" class="headerlink" title="舞会"></a>舞会</h3><p>去了一个毛坯房，裸露的水泥墙壁，熙熙攘攘人群中摆着几个家具，看见认识的女性和她的女朋友抱在一块，上去打招呼：能不能别把鞋子踩在沙发上。房子里所有人都中英混夹着说话，不知道谁：no apology，要dance,sing 和 try。我和一位白月光分到了一块，学着她跺脚抖肩大摆手臂，抓着手转圈圈，我问：知不知道，如果转的够快，离心力可以让我们飞起来。她笑，以为我是三岁小孩？人来人往，房子里大部分人都离开后，剩下几个趴在窗户，试图摇人：喂，要不要上来，上来dance。呼声响亮绵长，回荡在楼下广场上空，回荡在整座城市上空。</p>
<h3 id="灯神"><a href="#灯神" class="headerlink" title="灯神"></a>灯神</h3><p>怕灯神误解我的愿望，丢给了他一套五年高考三年模拟做阅读理解。做了一半，灯神和我说，我是由人们的念头组成的，做卷消耗了太多念头，也消耗了太多的我。我要睡了，消耗的念头会在我睡着的一千年内补齐。 ​​​</p>
<h3 id="Crush"><a href="#Crush" class="headerlink" title="Crush"></a>Crush</h3><p>在一个陌生的房子里，周围都是近期认识的朋友和同事，vanda 凑到我旁边看我拆礼盒，问我里面是什么。我说里面是下次要不要一起出来玩。她会心一笑，好一会，听到她恩了一声。我很开心，捏了捏她的手，抱住了她。房子里响起了月亮代表我的心，我们轻轻摇晃，跳起来舞来。梦具体而真实，甚至可以闻到她身上传来得香水味。</p>
<h3 id="口角"><a href="#口角" class="headerlink" title="口角"></a>口角</h3><p>在教室和人口角，对方气不过找老师告状。想到不在场的人会担下所有过错，我也慢两步跟上。走到一半，又觉得两人在老师门前各执一词，针锋相对的场面太难看。转身下楼，走到了学前班小朋友的教室，看他们像蚂蚁搬家排队下课，打头的小朋友碰到树桩，试图用脚底吸附查克拉的方式越过障碍，摔跤，摔的后面一列的人仰马翻，梦里的心情也变得好了起来。</p>
<h3 id="火车"><a href="#火车" class="headerlink" title="火车"></a>火车</h3><p>在一列超载火车上听音乐会，入耳是古典交响和天南地北的口音，侬要做啥子，我都唔明佢点解要咁。我起身把座位让给列车长，他说火车正在变轨，他想趁这段时间休息一下，他刚在上一站把心爱的人放下。听完我开始往前走，身体逐渐膨胀变大，隔开了舞台和观众，直至撑满整个车厢。</p>
<h3 id="水母"><a href="#水母" class="headerlink" title="水母"></a>水母</h3><p>梦见是一只水母，收缩舒张着向上漂浮，浮出海面那一下发现，原来自己不是水母，是直播间点赞冒出来的红心泡泡。 ​​​</p>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>梦</tag>
      </tags>
  </entry>
  <entry>
    <title>2024 年做过的一些梦</title>
    <url>//dream-in-2024.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><em>常年在社交网络上记录记录做过的梦，定期摘录下汇总到这里~</em></p>
<h3 id="出租车"><a href="#出租车" class="headerlink" title="出租车"></a>出租车</h3><p>一位女士上了我的车，并让我切回上一首歌，说她很喜欢。我切回上一首，按了单曲循环，并开始打表。送到目的地，她不想下车，说想听完这遍，还想一直待在车上，在车上恋爱结婚生小孩，看小孩长大成人恋爱结婚，然后等着老掉死掉。我没有分辨她的话里是否有对孩子性别的期待，计价器上显示四百二十块。我有点疲倦，把车给了她，看她把车子开走，渐行渐远直到看不见车的影子，然后站在路边，想象着她今后人生中的各种样子。</p>
<h3 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h3><p>和人在暗处拥抱，浸在甜腻绵长的气氛里不肯出来。好一会，耳边传来破窗声，风声，玻璃和重物一起落地的声音，继而听到尖叫和警笛声。她问，要不要下去看看？我说不用，今天不是我值班，而且我同事也已经到了。她说，好吧，那太可惜了，还以为能见到你，害我白跳一场。我没有回她，只是沉默，感受着她的呼吸从脖子传来。</p>
<h3 id="庭审"><a href="#庭审" class="headerlink" title="庭审"></a>庭审</h3><p>坐在庭审现场，所有人都意兴阑珊，被告在打瞌睡，宛如置身在夏天下午第二节课堂，只有原告律师一板正经照本宣科，不合时宜的像占用了体育课的数学老师。顺着陪审团和法官的目光看向天花板，看着蜘蛛结网，想起毕业后很久没有有过的悠闲心情 ​​​</p>
<h3 id="演讲"><a href="#演讲" class="headerlink" title="演讲"></a>演讲</h3><p>一个人在高台讲话，从他背后打来的射灯把他和讲台都映成了剪影，剪影说到：“一方面是我刻意膨胀，试图用言语和态度打压你们，打压到你们动弹不得。这样当你们所有人的对立面都是我，自然会上下一心，团结一致，也就解决了你们的内部矛盾。另一方面，对于你们的反抗，我也确实没放在心上。” ​​​</p>
<h3 id="地下通道"><a href="#地下通道" class="headerlink" title="地下通道"></a>地下通道</h3><p>守着一头大象排便，在某条马路的地下通道，学生时代的朋友坐在我和大象的对面，一男一女，关于认识的人的八卦已经聊尽，时间在沉默和偶尔相视的微笑中缓慢过去。</p>
<p>通道入口的一个流浪汉冲我们招手，喂，你们要离开的话要记住，这里的时间流速不一样，在你们走出出口的瞬间，可能你们就会变老，也可能是外面的世界变老，一定要做好准备。</p>
<p>我想，很多人和事在抵达那个出口前已然尘埃落定胜负已分，应该没有比这更好的准备。拍了拍大象耳朵，它摇摇晃晃停止排便，陪我一起走向出口。</p>
<p>我没有问他们要不要一起走，下一次见面也许和上一次见面一样遥远。</p>
<h3 id="红绿灯"><a href="#红绿灯" class="headerlink" title="红绿灯"></a>红绿灯</h3><p>这个红绿灯是如此漫长，以至于在路口等待的人开始攀谈起来，从谈论天气到交换彼此人生回忆，或早或晚，他们陷入了各自的恋爱。生火做饭，建起房子，迎接下一批抵达路口的人。有年秋天，一位男士正准备出门，他看到很多人走出了家门，看到远处马路对面的绿灯亮着。他有些失神，不知道该往哪去。 ​​​</p>
<h3 id="旅行-1"><a href="#旅行-1" class="headerlink" title="旅行"></a>旅行</h3><p>去了一个赛博小城旅游，这里的人停了车会走到车尾冲田野小便，被私锁锁着的共享电瓶车家家门口都有一辆，大棚扣住的跳蚤市场除了卖炸蝉蛹炸蚂蚱农产品，也卖被水晶球包装的仿生人和其他一些科技产品。女友朋友买了很多稀奇古怪的东西，坐上地铁后，拿了几片牛肉干出来吃，吃完说其实是牛肉味的牙膏，不过没关系，让牙齿保持干净。我们哈哈大笑，好像生活的另一种可能性正在发生。</p>
<h3 id="逃课"><a href="#逃课" class="headerlink" title="逃课"></a>逃课</h3><p>从小卖铺的后门逃课出来，大街上空无一人，两边的店铺老板们都神情严肃。走了很远的路，走到广场的一个喷泉旁忽然意识到，原来墙外竟是这种我从未想象过的荒芜。</p>
<p>步行回去，学校的一面墙有个小洞，可能是从小看西游记的原因，对尖嘴猴腮长相的人颇有好感，他站在洞的另一边，我朝他招手说能不能把我包拿过去，我自己翻墙进去。</p>
<p>进来后发现他只有十岁出头样子，我问他哪个系的。</p>
<p>学哲学的。</p>
<p>哲学，我也挺喜欢的，最近有在研究什么课题吗？</p>
<p>如何让人以液态的方式在一个方形的陶瓷器皿里完全展开，然后入睡。</p>
<p>挺有意思的，和哲学的关系是？</p>
<p>个人兴趣，非要说，和我的关系，就是和哲学的关系。</p>
<p>口气确实像个学哲学的，那你有导师吗，你导师是谁？</p>
<p>唐玄奘啊。</p>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>梦</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 年终总结丨随时开始奔跑的心气</title>
    <url>//2024-year-end-review.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>几日不来春便老，开尽桃花。</p>
<p>写这个年终总结前看到的一句诗，讲不清很应景，讲不清以这句话起手是否是我想为这篇总结定的主体基调，也讲不清我写的这篇总结的目的只是在年复一年的过程里努力想把握住什么，还是希望未来某刻能以此回忆起某些遗忘掉的事情和感受。讲的清的是，既然石头已然到了山顶，就让他滚落下去吧。</p>
<h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>如果说人生的厚度取决于体验事物的数量，那 23 年的厚度可能会较去年长一点。第一次去音乐节，第一次去听周杰伦的演唱会，第一次去看了话剧表演，还是一个人的独角戏，第一次自己开车和女友自驾游等等。</p>
<p>23 年确实发生了好多事，上半年因为朋友去了广州的原因和因为想换工作，本着一种尽人事由天命的心态在工作上放松不少，一个人无聊的时间就多了起来，或用社交软件，或被朋友拉去，认识了一些人，也参加了不少的活动。</p>
<p>印象深刻的一次剧本杀，有两个路人很会接梗和玩梗，被笑到脱力。散场后去几个人一起吃了晚饭，互相加了好久，看朋友圈，一起的一位男生经常给另一位女生点赞评论，但时间久了渐渐少了然后再无互动。看的出男生的意思，但看不太清女生的意思。类似这种事，23 年见到不少，有时发呆会捡起来想想，会想这些事在他们各自的人生轨迹里，对他们有怎样的影响。</p>
<p>去周杰伦演唱会那天，和一位朋友在白天在香港街口走到脚底板酸痛，在半山腰电梯上看对面楼层里灯光昏暗的按摩 spa 店，感觉很有东南亚风味。在零星缀着各色国家餐厅的阶梯路上，因为她教英文，就触类旁通的问她法语意大利的区别，指着一些不认识的事物问英文表达，总之，是很悠闲的一天。</p>
<p>小插曲是，我本身对于那位朋友，心里是没有那种喜欢的感觉的，是那种一个人吃饭的时候会想起问要不要一起的朋友。但在谈到恋爱观的时候，她忽然以无法接受姐弟恋暗示我不要有其他的想法。</p>
<p>对她暗示有所领悟时，对于这种误会，心里还蛮复杂的，有些诧异和生气。诧异的是为什么我让她产生这种感觉，也诧异想不是应该只有男生才这样吗，因为女生多看他两眼觉得她喜欢他。而生气的点是要清楚的确定社交距离的行为给我的感觉好像是，我不配？虽然情绪有点生气，但是想到直接否认可能也会让两人尴尬，为了照顾她的情绪，我也只好打哈哈说，十八岁和二十八岁看起来差很多，六十八和七十八看起来就差的不多了哈哈。心里偷偷地想，以后要是一起吃饭，还是让其他朋友叫她吧。</p>
<p>除了这个意外，二三年也正儿八经的有约会过几个女生，有一位也确实是姐姐。有一两个在约会后微信上发消息正面的说不合适，也有几个在聊天的时候就发现不太合适而后没有联系。七八月份的时候，认识了现在的女友，也因为她，在深圳那么久，第一次在街头散步到四点多才回去睡觉，第一次做攻略开车去中山玩，到年后，又一起去了漳州玩，很开心。开心之余，有时候会有一些奇怪的情绪，相较上一次恋爱，好像很多地方，对现任会好很多，除了一部分可能在前任学到的，比如包容理解之类的事，另一部分，我也讲不好的一些奇怪的补偿心理，因为之前好像没有做好，所以这次想做的很好一些——但也因此会对前任有些愧疚感。</p>
<p>工作上上半年还是满悠闲的，去年的项目在收尾，因为加班很多，所以调休的时候零零碎碎的面试新公司。跳到一家做汽车后端的公司干了不到两礼拜后，之前的甲方公司发出邀请，考虑再三，决定再跳一次。下半年的工作，刚开始也算平常，每天工作量干满，正点下班，但到产品快上线的那段时间，就总是加班，有时到家十一点多，以往可能已经睡着了，现在偶尔也都还在回消息。从九月到二四年二月都很疲惫，和以前同事一起吃饭，打趣说，感觉把工作以来没加的班都给补上了。以前的同事和上司劝我别太肝，前上司的看法，总结起来大概是如果所有的时间都用来工作，没有时间好好整理自己，提升，或是搞搞副业，可能也是一种消耗。讲不好是用一种什么心态还坚持着的，疲惫的中间也确实有闪过离开的念头，但又觉得因为疲倦离开，似乎没有因为做出成绩，在庆祝的那一刻转身离开，背影看起来潇洒。其余的一些感受是，世上的人，真是千奇百怪啊~</p>
<p>因为工作压力的原因，23年去看了很多次中医，下半年减少了运动。不过在夏天结束之前也都还坚持以一周或两周一次的频率去游泳，一年百公里的跑步计划也达到了。也许今年该提升一下目标了~</p>
<h1 id="生活以外"><a href="#生活以外" class="headerlink" title="生活以外"></a>生活以外</h1><p>豆瓣年终总结说我二三年看了七十部电影和十七本——看到总结的时候因为这两个回文数觉得有趣。</p>
<p>翻着年终总结回忆有印象的书和电影，这两年刷剧刷的很多，二三年觉得特别好的几部剧：<br><a href="https://m.douban.com/movie/subject/28427782/">我的天才女友</a>：小说可能停在十几页的样子，但剧本第一季一口气看完了，意大利的风土人情，氛围很好，有些片段刻意的抽帧慢放，有种“追忆似水年华”这段话表面带出来的感觉。<br><a href="https://movie.douban.com/subject/35561222/">白莲花度假村</a>：第一季和第二季都看了，像是中产阶级的闹剧集合，节奏紧凑，人和人之前的微妙情绪拍的很好，还有一些很 drama 的桥段，适合周末挑个时间一口气看完。<br><a href="https://movie.douban.com/subject/35169965/">大楼里只有谋杀</a>：第一季和第二季也都看完了，每个人物都很可爱，甚至里面的凶手也因为背后的故事显得没那么面目可憎。有一集以聋哑人的视角讲述故事，很喜欢，甚至觉得无声看到的世界，更有诗意。<br><a href="https://movie.douban.com/subject/35588177/">漫长的季节</a>：可能因为年代感，除了故事很好以外，整体感觉很动人。唯一不好的就是结局太过点题，但瑕不掩瑜。<br><a href="https://movie.douban.com/subject/35413042/">怒呛人生</a>：又癫又疯，很好的是，没有在一些落于俗套的地方结束，而是继续向前走，给了一个留有余味的结局。<br><a href="https://movie.douban.com/subject/36156235/">重启人生</a>：很难得的一部都是女性主角的电视剧我能看完。真的很好的一部剧。</p>
<p>除此以外，电影也有一些印象深刻的：<br><a href="https://movie.douban.com/subject/35118954/">子弹列车</a>：热闹、好玩、俏皮，杀手电影。<br><a href="https://movie.douban.com/subject/5300054/">波西米亚狂想曲</a>：很好，看完和去了周杰伦的演唱会后劲一样，反复听皇后乐队的歌~<br><a href="https://movie.douban.com/subject/1461403/">茶馆</a>：是很老很旧的电影，但故事一点也没有老旧感。<br><a href="https://movie.douban.com/subject/26258779/">银河护卫队3</a>：年内看过最好的漫威电影。<br><a href="https://movie.douban.com/subject/34969348/">伊尼舍林的报丧女妖</a>：冷静克制，有小岛的冰冷感又有无厘头的幽默。<br><a href="https://movie.douban.com/subject/27199894/">超级马力欧兄弟大电影</a>：无条件的喜欢<br><a href="https://movie.douban.com/subject/34963356/">过往人生</a>：可能不是很好，但我很喜欢。<br><a href="https://movie.douban.com/subject/33456512/">涉过愤怒的海</a>：挺好，但有一些很难评的点，像二三年看的《包法利夫人》，洋洋洒洒的看得出来用心讲了一个故事，让读者&#x2F;观众看的是很酣畅淋漓，结局也大快人心。但回想讲一个这样的故事，导演&#x2F;作者的目的是什么？</p>
<p>最后是书，因为一年可能就看了十几本展开讲的话可能变成流水账，所以只讲印象深刻的，今年看的最多的作者是<a href="https://www.douban.com/personage/27234861/">卡尔维诺</a>，写作风格可以算是即王小波、王朔、钱钟书之后我最喜欢的啦，“我们的祖先”三部曲到二四年年初都看完了，还有其他的比如《不存在的城市》等也看了一两本，二四年的另一个计划也是看完他的所有作品~</p>
<p>刘瑜老师的《可能性的艺术》，深入浅出娓娓道来把政治讲的生动有趣，略讽刺的一点是，看的过程中，这本书忽然全网下架了，个中原因无意深入追寻。</p>
<p>总之二三年就这样过去了，总结这件事好像耗费了我很多的倾述欲，后半段几乎是以一种惯性在记录，好像一年的经历也是这样，一年之计在于春所言不差，但这样总是不好的，二四年希望可以阶段性回望，常看常新。希望可以过去的日子可以变未来日子的力量。以上。</p>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>扯淡</tag>
        <tag>随笔</tag>
        <tag>年终总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 年终总结丨惠存这一年</title>
    <url>//2023-year-end-review.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>去年没写年终总结，今年发生了很多事，觉得应该抽点时间，回顾记录，以重新出发。</p>
<p>仍旧是过的很快的一年，好像工作后的每一年都过得很快，书上说人之所以觉得成年后的日子过得快，是因为对很多事没有新鲜感了，没接触新的东西，没有记忆点，日复一日，所以很快。我觉得，对了一半。另一半也许因为年岁渐长，人们喜欢追忆，过去的时间也许也并没有比现在过得更慢，只是过去的日子被人们的反复咀嚼，每一天的长度都被放到无止境大，所以看起来就好像过去的日子变得更有份量。长者逝世的那几天尤其印象深刻，互联网上很多人在回忆长者的年代，我想他们又何尝不是回忆那个热情洋溢年代的自己。</p>
<p>今年比较印象深刻的事是搬家，静默管理，上半年考试被取消，阳，和朋友在广州玩，国庆和朋友租车一起玩，体验剧本杀，看了很多展览，认识了几个新朋友，买了 PS5，和结束了一段恋爱关系。</p>
<p>所有事对我都有或多或少的影响，快乐的事，难过的事，有意义的，没意义的事。和以前快乐的存粹，难过的彻底，有所不同，今年的体会是，开心的间隙有时想起难过的事，难过时也会想起快乐的片段，笑中带泪，磕磕绊绊，走了一路。</p>
<p>逝者如斯夫，过去的都已经过去。偶尔会想到的是，这些我经历的事和在所有事情中我所做出的选择，有没有把我塑造成我想成为的人？虽然我不知道我想成为什么样的人，但今年我确实向我不想成为的人迈了一步。</p>
<p>因为买了 PS5，所以下半年看的书和电影少了很多，没有心气整理出个人的年度十佳，只随口说有印象的，今年意外的比往年多看了很多电视剧，觉得特别好的有《天桥上的魔术师》《胜者即是正义》《九号秘事》《万神殿》《指匠情挑》《奥维尔号》，尤其是最后一部科幻单元剧，里面的每个人都很可爱，剧情有意思到不舍得一口气看完。</p>
<p>看豆瓣电影总结，我今年看的最多电影的导演是侯孝贤，后知后觉好像是看了挺多的，《恋恋风尘》《冬冬的假期》《童年往事》《风柜来的人》，最让我有感触的一点就是，每部电影都平平淡淡，好像导演全程都没使劲，但落到心里的力道却很重。很巧的是，《天桥上的魔术师》里面也有《恋恋风尘》的片段，《天桥上的魔术师》的小主人公离家出走，让魔术师把他变进了电影里，他就呆在电影里阿远带着阿云去买鞋子把摩托车搞丢的那段剧情中，电影里，男女主人公在电影反复放映中不断寻找自己的车子，电影外，小主人公父母在人山人海里寻找自己离家出走的儿子。导演刻意营造的相互呼应，对于看过两部作品的观众，既能体会到两者间在寻找上心态的差异，又有对这种呼应情不自禁的会心一笑。</p>
<p>除此以外今年让我挺意外的好的国产电影，除了《隐入尘烟》，还有就是《人生大事》，后者对于很多抒情的点，再情绪开始上头时，会丢出一个包袱盖过，我觉得这种处理，让人接受起来比较舒适，像车过急弯，一味加速只会让人不适。太多讲家庭的国产片，老套的点就在于力度太强，像学生时代学校外面请来的感恩教育，一股子今天非把你逼哭的势头，颇叫人反感，哪怕一部分真正投入，掉过眼泪的观众事后回忆起来，也可能是尴尬大过感动。</p>
<p>今年看了几本挺负盛名的书，但看完觉得也就那样。《倦怠社会》的观点让人耳目一新，后面没有更多衍生展开，有点失望。《天桥上的魔术师》原著没有改编的电视剧好，《人生海海》故事很厚重，剧情转折有出乎意料的也有意料之中的，矮子里拔将军，他应该可以算我读过的前三好，另外两本是《拳》和《时间的果》，前者讲近代小城故事，讲比武。武功是故事线索，挥拳出去，暗劲是那时候的人文风貌和中国传统的人情世故。后者适合没有事情打扰，沏一杯茶或者冲杯咖啡慢慢看，有人生感悟和影评书评，除了女性视角一贯的细腻，也有作者自己干净利落的观点在里面，忘记被哪段打动到，只是现在回想起来当时看完觉得很好。《文城》和《秋园》，好，但好的一般。除了几本闲书懒得写了，还看了几本马克·安可托的漫画《画的秘密》《三秒》，都特别棒，可以排进我今年看的漫画前三名——虽然我也就看了四本。</p>
<p>总之，今年基本就这样了。按照往年的习惯，用一个字总结，第一时间想到的是 操。没有任何含义，只有情绪。但想想虽然确实是很 down 的一年，但也经历和见证了很多事。所以，消，作为今年的总结，是消化和消解的消，也是逍遥的通假，消摇的消。</p>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>扯淡</tag>
        <tag>随笔</tag>
        <tag>年终总结</tag>
      </tags>
  </entry>
  <entry>
    <title>翻译：Why use dependency injection</title>
    <url>//translation-why-use-dependency-injection.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>原文来自：<a href="https://github.com/uber/needle/blob/master/WHY_DI.md">Why use dependency injection</a></p>
<p>第一次翻译，如有问题还请留言指出。<br>E-mail：<a href="mailto:&#114;&#111;&#111;&#x74;&#x40;&#x6b;&#x61;&#97;&#x61;&#x61;&#x61;&#x69;&#x2e;&#x63;&#110;">&#114;&#111;&#111;&#x74;&#x40;&#x6b;&#x61;&#97;&#x61;&#x61;&#x61;&#x69;&#x2e;&#x63;&#110;</a></p>
<hr>
<h2 id="为什么使用依赖注入？"><a href="#为什么使用依赖注入？" class="headerlink" title="为什么使用依赖注入？"></a>为什么使用依赖注入？</h2><p>本文档介绍了依赖注入的基本知识；它是什么；以及为什么把它加入进你的应用开发中会是个好的模式？下文将用 DI 这个术语作为依赖注入（dependency injection）的简称。</p>
<h3 id="一个真实的例子来说明"><a href="#一个真实的例子来说明" class="headerlink" title="一个真实的例子来说明"></a>一个真实的例子来说明</h3><p>与其用抽象的语言描述这个模式，不如用一个简单的基于视图控制器的例子来理解它。如果你对抽象描述感兴趣，维基百科有一篇很棒的<a href="https://en.wikipedia.org/wiki/Dependency_injection">文章</a>。</p>
<p>比如说我们正在开发一个照片浏览应用程序，其中，我们有一个视图控制器（view controller），显示从服务器上获取的一组照片。在这个非常简单的应用中，我们有一个 <code>PhotosViewController</code> 去展示照片，还有一个 <code>PhotosService</code> 封装了从我们的服务器请求照片的逻辑。<code>PhotosViewController</code> 实现了视图逻辑，而 <code>PhotosService</code> 包含 HTTP 请求发送和响应解析逻辑。没有使用 DI 时，我们的 <code>PhotosViewController</code> 会在 <code>init</code> 或 <code>viewDidLoad</code> 方法中实例化一个新的 <code>PhotosService</code> 实例，然后在适合的时候使用服务对象来请求照片。</p>
<p>现在我们回过头来分析一下我们的代码。在当前状态下，<code>PhotosViewController</code> 和 <code>PhotosService</code> 是紧密耦合的。这就给我们留下了一些问题：</p>
<ol>
<li>在不改变 <code>PhotosViewController</code> 的情况下，我们不能改变 <code>PhotoServie</code>。这在只有两个类的情况下似乎没有问题，但在有上百个类的实际场景中，这将大大降低我们的应用迭代速度。</li>
<li>在不改变 <code>PhotosViewController</code> 的情况下，我们不能替换掉 <code>PhotoServie</code>。我们想象一下，我们现在有了一个更好的 <code>PhotosServiceV2</code> 类，想让我们的视图控制器使用，我们就必须深入研究 <code>PhotosViewController</code> 的实现来进行修改。</li>
<li>不引用 <code>PhotoServie</code> 我们就无法对 <code>PhotosViewController</code> 进行单元测试。</li>
<li>我们不能同时独立开发 <code>PhotosViewController</code> 和 <code>PhotoServie</code>。这可能看起来不是很大的问题，但在团队开发的真实环境中，我们的工程师将会不断被阻挠。</li>
</ol>
<p>让我们加入 DI 模式到我们的应用。使用 DI，我们将会有第三个类，在 Needle 中，它被称作 <code>Componet</code> 类，他的作用是实例化 <code>PhotosService</code> 并通过协议（protocl）传递给 <code>PhotosViewController</code> 使用。我们将此协议（protocol）称为 <code>PhotosServicing</code>。现在，我们的 <code>PhotosViewController</code> 不再知道任何关于 <code>PhotosService</code> 的具体实现了，它只需使用传入的 <code>PhotosServicing</code> 协议来执行其逻辑。</p>
<p>使用 DI 后，我们再来看看之前的问题：</p>
<ol>
<li>我们可以自由的改变 <code>PhotosService</code> 的实现，而不影响我们的 <code>PhotosViewController</code>。</li>
<li>我们可以简单地更新 DI <code>Component</code> 类，实例化 <code>PhotosService</code> 并给 <code>PhotosViewController</code> 使用，只要它的实现仍然遵从 <code>PhotosServicing</code> 协议。这是我们可以自由切换照片服务（photos service）的实现而无需在视图控制器（view controller）中做任何修改。</li>
<li>我们可以通过注入（injecting），也就是传入一个模拟 <code>PhotosServicing</code> 对象来正确地对 <code>PhotosViewController</code> 进行单元测试。</li>
<li>只要定义了 <code>PhotosServicing</code> 协议，我们就可以同时独立开发 <code>PhotosService</code> 和 <code>PhotosViewController</code> 的实现。</li>
</ol>
<h2 id="依赖注入术语"><a href="#依赖注入术语" class="headerlink" title="依赖注入术语"></a>依赖注入术语</h2><p>在继续之前，让我们定义一些 DI 模式常用的术语。在上面我们简单的例子中，<code>PhotosService</code> 通常被称为“依赖关系”（dependency），我们的 <code>PhotosViewController</code> 有时称为“依赖”或“消费者”。将 <code>PhotosServicing</code> 的实例传入 <code>PhotosViewController</code> 的行为称为 “注入”。总之，我们简单的 DI 设置将 <code>PhotosServicing</code> 依赖关系注入到消费者 <code>PhotosViewController</code> 中。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>GitHub</tag>
        <tag>Translation</tag>
      </tags>
  </entry>
  <entry>
    <title>是时候维护一个属于自己的开源库了</title>
    <url>//its-time-to-build-an-open-source-library.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用 GitHub 很久，除了无脑 star、fork 大神们的仓库、输出一些学习代码以外，对于 GitHub 本身的贡献似乎寥寥。<a href="https://archiveprogram.github.com/arctic-vault/"><strong>Arctic Code Vault Contributor</strong></a> 的勋章我受之有愧。如果你也有和我类似的想法，那么，是时候可以尝试一下维护一个自己的开源库了。</p>
<p>维护一个开源库，听起来很简单，但是真正要开始动手，似乎颇有些千头万绪，无从下手。那让我们来捋一捋，首先我们碰到的第一个问题可能是：我们可以去维护一个怎样的开源库？</p>
<h2 id="目的和意义"><a href="#目的和意义" class="headerlink" title="目的和意义"></a>目的和意义</h2><p>该维护一个怎样的开源库，讨论这个问题之前。我们先把维护开源库这件事当做一个项目来分析，首先我们来思考这个项目的目的和意义——这个思考的结果有利于我们对于这个项目的持续维护，也可以当做一项工作开始前的心理建设。</p>
<p>我们的目的除了上面提到的增加一些对 GitHub 的贡献，我们所选择去维护的开源库类型也可以从另一方面确认我们这个项目的目的，比如如果你打算维护一个你所对应的开发语言的工具类框架，那你们目的就是把这个框架完成，并且好用。</p>
<p>而在这个过程中，你的技能水平有所提升，是附带产生的收获，也是可以在这个阶段当做我们的目的之一。</p>
<p>另外如果你期望你的框架可以满足了一部分人的需求，可以帮助到别人，得到一些 <strong>Star</strong> 和 <strong>Follow</strong>，那么获得他人认可也是作为这个项目的目的之一。</p>
<p>最后，当我们选择去维护一个开源库，这个开源库必然是我们最想去维护的，那这个过程中我们必然是开心和满足的，获得自我满足感也可以当做我们的目的之一，这点也是我认为最重要的。</p>
<p>以上几点，既可以当做目的，从结果上也可以当做我们维护开源库所具备的意义。</p>
<h2 id="选题"><a href="#选题" class="headerlink" title="选题"></a>选题</h2><p>进入正题，我们该维护一个怎样的开源库？对于大神来说，这个问题很简单，基本就是输出一些自制的小工具或者简洁优美的代码轮子，但对于一个还在自己的知识领域里辛苦耕耘的朋友来说，要独立维护一个技术含量比较高的开源库也许会略感吃力，甚至有可能是劝退性的。对于这类心里打鼓的朋友，也许前面干巴巴的文字无法成功完成第一轮的心理建设，也许需要一些更直观的东西来把退堂鼓换成锣鼓，比如：</p>
<ul>
<li><a href="https://www.zhihu.com/question/23498424/answer/565475152">你在 GitHub 上看到过的最有意思的项目是什么？ - 知乎</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/58404875">我在 GitHub 上都见过哪些沙雕项目？ - 知乎</a></li>
</ul>
<p>这两个链接里面有许多技术含量不高，但很有趣也有很多 <strong>Star</strong> 的项目，比如这个<a href="https://github.com/kelseyhightower/nocode">nocode</a><br><img align="center" data-src="https://i.loli.net/2020/11/22/IJGh1tVqATzZlYL.jpg" width=650px/></p>
<p>没有一行代码的应用程序，看起来像是一个愚人节玩笑。</p>
<blockquote>
<p>Write nothing; deploy nowhere.</p>
</blockquote>
<p>OK，maybe it is the most secure and reliable applications.这个项目在 GitHub 有四万多的 <strong>Star</strong>，颇有几分不着一字，尽得风流的意味。</p>
<p>总之，从以上例子来看，其实我们无需局限于技术，在开源库的类型选择上，我们可以有更开放的选择，总结如下：</p>
<ul>
<li>技术：<a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a></li>
<li>某个领域的资讯整合：<a href="https://github.com/SwiftOldDriver/iOS-Weekly">iOS-Weekly</a></li>
<li>学习资料：<a href="https://github.com/soapyigu/Swift-30-Projects">Swift-30-Projects</a></li>
<li>同一类资源的合集：<a href="https://github.com/jaywcjlove/awesome-mac">awesome-mac</a>、<a href="https://github.com/timmy3131/design-resource">design-resource</a></li>
<li>偏生活向的：<a href="https://github.com/hoosin/EveryDaySport">EveryDaySport</a>、<a href="https://github.com/YixuanFranco/YourBoyfriend">YourBoyfriend</a></li>
<li>emmmmm：<a href="https://github.com/komeiji-satori/Dress">Dress</a></li>
</ul>
<p>确定一个方向后，然后在此基础上从自己擅长或者感兴趣的入手，相信你很快就能找到一个合适的项目。当然别忘了开始前在 GitHub 上检索一下，看看是否有类似的仓库，避免重复造轮子。</p>
<h2 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h2><p>确定好要维护一个怎样的开源库后，接下来就是怎样去维护一个开源库了，即是走一遍创建仓库，拉取部署和维护的流程。——这里默认所有想维护开源库的朋友对 GitHub 的基本操作都熟悉。</p>
<h3 id="创建仓库-Tips"><a href="#创建仓库-Tips" class="headerlink" title="创建仓库 Tips"></a>创建仓库 Tips</h3><p>创建仓库这里有个小 Tips，是公司同事分享的，就是一个比较正式的开源库，通常会挂在一个组织底下，比如：<br><img align="center" data-src="https://i.loli.net/2020/11/22/9FHA4eQsfUqkWYX.png" width=650px/><br>比如：<br><img align="center" data-src="https://i.loli.net/2020/11/22/F39zC7M2nTcXGyP.png" width=650px/><br>再比如<br><img align="center" data-src="https://i.loli.net/2020/11/22/b4ga6fzWIvkVoce.png" width=650px/><br>由以上例子可见，挂在组织底下的项目会比挂在个人底下的项目看起来更会正式。哪怕我们是个人维护的，但让他看起来正式一点也没什么错误。另外在被搜索和在 url 路径展示上也相对会工整一点。<br><img align="center" data-src="https://i.loli.net/2020/11/22/ezD8NbqloGFipHX.png" width=650px/></p>
<h3 id="维护和一些设定"><a href="#维护和一些设定" class="headerlink" title="维护和一些设定"></a>维护和一些设定</h3><p>创建完一个仓库以后，拉取部署等常规操作略过不提，说说维护。步入正轨的维护，其实就是持续的 push 就好，根据仓库类型不同，有的也许是周期需要维护的，有的也许上线已接近完成，需要做的只是抓虫和偶尔更新。这个时候需要注意：</p>
<ol>
<li>对项目保持一定的关注，给自己固定一个周期性的时间检查项目，以防止时间断层导致项目失去维护。</li>
<li>每次 commit 的描述，清晰直观的提交历史可以让人对你的表述能力有大概了解，也方便给潜在的，想要一起维护的开发者一个直观的项目过往，有利于增加与你一起协作维护的吸引力。</li>
<li>项目结构的条理性，原因同上。</li>
</ol>
<p>除了步入正轨的维护，在创建时，还有项目本身的一些设定也很重要：<br><img data-src="https://i.loli.net/2020/11/22/qKgJbv1x2cGzk7e.png" alt="qKgJbv1x2cGzk7e"></p>
<ul>
<li>项目 logo</li>
<li>readme 文件的书写</li>
<li>项目描述</li>
<li>开源声明</li>
</ul>
<p>项目 logo 如果动手能力强的朋友可以考虑自己设计一下，网上也有在线工具可以用符号排列组合生成属于自己的 logo。</p>
<p>readme 文件作为一个项目的头脸，描述清晰直观的重要性远远超过上述提到的 commint，需要注意的主要有内容排版，头部和尾部信息。</p>
<p>细心的朋友可能注意到许多项目的 readme 文件的头部会有类似于这种<a href="https://awesome-online-efficiency.github.io/Awesome-Online-Efficiency/"><img data-src="https://img.shields.io/static/v1?label=&labelColor=505050&message=website&color=%230076D6&style=flat&logo=google-chrome&logoColor=%230076D6" alt="website"/></a>展示仓库属性信息的小标签，这种标签可以使用 <a href="https://shields.io/">Shields.io</a> 这个网站来制作。</p>
<p>以我的仓库为例，在网站首页填入仓库地址，点击 <strong>Suggest badges</strong> 会自动生成几个标签，不同的标签代表着不同的含义。<br><img data-src="https://i.loli.net/2020/11/22/pcHKt3e9LRv1jdV.png" alt="pcHKt3e9LRv1jdV"></p>
<p>如果想展示更多的内容，可以上拉网页自己定制。</p>
<p>readme 的底部信息，没有标准，有的仓库会把作者的个人信息挂上，有的会列出贡献者名单，也有的会把自己的收款二维码贴上，供人打赏。全凭个人喜欢。</p>
<p>关于仓库 <strong>About</strong> 的描述，力求简洁，明朗，最好一句话能说清楚是干嘛的。而一个有网站可以浏览的仓库体验也会相对好点，这方面使用 GitHub 提供的服务——GitHub Pages 已然可以满足。实现起来有两种方式：</p>
<ol>
<li>可以在仓库设置界面点击 <code>Change Theme</code>，在进去的二级页面选择好主题后，GitHub 会自动帮你生成一个网站分支，自动拉取你主分支的内容更新。<br> <img data-src="https://i.loli.net/2020/11/22/s6yAmwq84ZRFkoz.png" alt="s6yAmwq84ZRFkoz"></li>
<li>如果不喜欢产生多余分支，有强迫症的朋友也可以尝试在仓库主路径底下增加 <code>_config.yml</code> 文件，在里面添加主题配置： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theme: jekyll-theme-cayman</span><br></pre></td></tr></table></figure>
 并在设置中选择，通过主分支来构建网站，即可生成仓库网站。<br> <img data-src="https://i.loli.net/2020/11/22/Mmc8NQbY4g5Tw3q.png" alt="Mmc8NQbY4g5Tw3q"></li>
</ol>
<p>给仓库设置标签有利于检索，比如我给我的仓库设置了一个 <code>awesome</code> 的标签，那么如果有人搜索相关字段，或者直接在 <a href="https://github.com/topics/awesome">Awesome Lists</a> 这个列表里找，会有相对较高的曝光率。</p>
<p>关于版权声明，如果在创建仓库时勾选了生成版权声明的文件，创建后会自动生成该文件。如果没有后面自己加也可以，添加后侧边栏会自动生成版权声明的描述。我这里选择的是 CC0-1.0 的版本。关于不同版本声明的区别会在<del>后续文章中更新</del>——本来想更新一篇关于不同版本开源声明的区别的文章，在网上检索资料时发现一个开源库可以帮助开发者选择不同的软件开源声明：<a href="https://choosealicense.com/">Choose a License</a>。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>要维护好一个开源库需要做的事情远比上面列举的还要多，只是对于一个刚开始维护一个开源库的新手来说，不至于劝退，这些内容已经足够。</p>
<p>而在步入正轨以后，你可能需要回答 <code>Issues</code> 里提出来的各种意想不到的问题，也可能要甄别 <code>Pull requests</code> 下的提交是否有益，利用好 GitHub 提供的额外功能 <code>Actions</code>、<code>Projects</code> 则可以大大提高维护和协作的效率。另外你还可以在 <code>Insights</code> 看到自己仓库的各种统计信息，仓库的贡献曲线图，浏览次数，被下载次数等等。</p>
<p>最后，无论你的开源库是否因为代码优美而获得许多 <strong>Star</strong>，还是持续维护仍无人问津，都祝你好运。最后分享一句孔子的一段话，也做自我勉励：</p>
<blockquote>
<p>芝兰生于空谷，不以无人而不芳。</p>
</blockquote>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>OpenSource</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 端豆瓣开源许可提到的库</title>
    <url>//ios-douban-open-source-license-mentioned-in-the-library.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在网上看到一篇<a href="https://juejin.im/post/6844903749949865991">豆瓣开源许可-android</a>的文章，列举了一些 <code>Android</code> 端豆瓣开源许可中所提到的第三方框架，出于好奇心理在网上搜索了一下想看下有没有 <code>iOS</code> 版本。结果是没有的，于是索性就自己动手整理了一份：</p>
<span id="more"></span>
<ol>
<li><a href="https://github.com/nanopb/nanopb">nanopb &#x2F; nanopb：具有较小代码量的协议缓冲区</a></li>
<li><a href="https://github.com/airbnb/lottie-ios">airbnb &#x2F; lottie-ios：一个 iOS 库，用于本地渲染 After Effects 矢量动画</a></li>
<li><a href="https://github.com/jspahrsummers/libextobjc">jspahrsummers &#x2F; libextobjc：一个 Coca Library，用于扩展 Objective-C 编程语言的动态性</a></li>
<li><a href="https://github.com/ibireme/YYCache">ibireme &#x2F; YYCache：iOS 的高性能缓存框架</a></li>
<li><a href="https://github.com/TTTAttributedLabel/TTTAttributedLabel">TTTAttributedLabel &#x2F; TTTAttributedLabel：UILabel 的替代品，支持属性，数据检测器，链接等</a></li>
<li><a href="https://github.com/glaszig/SZTextView">glaszig &#x2F; SZTextView：替代 UITextView 的替代方案，为您提供：占位符。</a></li>
<li><a href="https://github.com/ZipArchive/ZipArchive">ZipArchive &#x2F; ZipArchive：ZipArchive 是用于在 iOS，macOS 和 tvOS 上压缩和解压缩文件的简单实用程序类。</a></li>
<li><a href="https://github.com/soffes/SAMKeychain">soffes &#x2F; SAMKeychain：适用于 Mac 和 iOS 的钥匙串的简单 Objective-C 包装器</a></li>
<li><a href="https://github.com/ReactiveCocoa/ReactiveObjC">ReactiveCocoa &#x2F; ReactiveObjC：2.x ReactiveCocoa Objective-C API：函数式响应式编程</a></li>
<li><a href="https://github.com/tonymillion/Reachability">tonymillion&#x2F;Reachability：网络可用性</a> </li>
<li><a href="https://github.com/PureLayout/PureLayout">PureLayout &#x2F; PureLayout：适用于 iOS 和 OS X Auto Layout 的终极 API —极其简单，功能强大。 与Objective-C 和 Swift 兼容。</a></li>
<li><a href="https://github.com/google/promises">google &#x2F; promises：Promises是一个现代框架，可为 Swift 和 Objective-C 提供同步结构，以方便编写异步代码。</a></li>
<li><a href="https://github.com/shramos/polymorph">shramos &#x2F; polymorph：Polymorph是一种实时网络数据包处理框架，几乎支持所有现有协议，是一种工具，它允许在实时拦截的网络数据包上执行Python代码，从而有助于即时修改网络流量。</a></li>
<li><a href="https://github.com/muZZkat/NMRangeSlider">muZZkat &#x2F; NMRangeSlider：UISlider，适用于 iOS 的自定义范围滑块</a></li>
<li><a href="https://github.com/novastone-media/MQTT-Client-Framework">novastone-media &#x2F; MQTT-Client-Framework：iOS，macOS，tvOS 本机 ObjectiveC MQTT 客户端框架，消息推送</a></li>
<li><a href="https://github.com/Tencent/MLeaksFinder">Tencent&#x2F; MLeaksFinder：在开发时查找 iOS 应用中的内存泄漏。</a></li>
<li><a href="https://github.com/ChangbaDevs/KTVHTTPCache">ChangbaDevs &#x2F; KTVHTTPCache：一个功能强大的媒体缓存框架。</a></li>
<li><a href="https://github.com/ChangbaDevs/KTVCocoaHTTPServer">ChangbaDevs&#x2F;KTVCocoaHTTPServer</a></li>
<li><a href="https://github.com/HisaMasa/JYSlideSegmentController">HisaMasa &#x2F; JYSlideSegmentController：JYSlideSegmentController 是一个视图控制器容器，就像 UITabBarController 一样，具有平滑的手势。</a><ul>
<li>截图<br>  <img data-src="https://i.loli.net/2020/11/01/R9dt1mfbHzTZJEB.jpg" alt="R9dt1mfbHzTZJEB"></li>
</ul>
</li>
<li><a href="https://github.com/futuretap/InAppSettingsKit">futuretap &#x2F; InAppSettingsKit：此 iOS 框架允许将设置设置为应用程序内设置，而不是将其设置为设置应用程序。</a></li>
<li><a href="https://github.com/ikesyo/Himotoki">ikesyo &#x2F; Himotoki：一种完全由 Swift 编写的类型安全的 JSON 解码库</a></li>
<li><a href="https://github.com/ishkawa/APIKit">ishkawa &#x2F; APIKit：类型安全的网络抽象层，将请求类型与响应类型相关联。</a></li>
<li><a href="https://github.com/SDWebImage/SDWebImage">SDWebImage &#x2F; SDWebImage：具有缓存支持的异步图像下载器，作为 UIImageView Category</a></li>
<li><a href="https://github.com/SDWebImage/SDWebImageWebPCoder">SDWebImage &#x2F; SDWebImageWebPCoder：用于 SDWebImage 的 WebP 编码器插件，请使用libwebp</a></li>
<li><a href="https://github.com/webmproject/libwebp">webmproject &#x2F; libwebp：WebP编解码器：用于以WebP格式编码和解码图像的库</a></li>
<li><a href="https://github.com/AFNetworking/AFNetworking">AFNetworking &#x2F; AFNetworking：一个适用于 iOS，macOS，watchOS 和 tvOS 的令人愉悦的网络框架。</a></li>
<li><a href="https://github.com/akkyie/AKPickerView">akkyie &#x2F; AKPickerView：一个简单但可自定义的水平选择器视图。</a><ul>
<li>Swift 版本：<a href="https://github.com/Akkyie/AKPickerView-Swift">akkyie &#x2F; AKPickerView-Swift：一个简单但可自定义的水平选择器视图。</a></li>
</ul>
</li>
<li><a href="https://github.com/BlocksKit/BlocksKit">BlocksKit &#x2F; BlocksKit：您一直希望拥有的 Objective-C block 实现。</a></li>
<li><a href="https://github.com/robbiehanson/CocoaAsyncSocket">robbiehanson &#x2F; CocoaAsyncSocket：适用于 Mac 和 iOS 的异步 socket 网络库</a></li>
<li><a href="https://github.com/CocoaLumberjack/CocoaLumberjack">CocoaLumberjack &#x2F; CocoaLumberjack：适用于 Mac 和 iOS 的快速，简单，功能强大且灵活的日志记录框架</a></li>
<li><a href="https://github.com/douban/DOUSNSSharing">douban &#x2F; DOUSNSSharing：SNS OAuth 2 绑定和共享</a></li>
<li><a href="https://github.com/devicekit/DeviceKit">devicekit &#x2F; DeviceKit：DeviceKit 是 UIDevice 的值类型替换。</a></li>
<li><a href="https://github.com/facebook/FBRetainCycleDetector">facebook &#x2F; FBRetainCycleDetector：iOS 库，可帮助检测运行时中的保留周期。</a></li>
<li><a href="https://github.com/ccgus/fmdb">ccgus &#x2F; fmdb：这是一个围绕SQLite的Objective-C包装器。</a></li>
<li><a href="https://github.com/foursquare/FSQCollectionViewAlignedLayout">foursquare &#x2F; FSQCollectionViewAlignedLayout：FSQCollectionViewAlignedLayout 是一种通用的集合视图布局，旨在非常灵活和可配置。 目的是使每次 UICollectionViewFlowLayout 不适合其视图的用户都不必编写自己的自定义布局类。</a></li>
<li><a href="https://firebase.google.com/">Firebase</a></li>
<li><a href="https://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics">FirebaseAnalytics</a></li>
<li><a href="https://firebase.google.com/docs/reference/ios/firebasecore/api/reference/Classes">FirebaseCore</a></li>
<li><a href="https://cocoapods.org/pods/FirebaseCoreDiagnostics">FirebaseCoreDiagnostics</a></li>
<li><a href="https://firebase.google.com/docs/crashlytics">Firebase Crashlytics</a></li>
<li><a href="https://firebase.google.com/docs/reference/android/com/google/firebase/installations/FirebaseInstallations">FirebaseInstallations</a></li>
<li><a href="https://github.com/FormatterKit/FormatterKit">FormatterKit &#x2F; FormatterKit：<code>stringWithFormat：</code>用于复杂的黑客集</a></li>
<li><a href="https://cocoapods.org/pods/GoogleDataTransport">GoogleDataTransport</a></li>
<li><a href="https://firebase.google.com/docs/reference/android/com/google/android/gms/measurement/AppMeasurement">AppMeasurement</a></li>
<li><a href="https://github.com/HeshamMegid/HMSegmentedControl">HeshamMegid &#x2F; HMSegmentedControl：UISegmentedControl 的高度可定制的替代品。</a></li>
</ol>
<p><em>因为数量众多的原因，许多库的描述我是直接使用 GitHub 上的描述机译后的结果，如有不甚了解或是产生误解的地方，还请读者点击链接访问库地址了解详情。</em></p>
<p>从以上列举的第三方库来看，豆瓣的 iOS 客户端编写仍然以 <code>Objective-C</code> 为主，但也有用到 <code>Swift</code>，没有用到跨平台的框架，部分库已经略显老旧（不排除他们自己维护更新的可能），来自于谷歌的以 <code>Firebase</code> 为核心的的第三方库，在客户端中应用广泛，这个库也是在之前我所不了解的，除此以外，还有一些了解后也不知道具体实现后会有什么效果的，如：</p>
<ul>
<li><a href="https://github.com/nanopb/nanopb">nanopb &#x2F; nanopb：具有较小代码量的协议缓冲区</a></li>
</ul>
<p> 是用来让 <code>protocol</code> 文件变小的吗？</p>
<p>诸如这类情况，整理并不能收获什么，只是方便了索引，真正的提高还需要进一步的基于业务对第三方库的使用和源码阅读。</p>
<p>最后一点题外话，在去年的时候点开各大软件的设置界面，有开源许可页面的应用记得还有知乎、京东、网易云这些，但在这次整理豆瓣开源许可第三方库的时候，再打开那些应用里看，发现原来的入口都已经消失。很好奇这种变化是因为原来所有的那些第三方库被那些公司用自研的技术取代了，还是因为对技术的尊重本就是一种可有可无的东西，在某次版本更迭中没做多大取舍就轻易的给取消了（取消了这份尊重）？虽然不是很重要的事，但细思起来好像也颇有些耐人寻味的地方。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>iOS</tag>
        <tag>OpenSource</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐几个播客节目</title>
    <url>//recommend-a-few-podcasts.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>因为最近有点用眼过度，所以在空闲时间想找一件尽量可以不用到眼睛又能涨知识的事情做。我先想到的其实是听书和听线上的付费课程。</p>
<p><strong>听书</strong>不太习惯，原因是许多原本通过看书看到的书面语，从看到变为听到，在从声音转换成画面的这个过渡里，总会有因为追不上朗读者稳定而平均的朗读速度而造成的空白。有时思绪想在某些段落稍作停留，有时又因为对当前段落的后续发展有了预见性的推测，想快点赶往下一章节，总之因为听书的方式相比较看书，缺乏一种主动可控的速度变换，而经常有一种错位的感觉。</p>
<p><strong>线上课程</strong>虽然有很多干货和知识点，但因为知识点多多少少都围绕着一个或两个中心点，一脉相承，有方便理解的优势和卖课的人也会注意由浅入深的方式讲课，虽然也需要思索，但几乎片刻就能想明白。然而听课也有一个不好的地方，就是对连贯性的要求比较高，用上下班通勤的时间来听课，偶尔会被其他的事情插入打乱，有时就会疲于回溯之前听过的课程。</p>
<p>所以最后就选择了听<strong>播客</strong>。原因也就是因为他和以上列出的两种选择比起来，内容以谈话为主，相对于书本，不需要持续的集中注意力，而听人说话，也是生活中比较平常的行为，不存在需要适应转换的问题。相对于听课，一集就一个主题，不用要求连贯性，随听随听，比较方便，没有压力。</p>
<p>进入正题，播客在国外已经发展很久了，在国内好像是最近一两年才火起来的，我也是在<a href="http://sspai.com/">少数派</a>的网站上才了解到，到现在，网络上可供选择的播客节目已经有很多了，形形色色的，有音乐的，脱口秀的，学英语的，甚至还有类似于 CCTV10 的走近科学栏目类型的节目。</p>
<p>因为初衷是涨知识，所以我倾向选择的节目类型大概是有干货，通熟易懂，行业相关或者因为知识壁垒的存在，跨行业能听懂可以被科普的节目也可以。给自己做好用户画像后，我在网上找了一些别人推荐的节目列表，有的从名字上过滤掉了，有的听了一两次过滤掉了。现在常听的节目大概有以下几个：</p>
<ul>
<li><a href="https://podcasts.apple.com/cn/podcast/%E5%A3%B0%E4%B8%9C%E5%87%BB%E8%A5%BF/id1183662640?l=en">声东击西</a>：比较关注时事政治，话题深入的程度和切入的角度我都很喜欢。</li>
<li><a href="https://podcasts.apple.com/cn/podcast/%E7%96%AF%E6%8A%95%E5%9C%88/id1088178402">疯投圈</a>：大概是我听的频率最高的一个节目了。主要是两个投资人在一块从投资的角度聊不同行业的事情，很难说我从里面可以得到什么直观的东西，但从节目里了解到的一些行业数据、轶事，也可以说打开了不少的眼界。</li>
<li><a href="https://podcasts.apple.com/cn/podcast/%E6%A2%81%E6%96%87%E9%81%93-%E5%85%AB%E5%88%86/id1492414487?l=en">梁文道•八分</a>：也是时事政治的内容比较多，似乎和第一个重复了，但因为主持人是梁文道，所以视角会偏向人文和哲学的角度多一点，更书生意气一点——也因为这个，有些推送我听到一半后面就不听了，倒不是觉得不好或者和我看法不同，难以容忍。而是觉得从文人的角度出发谈论一些需要身体力行去体会实践的事，总有点不太务实的感觉。</li>
<li><a href="https://podcasts.apple.com/cn/podcast/%E6%97%A0%E8%81%8A%E6%96%8B-%E6%97%A0%E8%81%8A%E7%9A%84%E6%97%B6%E5%80%99%E5%90%AC%E4%B8%80%E5%90%AC/id1433530822?l=en">无聊斋</a>：从节目的名字可以看出来是一档比较轻松的播客，我专门用来打发时间，舒缓神经，不太想集中注意力时，打开听听两人瞎侃还是不错的。</li>
</ul>
<p>以上。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>播客</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 自动化打包上传 AppleStore、fir.im，并发邮件通知测试人员</title>
    <url>//ios-automated-packaging-complicated-by-mail.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://i.loli.net/2020/10/19/XKmLbdSTGNoWYZl.png" alt="workflow"></p>
<p>从上图可以看出使用自动化出包，可以优化掉好几个需要人工介入的步骤，优化开发流程，节省开发者的时间。</p>
<p>自动打包的原理概不累述了，测试过程中如果有问题，可以用终端 <code>cd</code> 到项目目录，单独执行出问题的语句，再把错误的输出丢到搜索引擎，只要相信你遇到的问题别人肯定也会遇到，就一定能得到解决。如果有例外，那我相信——能弄出史无前例的问题的你，一定也厉害到可以史无前例的予以解决~当然也可以试着给我留言，说不定三个臭皮匠果真赛过诸葛亮。</p>
<p>脚本内容基本是基于网络上内容，做了整合，修复了一些可能会导致打包失败的错误。将打印添加颜色输出，以及添加了一些注释。</p>
<h1 id="一、参考"><a href="#一、参考" class="headerlink" title="一、参考"></a>一、参考</h1><ul>
<li><a href="https://www.jianshu.com/p/05dc9f925467">iOS 自动打包发布到 Fir 和 AppStore</a></li>
<li><a href="https://blog.csdn.net/ismilesky/article/details/76689448">自动打包 ipa 文件，上传 fir.im 托管平台_ismilesky 的博客 - CSDN 博客</a></li>
</ul>
<p>延伸知识：<a href="https://juejin.im/post/6844904067106340878">多渠道自动打包</a></p>
<h1 id="二、脚本源码"><a href="#二、脚本源码" class="headerlink" title="二、脚本源码"></a>二、脚本源码</h1><p>已做脱敏处理。</p>
<h2 id="自动打包并上传"><a href="#自动打包并上传" class="headerlink" title="自动打包并上传"></a>自动打包并上传</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打包前需要在 xcode 工程中证书选项设置 `Automatically manage signing` 否则会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------项目自定义部分(自定义好下列参数后再执行该脚本)</span></span><br><span class="line"><span class="comment"># 计时</span></span><br><span class="line">SECONDS=0</span><br><span class="line"></span><br><span class="line"><span class="comment">#工程名 将XXX替换成自己的工程名</span></span><br><span class="line">project_name=xxxxx</span><br><span class="line"></span><br><span class="line"><span class="comment">#scheme名 将XXX替换成自己的sheme名</span></span><br><span class="line">scheme_name=xxxxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工程中Target对应的配置plist文件名称, Xcode默认的配置文件为Info.plist</span></span><br><span class="line">info_plist_name=<span class="string">&quot;Info&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#打包模式 Debug/Release</span></span><br><span class="line">development_mode=Release</span><br><span class="line"></span><br><span class="line"><span class="comment">#firToken 替换成自己账号的 token</span></span><br><span class="line">fir_token=<span class="string">&quot;xxxxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#上传到 AppleStore 替换成自己的开发者账号</span></span><br><span class="line"><span class="comment">#密码需要到 https://appleid.apple.com/account 生成 App 专用密码</span></span><br><span class="line">apple_account=<span class="string">&quot;xxxxx&quot;</span></span><br><span class="line">apple_password=<span class="string">&quot;xxxxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------自动打包部分(无特殊情况不用修改)#</span></span><br><span class="line"><span class="comment">#工程绝对路径</span></span><br><span class="line">project_path=$(<span class="built_in">cd</span> `<span class="built_in">dirname</span> <span class="variable">$0</span>`; <span class="built_in">pwd</span>)</span><br><span class="line"></span><br><span class="line">archive_path=<span class="variable">$&#123;project_path&#125;</span>/PackageArchived</span><br><span class="line"></span><br><span class="line"><span class="comment">#build文件夹路径</span></span><br><span class="line">build_path=<span class="variable">$&#123;project_path&#125;</span>/AutoBuild</span><br><span class="line"></span><br><span class="line"><span class="comment">#plist文件所在路径</span></span><br><span class="line">exportOptionsPlistPath=<span class="variable">$&#123;project_path&#125;</span>/exportTest.plist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间</span></span><br><span class="line">DATE=`<span class="built_in">date</span> <span class="string">&#x27;+%Y-%m-%d-%H-%m-%S&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">#导出.ipa文件所在路径</span></span><br><span class="line">exportIpaPath=<span class="variable">$&#123;archive_path&#125;</span>/<span class="variable">$&#123;development_mode-$DATE&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取版本号</span></span><br><span class="line">version=$(sed -n <span class="string">&#x27;/MARKETING_VERSION/&#123;s/MARKETING_VERSION = //;s/;//;s/^[[:space:]]*//;p;q;&#125;&#x27;</span> <span class="variable">$&#123;project_name&#125;</span>.xcodeproj/project.pbxproj)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定输出ipa名称</span></span><br><span class="line">ipa_name=<span class="string">&quot;<span class="variable">$scheme_name</span>-v<span class="variable">$version</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出包路径，如果不存在创建，否则删除</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">&quot;<span class="variable">$archive_path</span>&quot;</span> ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	<span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$archive_path</span>&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$archive_path</span>&quot;</span></span><br><span class="line">	<span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$archive_path</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$build_path</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">	<span class="comment">#statements</span></span><br><span class="line">	<span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$build_path</span>&quot;</span></span><br><span class="line">	<span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$build_path</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\033[34;1m请选择打包方式(输入序号,按回车即可) \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\033[32;1m1:app-store       \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\033[32;1m2:ad-hoc    \033[0m&quot;</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="built_in">read</span> number</span><br><span class="line"><span class="keyword">while</span>([[ <span class="variable">$number</span> != 1 ]] &amp;&amp; [[ <span class="variable">$number</span> != 2 ]])</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\033[31m错误! 请输入 1 或者 2\033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\033[34;1m请选择打包方式(输入序号,按回车即可) \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\033[32;1m1:app-store       \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\033[32;1m2:ad-hoc    \033[0m&quot;</span></span><br><span class="line"><span class="built_in">read</span> number</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$number</span> == 1 ];<span class="keyword">then</span></span><br><span class="line">development_mode=Release</span><br><span class="line">exportOptionsPlistPath=<span class="variable">$&#123;project_path&#125;</span>/exportAppstore.plist</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">development_mode=Debug</span><br><span class="line">exportOptionsPlistPath=<span class="variable">$&#123;project_path&#125;</span>/exportTest.plist</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[33;1m///-----------\033[0m&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[33;1m/// 正在清理工程\033[0m&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[33;1m///-----------\033[0m&#x27;</span></span><br><span class="line"></span><br><span class="line">xcodebuild \</span><br><span class="line">clean -configuration <span class="variable">$&#123;development_mode&#125;</span> -quiet  || <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[32;1m///--------\033[0m&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[32;1m/// 清理完成\033[0m&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[32;1m///--------\033[0m&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[33;1m///-------------\033[0m&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\033[33;1m/// 正在编译工程: <span class="variable">$&#123;development_mode&#125;</span>\033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[33;1m///-------------\033[0m&#x27;</span></span><br><span class="line">xcodebuild \</span><br><span class="line">archive -workspace <span class="variable">$&#123;project_path&#125;</span>/<span class="variable">$&#123;project_name&#125;</span>.xcworkspace \</span><br><span class="line">-scheme <span class="variable">$&#123;scheme_name&#125;</span> \</span><br><span class="line">-configuration <span class="variable">$&#123;development_mode&#125;</span> \</span><br><span class="line">-archivePath <span class="variable">$&#123;build_path&#125;</span>/<span class="variable">$&#123;project_name&#125;</span>.xcarchive  -quiet  || <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[32;1m///-------------\033[0m&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[32;1m/// 编译完成   \033[0m&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[32;1m///-------------\033[0m&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[33m///-------------\033[0m&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[33m/// 开始ipa打包\033[0m&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[33m///-------------\033[0m&#x27;</span></span><br><span class="line">xcodebuild -exportArchive -archivePath <span class="variable">$&#123;build_path&#125;</span>/<span class="variable">$&#123;project_name&#125;</span>.xcarchive \</span><br><span class="line">-configuration <span class="variable">$&#123;development_mode&#125;</span> \</span><br><span class="line">-exportPath <span class="variable">$&#123;exportIpaPath&#125;</span> \</span><br><span class="line">-exportOptionsPlist <span class="variable">$&#123;exportOptionsPlistPath&#125;</span> \</span><br><span class="line">-allowProvisioningUpdates \</span><br><span class="line">-quiet || <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改ipa文件名称</span></span><br><span class="line"><span class="built_in">mv</span> <span class="variable">$exportIpaPath</span>/<span class="variable">$scheme_name</span>.ipa <span class="variable">$exportIpaPath</span>/<span class="variable">$ipa_name</span>.ipa</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="variable">$exportIpaPath</span>/<span class="variable">$ipa_name</span>.ipa ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[32;1m///-------------\033[0m&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\033[32;1m导出 <span class="variable">$&#123;ipa_name&#125;</span>.ipa 包成功 🎉🎉🎉  \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[32;1m///-------------\033[0m&#x27;</span></span><br><span class="line">open <span class="variable">$exportIpaPath</span></span><br><span class="line"><span class="comment">#移除构建文件夹</span></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$build_path</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[31;1m///-------------\033[0m&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\033[31;1m导出 <span class="variable">$&#123;ipa_name&#125;</span>.ipa 包失败 💔💔💔 \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[31;1m///-------------\033[0m&#x27;</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[36;1m///-------------\033[0m&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\033[36;1m/// 打包 ipa 完成。总耗时:<span class="variable">$&#123;SECONDS&#125;</span>s \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[36;1m///-------------\033[0m&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[33m///-------------\033[0m&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[33m/// 开始发布ipa包 \033[0m&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[33m///-------------\033[0m&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$number</span> == 1 ];<span class="keyword">then</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#验证并上传到App Store</span></span><br><span class="line"><span class="comment"># 将 -u 后面填入账号，-p后面填入密码</span></span><br><span class="line">altoolPath=<span class="string">&quot;/Applications/Xcode.app/Contents/SharedFrameworks/ContentDeliveryServices.framework/Versions/A/Frameworks/AppStoreService.framework/Versions/A/Support/altool&quot;</span></span><br><span class="line"><span class="string">&quot;<span class="variable">$altoolPath</span>&quot;</span> --validate-app -f <span class="variable">$&#123;exportIpaPath&#125;</span>/<span class="variable">$&#123;ipa_name&#125;</span>.ipa -u <span class="variable">$apple_account</span> -p <span class="variable">$apple_password</span> -t ios --output-format xml</span><br><span class="line"><span class="string">&quot;<span class="variable">$altoolPath</span>&quot;</span> --upload-app -f <span class="variable">$&#123;exportIpaPath&#125;</span>/<span class="variable">$&#123;ipa_name&#125;</span>.ipa -u  <span class="variable">$apple_account</span> -p <span class="variable">$apple_password</span> -t ios --output-format xml</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#上传到 Fir</span></span><br><span class="line">fir login -T <span class="variable">$fir_token</span></span><br><span class="line">fir publish <span class="variable">$exportIpaPath</span>/<span class="variable">$ipa_name</span>.ipa --skip-update-icon</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[33m///-------------\033[0m&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[33m/// 开始发送邮件给测试人员 \033[0m&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[33m///-------------\033[0m&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如需变更发件人和收件人邮箱，请到工程目录底下 sendEmail.py 文件内修改</span></span><br><span class="line">python sendEmail.py <span class="string">&quot;测试版本 (iOS)xxxxx v(<span class="variable">$&#123;version&#125;</span>) 上传成功&quot;</span> <span class="string">&quot;赶紧下载体验吧：xxxxx&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>

<h2 id="上传成功成功后发送邮件"><a href="#上传成功成功后发送邮件" class="headerlink" title="上传成功成功后发送邮件"></a>上传成功成功后发送邮件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sendEmail title content</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"></span><br><span class="line">sender = <span class="string">&#x27;lvkai@cutecatos.com;&#x27;</span></span><br><span class="line"><span class="comment">#单个邮箱 改为 to_receiver = &#x27;xxxxx&#x27;</span></span><br><span class="line"><span class="comment">#群发邮箱</span></span><br><span class="line">to_receiver = [<span class="string">&#x27;xxxxx&#x27;</span>,<span class="string">&#x27;xxxxx&#x27;</span>]</span><br><span class="line"><span class="comment">#抄送</span></span><br><span class="line">cc_receiver = [<span class="string">&#x27;xxxxx&#x27;</span>]</span><br><span class="line">smtpserver = <span class="string">&#x27;smtp.exmail.qq.com&#x27;</span></span><br><span class="line"><span class="comment">#smtpserver = &#x27;smtp.exmail.qq.com&#x27;</span></span><br><span class="line">smtpport = <span class="number">465</span></span><br><span class="line"></span><br><span class="line">//smtp 配置，需要到邮箱账户设置界面自行获取</span><br><span class="line">username = <span class="string">&#x27;xxxxx&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;xxxxx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 待优化内容，发送网页形式 邮件</span></span><br><span class="line"><span class="comment"># SendHtml = &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># &lt;html&gt;</span></span><br><span class="line"><span class="comment"># &lt;h1&gt;赶紧下载体验吧:&lt;a href=&quot;http://d.firim.vip/jpy7&quot;&gt;点击跳转&lt;/a&gt;&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">#     &lt;/html&gt;</span></span><br><span class="line"><span class="comment"># &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_mail</span>(<span class="params">title, content</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        subject = title</span><br><span class="line"></span><br><span class="line">        msg = MIMEMultipart(<span class="string">&quot;related&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># msg = MIMEText(content,&#x27;plain&#x27;,&#x27;utf-8&#x27;)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(title,unicode):</span><br><span class="line">            title = unicode(title, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        msg[<span class="string">&#x27;Subject&#x27;</span>] = title</span><br><span class="line">        msg[<span class="string">&#x27;From&#x27;</span>] = sender</span><br><span class="line">        msg[<span class="string">&#x27;To&#x27;</span>] = <span class="string">&quot;;&quot;</span>.join(to_receiver)</span><br><span class="line">        msg[<span class="string">&#x27;Cc&#x27;</span>] = <span class="string">&quot;;&quot;</span>.join(cc_receiver)</span><br><span class="line">        msg[<span class="string">&quot;Accept-Language&quot;</span>]=<span class="string">&quot;zh-CN&quot;</span></span><br><span class="line">        msg[<span class="string">&quot;Accept-Charset&quot;</span>]=<span class="string">&quot;ISO-8859-1,utf-8&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># msgText = MIMEText(SendHtml,&quot;html&quot;,&quot;utf-8&quot;)</span></span><br><span class="line">        msgText = MIMEText(content,<span class="string">&#x27;plain&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        msg.attach(msgText)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># fp = open(&quot;Ta_Pro_adHoc.png&quot;, &#x27;rb&#x27;)</span></span><br><span class="line">        <span class="comment"># msgImage = MIMEImage(fp.read())</span></span><br><span class="line">        <span class="comment"># fp.close()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># # 定义图片 ID，在 HTML 文本中引用</span></span><br><span class="line">        <span class="comment"># msgImage.add_header(&#x27;Content-ID&#x27;, &#x27;&lt;image&gt;&#x27;)</span></span><br><span class="line">        <span class="comment"># msg.attach(msgImage)</span></span><br><span class="line"></span><br><span class="line">        to_addrs=to_receiver+cc_receiver</span><br><span class="line">        smtp = smtplib.SMTP_SSL(smtpserver,smtpport)</span><br><span class="line">        smtp.login(username, password)</span><br><span class="line">        smtp.sendmail(sender, to_addrs, msg.as_string())</span><br><span class="line">        smtp.quit()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="built_in">print</span> <span class="built_in">str</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> send_mail(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>]):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;🎉🎉🎉发送成功!&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;❌❌❌发送失败!&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="三、问题"><a href="#三、问题" class="headerlink" title="三、问题"></a>三、问题</h1><h2 id="上传工具路径不对问题"><a href="#上传工具路径不对问题" class="headerlink" title="上传工具路径不对问题"></a>上传工具路径不对问题</h2><p>解决方法来源：<a href="https://www.cnblogs.com/guichongsui/p/11678841.html">xcode11 构建上传问题</a></p>
<p>从原来的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/Applications/Xcode.app/Contents/Applications/Application\ Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool</span><br></pre></td></tr></table></figure>

<p>变为了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/Applications/Xcode.app/Contents/SharedFrameworks/ContentDeliveryServices.framework/Versions/A/Frameworks/AppStoreService.framework/Versions/A/Support/altool</span><br></pre></td></tr></table></figure>

<h2 id="MARKETING-VERSION-获取版本号失败"><a href="#MARKETING-VERSION-获取版本号失败" class="headerlink" title="$(MARKETING_VERSION) 获取版本号失败"></a>$(MARKETING_VERSION) 获取版本号失败</h2><p>解决方法来源：<a href="https://medium.com/flawless-app-stories/how-to-handle-marketing-version-of-xcode-11-by-ci-db64a0ac71b9">How to handle $(MARKETING_VERSION) of Xcode 11 by CI</a></p>
<p>使用一下语句获取</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get release number from Xcode build settings</span></span><br><span class="line">version=$(sed -n <span class="string">&#x27;/MARKETING_VERSION/&#123;s/MARKETING_VERSION = //;s/;//;s/^[[:space:]]*//;p;q;&#125;&#x27;</span> &#123;your project name&#125;.xcodeproj/project.pbxproj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;version&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;[ERROR] failed to get MARKETING_VERSION&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h2 id="xcrun-altool-–upload-app-f-path-u-username-p-password-上传失败"><a href="#xcrun-altool-–upload-app-f-path-u-username-p-password-上传失败" class="headerlink" title="xcrun altool –upload-app -f path -u username -p password 上传失败"></a>xcrun altool –upload-app -f path -u username -p password 上传失败</h2><p>错误信息：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">Error: Errors uploading <span class="string">&#x27;xxx.ipa&#x27;</span>: (</span><br><span class="line">    <span class="string">&quot;Error Domain=ITunesSoftwareServiceErrorDomain Code=-22014 \&quot;We are unable to create an authentication session.\&quot; </span></span><br><span class="line"><span class="string">UserInfo=&#123;NSLocalizedDescription=We are unable to create an authentication session., NSLocalizedFailureReason=Unable to </span></span><br><span class="line"><span class="string">validate your application.&#125;&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>解决方式：到 <a href="https://appleid.apple.com/">https://appleid.apple.com</a> 生成一个专用密码就行了，然后用这个密码改到上面去，再次执行。即：<code>xcrun altool --upload-app -f a/b/xxx.ipa -u [xxxx@qq.com](mailto:xxxx@qq.com) -p 生成的专用密码</code></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>iOS</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>业余剪辑自我修养</title>
    <url>//amateur-clipsself-improvement.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>陆陆续续的剪了不少视频，在过程中也有一点收获，遂做个笔记，也做分享。</p>
<h2 id="剪辑软件的选择"><a href="#剪辑软件的选择" class="headerlink" title="剪辑软件的选择"></a>剪辑软件的选择</h2><p>随着短视频和自媒体的兴起，市面上陆陆续续的涌现出很多面向不同用户群体的视频软件，有的偏向使用简易，有的偏向特色功能。抛开移动端的 App，在 PC 端上剪辑视频有以下一些主流选择：</p>
<table>
<thead>
<tr>
<th>视频编辑软件</th>
<th>最适合于</th>
<th align="center">运动追踪</th>
<th align="center">多相机</th>
<th align="center">3D编辑</th>
<th align="center">360° VR</th>
<th align="center">XAVC-S</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.10besty.com/best-video-editing-software/#one">Adobe Premiere Pro CC</a></td>
<td>专业人士</td>
<td align="center">🚫</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">✅</td>
</tr>
<tr>
<td><a href="https://www.10besty.com/best-video-editing-software/#two">Corel VideoStudio Ultimate</a></td>
<td>爱好者</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">✅</td>
</tr>
<tr>
<td><a href="https://www.10besty.com/best-video-editing-software/#three">CyberLink PowerDirector</a></td>
<td>爱好者</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">✅</td>
</tr>
<tr>
<td><a href="https://www.10besty.com/best-video-editing-software/#four">Pinnacle Studio Ultimate</a></td>
<td><a href="https://wiki.mbalib.com/wiki/%E4%BA%A7%E6%B6%88%E5%90%88%E4%B8%80%E6%A8%A1%E5%BC%8F">产消合一者</a></td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">✅</td>
</tr>
<tr>
<td><a href="https://www.10besty.com/best-video-editing-software/#five">Magix Movie Edit Pro Premium</a></td>
<td>爱好者</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">✅</td>
</tr>
<tr>
<td><a href="https://www.10besty.com/best-video-editing-software/#six">Adobe Premiere Elements</a></td>
<td>爱好者</td>
<td align="center">✅</td>
<td align="center">🚫</td>
<td align="center">🚫</td>
<td align="center">🚫</td>
<td align="center">✅</td>
</tr>
<tr>
<td><a href="https://www.10besty.com/best-video-editing-software/#seven">Apple Final Cut Pro X</a></td>
<td>专业人士</td>
<td align="center">🚫</td>
<td align="center">✅</td>
<td align="center">🚫</td>
<td align="center">✅</td>
<td align="center">✅</td>
</tr>
<tr>
<td><a href="https://www.10besty.com/best-video-editing-software/#eight">Apple iMovie</a></td>
<td>消费者</td>
<td align="center">🚫</td>
<td align="center">🚫</td>
<td align="center">🚫</td>
<td align="center">🚫</td>
<td align="center">✅</td>
</tr>
</tbody></table>
<p><em>数据来自于：<a href="https://www.10besty.com/best-video-editing-software/">2020年最好的视频编辑软件推荐</a></em></p>
<p>除了以上列举的，还有比如会声会影、爱剪辑等等比较适合新手的剪辑软件也可选择。这里我选择的是 Adobe Premiere Pro CC，下面的快捷键及其他操作也都都是和 Pr 相关的。</p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>打开 pr 的快捷键面板，列表往下拉快捷键一大堆，刚入手时可以只记一些高频率的按键。随着使用深入其他快捷键的掌握也是水到渠成的。平时我工作最常用的几个快捷键：</p>
<blockquote>
<p>C：鼠标可以切开视频轨道</p>
<p>V：鼠标可以选中&#x2F;移动视频轨道</p>
<p>A：鼠标可以同时选中后面所有视频轨道</p>
<p>R：鼠标可以缩放视频速率</p>
<p>M：添加标记</p>
<p>ctrl+K：切断整个视频轨道</p>
<p>ctrl+M：输出视频</p>
</blockquote>
<h2 id="快捷键进阶"><a href="#快捷键进阶" class="headerlink" title="快捷键进阶"></a>快捷键进阶</h2><blockquote>
<p>键盘上下键：移动到上一段&#x2F;下一段剪切点，按住shift无视已激活轨道</p>
<p>键盘左右键：逐帧移动，按住shift变5帧移动，按住alt变成左右移动素材一帧</p>
<p>I&#x2F;O：标记入点&#x2F;出点，形成工作区</p>
<p>X：快速标记所选剪辑工作区</p>
<p>ctrl+shift+X：取消工作区</p>
<p>；键（L右边）：删除工作区</p>
<p>‘ 引号键（；右边）：抽取工作区（波纹）</p>
<p>\键（]键右边）：全局缩放时间轴，能看到整个序列的时长</p>
<p>&#96;键（1键左边）：最大化窗口</p>
<p>S：开启&#x2F;关闭吸附</p>
<p>Q&#x2F;W：波纹剪辑</p>
<p>shift+Q：右移剪辑点</p>
<p>shift+W：左移剪辑点</p>
<p>+&#x2F;-加减号：缩放时间轴宽度</p>
<p>ctrl+加减号+&#x2F;-：缩放轨道高度</p>
<p>shift+加减号+&#x2F;-：一次性缩放所有轨道高度</p>
<p>crtl+U：制作子剪辑（在项目生成新的视频资源，但不占用空间，配合上面入点出点标记可以很方便从一段长视频中删选提取想要的片段）</p>
<p>ctrl+K：剪切已激活轨道，按住shift无视已激活轨道。</p>
</blockquote>
<h2 id="关于素材"><a href="#关于素材" class="headerlink" title="关于素材"></a>关于素材</h2><p>视频剪辑的工作主要是围绕着视频素材展开，好的拍摄素材可以让后期的剪辑工作省事不少。但关于素材的拍摄，要展开讲的话，可能另一个话题了。所以这里仅以后期剪辑的角度粗略的提几点建议：</p>
<ul>
<li>转场。如果没有考虑好后期如何切换画面和镜头转换，拍摄时画面尽量稳定，镜头固定到单一视角，不要拍成朋友圈“大家和我一起来看看”这种没什么营养的视频。</li>
<li>拍摄角度。从视觉上出发对拍摄角度做区分，平视，仰视，俯视等不同角度，但是视频拍摄所考虑的不仅只是拍摄者所看到的，更重要的是被拍摄物体的展现，不过方法也大同小异，只是将角度的变换重心由拍摄者，变成拍摄物体。简而言之，就是多切换拍摄的角度试试看。就好比拍照讲究陌生感一个道理，从反直觉的角度去找角度。</li>
<li>构图。剪辑的时候发现视频拍摄，虽然叙事，保证一个时间段记录的信息完整性很重要，但构图也挺重要的，好的构图会让因为比例需要剪裁的视频，取舍起来不那么困难。另一方面，也可以让视频变得好看。还有关于构图更多的内容，网上有很多教程，概不累述，如果没有什么特别的想法，几乎可以选择适合自己的构图，直接套公式。</li>
<li>最后，器材很重要。好的器材可以让视频的容错性大大提升。</li>
</ul>
<h2 id="其他素材"><a href="#其他素材" class="headerlink" title="其他素材"></a>其他素材</h2><p>视频剪辑中，除了我们自己拍摄的素材以外，如果想在视频中插入的一些特殊效果，转场，或者替换字体等等。这些就需要通过搜索引擎来，这里推荐几个免费好用的模板网站：</p>
<ul>
<li><a href="https://www.lookae.com/">https://www.lookae.com</a></li>
<li><a href="http://www.cgmao.com/">http://www.cgmao.com</a></li>
<li><a href="https://www.cgsucai.com/">https://www.cgsucai.com</a></li>
</ul>
<p>免费字体网站：</p>
<ul>
<li><a href="https://www.fontsquirrel.com/">Free Font Utopia</a></li>
<li><a href="https://www.mianfeiziti.com/">免费字体网</a></li>
</ul>
<h2 id="制作滚动字幕的小技巧"><a href="#制作滚动字幕的小技巧" class="headerlink" title="制作滚动字幕的小技巧"></a>制作滚动字幕的小技巧</h2><p>制作字幕一开始我是创建<strong>旧版标题</strong>，把所有文本粘贴进去，然后用空格手动对齐。弄了一阵，发现由于中英文混排，总是无法较好的对齐，遂转换思路，把左右两边字幕创建两个文本框对齐。<br>整合其他一些制作字幕小技巧记录如下：</p>
<ul>
<li>人名排版对齐，创建 PR 旧版标题，人名和拼音最好分成单独两列。</li>
<li>人名拼音转换：<a href="link">汉字拼音在线转换</a></li>
<li>需要按人名排序，可以将人名复制到 Excel 表，通过选择排序方式实现按人名首字母递增或递减排序</li>
<li>如果已有人名和拼音的问题，想要快速分离文本中的汉字和拼音，可以用具备正则搜索功能的文本编辑器，搜索到对应类型的文本，选中删除。举个例子，利用 Sublime Text 在文本中筛选出英文，在搜索栏填入 <code>[^\x00-\xff]</code> 匹配双字节字符，效果如图。筛选出中文也是同样的操作，只需要将正则算法替换成 <code>[a-zA-Z]</code> 即可。<br>  <img data-src="https://i.loli.net/2020/10/02/Lv1VePaZQJ2T6yw.jpg" alt="Lv1VePaZQJ2T6yw"></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>视频剪辑</tag>
        <tag>Premiere Pro</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift - 权限请求封装</title>
    <url>//swift-permission-request-tools.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>注意到工程里面关于权限请求这块的逻辑没有很好地管理起来，一些是用 OC 的工具类，一些是用 Swift 代码在一些 <code>ViewController</code> 里面单独调用，不能复用，就想封装一个 Swift 版关于权限请求的工具类，虽然这个需求在 GitHub 上搜索也有很多现成的轮子，但使用起来感觉太重，而且有些久不维护，Swift 版本更新的又快，有些接口就不好使了，索性就自己封装一个。</p>
<p>一开始的思路也是想通过枚举来创建不同权限字段，通过静态方法来实现请求，但是蓝牙权限和定位权限需要实例化对象，设置代理。当使用 <code>static</code> 关键字来创建蓝牙和定位对象，当应用内有其他的业务也要使用蓝牙和定位对象时，代理响应就会有点问题。后面索性就用单例方法创建一个整体的权限管理对象，然后创建类方法，在类方法中自己调用自己。</p>
<p>过程中也参考了以下开源仓库的一些逻辑：</p>
<ul>
<li><a href="https://github.com/delba/Permission">Permission</a></li>
<li><a href="https://github.com/pascalbros/PAPermissions">PAPermissions</a></li>
</ul>
<p>当前封装的库仍存在的一个问题是，暂时未做到对所有权限的海陆空全方位覆盖，只是针对当前我们应用业务所使用到的权限的封装。</p>
<p>好了，话不多说上代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MARK: 权限状态枚举</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">PermissionStatus</span>: <span class="title class_ inherited__">String</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> authorized    <span class="operator">=</span> <span class="string">&quot;Authorized&quot;</span></span><br><span class="line">    <span class="keyword">case</span> denied        <span class="operator">=</span> <span class="string">&quot;Denied&quot;</span></span><br><span class="line">    <span class="keyword">case</span> disabled      <span class="operator">=</span> <span class="string">&quot;Disabled&quot;</span></span><br><span class="line">    <span class="keyword">case</span> notDetermined <span class="operator">=</span> <span class="string">&quot;Not Determined&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init?</span>(<span class="params">string</span>: <span class="type">String</span>?) &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> string <span class="operator">=</span> string <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(rawValue: string)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">PermissionStatus</span>: <span class="title class_ inherited__">CustomStringConvertible</span> &#123;</span><br><span class="line">    <span class="comment">/// The textual representation of self.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rawValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">KKPermissions</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">Callback</span> <span class="operator">=</span> (<span class="type">PermissionStatus</span>) -&gt; <span class="type">Void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MARK:权限请求方法</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">KKPermissions</span>&#123;</span><br><span class="line">    <span class="comment">//MARK:蓝牙权限</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">requestBluetooth</span>(<span class="keyword">_</span> <span class="params">callback</span>: <span class="keyword">@escaping</span> <span class="type">Callback</span>)&#123;</span><br><span class="line">        <span class="type">KKPermissions</span>.provide.bluetoothManager <span class="operator">=</span> <span class="type">KKPermissions</span>.provide.createBluetoothManager()</span><br><span class="line"></span><br><span class="line">        <span class="type">KKPermissions</span>.provide.bluetoothCallBack <span class="operator">=</span> callback</span><br><span class="line">        <span class="type">KKPermissions</span>.provide.bluetoothManager.startAdvertising(<span class="literal">nil</span>)</span><br><span class="line">        <span class="type">KKPermissions</span>.provide.bluetoothManager.stopAdvertising()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//MARK:应用内定位权限</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">requestLocationWhenInUse</span>(<span class="keyword">_</span> <span class="params">callback</span>: <span class="keyword">@escaping</span> <span class="type">Callback</span>)&#123;</span><br><span class="line">        <span class="type">KKPermissions</span>.provide.<span class="type">LocationManager</span> <span class="operator">=</span> <span class="type">KKPermissions</span>.provide.createLocationManager()</span><br><span class="line">        <span class="type">KKPermissions</span>.provide.locationCallBack <span class="operator">=</span> callback</span><br><span class="line">        <span class="type">KKPermissions</span>.provide.<span class="type">LocationManager</span>.requestWhenInUseAuthorization()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//MARK:持续使用定位权限</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">requestLocationAlways</span>(<span class="keyword">_</span> <span class="params">callback</span>: <span class="keyword">@escaping</span> <span class="type">Callback</span>)&#123;</span><br><span class="line">        <span class="type">KKPermissions</span>.provide.<span class="type">LocationManager</span> <span class="operator">=</span> <span class="type">KKPermissions</span>.provide.createLocationManager()</span><br><span class="line">        <span class="type">KKPermissions</span>.provide.locationCallBack <span class="operator">=</span> callback</span><br><span class="line">        <span class="type">KKPermissions</span>.provide.<span class="type">LocationManager</span>.requestAlwaysAuthorization()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//MARK:麦克风权限</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">requestMicrophone</span>(<span class="keyword">_</span> <span class="params">callback</span>: <span class="keyword">@escaping</span> <span class="type">Callback</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> audioSession <span class="operator">=</span> <span class="type">AVAudioSession</span>.sharedInstance()</span><br><span class="line">        audioSession.requestRecordPermission &#123; (allowed) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> allowed &#123;</span><br><span class="line">                callback(.authorized)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                callback(.denied)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//MARK:通讯录权限</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">requestContacts</span>(<span class="keyword">_</span> <span class="params">callback</span>: <span class="keyword">@escaping</span> <span class="type">Callback</span>) &#123;</span><br><span class="line">        <span class="comment">//1.获取授权状态</span></span><br><span class="line">        <span class="comment">//CNContactStore 通讯录对象</span></span><br><span class="line">        <span class="keyword">let</span> status <span class="operator">=</span> <span class="type">CNContactStore</span>.authorizationStatus(for: .contacts)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> phoneStatus: <span class="type">PermissionStatus</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.判断如果是未决定状态,则请求授权</span></span><br><span class="line">        <span class="keyword">if</span> status <span class="operator">==</span> .notDetermined &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建通讯录对象</span></span><br><span class="line">            <span class="keyword">let</span> store <span class="operator">=</span> <span class="type">CNContactStore</span>()</span><br><span class="line"></span><br><span class="line">            phoneStatus <span class="operator">=</span> .notDetermined</span><br><span class="line">            <span class="comment">//请求授权</span></span><br><span class="line">            store.requestAccess(for: .contacts, completionHandler: &#123;(isRight : <span class="type">Bool</span>,error : <span class="type">Error</span>?) <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> isRight &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;授权成功&quot;</span>)</span><br><span class="line">                    phoneStatus <span class="operator">=</span> .authorized</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    phoneStatus <span class="operator">=</span> .denied</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;授权失败&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                callback(phoneStatus)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> status <span class="operator">!=</span> .authorized &#123;</span><br><span class="line">            phoneStatus <span class="operator">=</span> .denied</span><br><span class="line">            callback(phoneStatus)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            phoneStatus <span class="operator">=</span> .authorized</span><br><span class="line">            callback(phoneStatus)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//MARK: 相册权限</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">requestPhoto</span>(<span class="keyword">_</span> <span class="params">callback</span>: <span class="keyword">@escaping</span> <span class="type">Callback</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> granted <span class="operator">=</span> <span class="type">PHPhotoLibrary</span>.authorizationStatus()</span><br><span class="line">        <span class="keyword">switch</span> granted &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">PHAuthorizationStatus</span>.authorized:</span><br><span class="line">            callback(.authorized)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">PHAuthorizationStatus</span>.denied, <span class="type">PHAuthorizationStatus</span>.restricted:</span><br><span class="line">            callback(.denied)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">PHAuthorizationStatus</span>.notDetermined:</span><br><span class="line">            <span class="type">PHPhotoLibrary</span>.requestAuthorization(&#123; status <span class="keyword">in</span></span><br><span class="line">                <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                    <span class="keyword">if</span> status <span class="operator">==</span> .authorized&#123;</span><br><span class="line">                        callback(.authorized)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        callback(.denied)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">@unknown</span> <span class="keyword">default</span>:</span><br><span class="line">            callback(.denied)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//MARK: 相机权限</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">requestCamera</span>(<span class="keyword">_</span> <span class="params">callback</span>: <span class="keyword">@escaping</span> <span class="type">Callback</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> granted <span class="operator">=</span> <span class="type">AVCaptureDevice</span>.authorizationStatus(for: <span class="type">AVMediaType</span>.video)</span><br><span class="line">        <span class="keyword">switch</span> granted &#123;</span><br><span class="line">        <span class="keyword">case</span> .authorized:</span><br><span class="line">            callback(.authorized)</span><br><span class="line">        <span class="keyword">case</span> .denied,.restricted:</span><br><span class="line">            callback(.denied)</span><br><span class="line">        <span class="keyword">case</span> .notDetermined:</span><br><span class="line">            <span class="type">AVCaptureDevice</span>.requestAccess(for: <span class="type">AVMediaType</span>.video, completionHandler: &#123; (granted: <span class="type">Bool</span>) <span class="keyword">in</span></span><br><span class="line">                <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                    <span class="keyword">if</span> granted &#123;</span><br><span class="line">                        callback(.authorized)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        callback(.denied)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">@unknown</span> <span class="keyword">default</span>:</span><br><span class="line">            callback(.denied)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//MARK: 跳转到APP系统设置权限界面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">jumpToSystemPrivacySetting</span>() &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> appSetting <span class="operator">=</span> <span class="type">URL</span>(string: <span class="type">UIApplication</span>.openSettingsURLString) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">#available</span>(<span class="keyword">iOS</span> <span class="number">10</span>, <span class="operator">*</span>) &#123;</span><br><span class="line">            <span class="type">UIApplication</span>.shared.open(appSetting, options: [:], completionHandler: <span class="literal">nil</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">UIApplication</span>.shared.openURL(appSetting)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KKPermissions</span>: <span class="title class_ inherited__">NSObject</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">createBluetoothManager</span>() -&gt; <span class="type">CBPeripheralManager</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> bluetoothManager <span class="operator">=</span> <span class="type">CBPeripheralManager</span>(</span><br><span class="line">            delegate: <span class="type">KKPermissions</span>.provide,</span><br><span class="line">            queue: <span class="literal">nil</span>,</span><br><span class="line">            options: <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">return</span> bluetoothManager</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">createLocationManager</span>() -&gt; <span class="type">CLLocationManager</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> locManager <span class="operator">=</span> <span class="type">CLLocationManager</span>()</span><br><span class="line">        locManager.delegate <span class="operator">=</span> <span class="type">KKPermissions</span>.provide</span><br><span class="line">        <span class="keyword">return</span> locManager</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> <span class="type">LocationManager</span>:<span class="type">CLLocationManager</span>!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">var</span> locationState: <span class="type">PermissionStatus</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> locationCallBack: <span class="type">Callback</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> bluetoothManager: <span class="type">CBPeripheralManager</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> bluetoothCallBack: <span class="type">Callback</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">var</span> bluetoothState: <span class="type">PermissionStatus</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">let</span> provide:<span class="type">KKPermissions</span> <span class="operator">=</span>  <span class="type">KKPermissions</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MARK: 定位/蓝牙 代理处理</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">KKPermissions</span>: <span class="title class_ inherited__">CLLocationManagerDelegate</span>,<span class="title class_ inherited__">CBPeripheralManagerDelegate</span>&#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">locationManager</span>(<span class="keyword">_</span> <span class="params">manager</span>: <span class="type">CLLocationManager</span>, <span class="params">didChangeAuthorization</span> <span class="params">status</span>: <span class="type">CLAuthorizationStatus</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span> <span class="type">KKPermissions</span>.provide.<span class="type">LocationManager</span> <span class="operator">!=</span> <span class="literal">nil</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> status &#123;</span><br><span class="line">        <span class="keyword">case</span> .authorizedAlways, .authorizedWhenInUse:</span><br><span class="line">            <span class="type">KKPermissions</span>.locationState <span class="operator">=</span> .authorized</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> .restricted, .denied:</span><br><span class="line">            <span class="type">KKPermissions</span>.locationState <span class="operator">=</span> .denied</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> .notDetermined:</span><br><span class="line">            <span class="type">KKPermissions</span>.locationState <span class="operator">=</span> .notDetermined</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">@unknown</span> <span class="keyword">default</span>:</span><br><span class="line">            <span class="type">KKPermissions</span>.locationState <span class="operator">=</span> .notDetermined</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span>.locationCallBack<span class="operator">?</span>(<span class="type">KKPermissions</span>.locationState<span class="operator">!</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span>.locationCallBack <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">peripheralManagerDidUpdateState</span>(<span class="keyword">_</span> <span class="params">peripheral</span>: <span class="type">CBPeripheralManager</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;权限状态测试  KKpermissions <span class="subst">\(peripheral.state)</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> <span class="type">KKPermissions</span>.provide.bluetoothManager <span class="operator">!=</span> <span class="literal">nil</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> peripheral.state &#123;</span><br><span class="line">        <span class="keyword">case</span> .unsupported, .poweredOff:</span><br><span class="line">            <span class="type">KKPermissions</span>.bluetoothState <span class="operator">=</span> .disabled</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> .unauthorized:</span><br><span class="line">            <span class="type">KKPermissions</span>.bluetoothState <span class="operator">=</span> .denied</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> .poweredOn:</span><br><span class="line">            <span class="type">KKPermissions</span>.bluetoothState <span class="operator">=</span> .authorized</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> .resetting, .unknown:</span><br><span class="line">            <span class="type">KKPermissions</span>.bluetoothState <span class="operator">=</span> .notDetermined</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">@unknown</span> <span class="keyword">default</span>:</span><br><span class="line">            <span class="type">KKPermissions</span>.bluetoothState <span class="operator">=</span> .notDetermined</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span>.bluetoothCallBack<span class="operator">?</span>(<span class="type">KKPermissions</span>.bluetoothState<span class="operator">!</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//响应一次后不再持有</span></span><br><span class="line">        <span class="keyword">self</span>.bluetoothCallBack <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>附上一个简单的 UI 效果：<br><img align="center" data-src="https://i.loli.net/2020/09/12/VLyFtvB4AJTErjU.gif" width=375px height=677px/></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS - HMAC 加密算法和一个 MD5 加密的问题</title>
    <url>//ios-hmac-encryption-and-an-md5-problem.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="最近阅读"><a href="#最近阅读" class="headerlink" title="最近阅读"></a>最近阅读</h2><ul>
<li><a href="https://swift.gg/2016/06/17/when-to-use-mutating-functions-in-swift-structs/">Swift 结构体何时使用 mutating 函数</a></li>
<li><a href="https://juejin.im/post/6862898534857834510">2020 年疫情之下 iOS 面试题总结篇</a></li>
<li><a href="https://blog.csdn.net/tianhai110/article/details/6339565">UML类图几种关系的总结</a></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近我们部门重新定义了一下应用更新的接口，使用到的主要加密方式主要有 HMAC SHA1 加密和 MD5 加密。</p>
<h2 id="HMAC-SHA1-加密"><a href="#HMAC-SHA1-加密" class="headerlink" title="HMAC SHA1 加密"></a>HMAC SHA1 加密</h2><p>HMAC SHA1 加密的方法是在 Stack Overflow 上看到的 <a href="https://stackoverflow.com/questions/24099520/commonhmac-in-swift/24411522#24411522">CommonHMAC in Swift</a></p>
<p>大概分两步：</p>
<ol>
<li>定义一个 HMAC 加密方式的枚举</li>
<li>实现一个 String 的拓展方法用来加密</li>
</ol>
<p>代码如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> HMACAlgorithm &#123;</span><br><span class="line">    <span class="keyword">case</span> MD5, SHA1, SHA224, SHA256, SHA384, SHA512</span><br><span class="line"></span><br><span class="line">    func toCCHmacAlgorithm() -&gt; CCHmacAlgorithm &#123;</span><br><span class="line">        var result: Int = <span class="number">0</span></span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .MD5:</span><br><span class="line">            result = kCCHmacAlgMD5</span><br><span class="line">        <span class="keyword">case</span> .SHA1:</span><br><span class="line">            result = kCCHmacAlgSHA1</span><br><span class="line">        <span class="keyword">case</span> .SHA224:</span><br><span class="line">            result = kCCHmacAlgSHA224</span><br><span class="line">        <span class="keyword">case</span> .SHA256:</span><br><span class="line">            result = kCCHmacAlgSHA256</span><br><span class="line">        <span class="keyword">case</span> .SHA384:</span><br><span class="line">            result = kCCHmacAlgSHA384</span><br><span class="line">        <span class="keyword">case</span> .SHA512:</span><br><span class="line">            result = kCCHmacAlgSHA512</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> CCHmacAlgorithm(result)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func digestLength() -&gt; Int &#123;</span><br><span class="line">        var result: <span class="built_in">CInt</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .MD5:</span><br><span class="line">            result = CC_MD5_DIGEST_LENGTH</span><br><span class="line">        <span class="keyword">case</span> .SHA1:</span><br><span class="line">            result = CC_SHA1_DIGEST_LENGTH</span><br><span class="line">        <span class="keyword">case</span> .SHA224:</span><br><span class="line">            result = CC_SHA224_DIGEST_LENGTH</span><br><span class="line">        <span class="keyword">case</span> .SHA256:</span><br><span class="line">            result = CC_SHA256_DIGEST_LENGTH</span><br><span class="line">        <span class="keyword">case</span> .SHA384:</span><br><span class="line">            result = CC_SHA384_DIGEST_LENGTH</span><br><span class="line">        <span class="keyword">case</span> .SHA512:</span><br><span class="line">            result = CC_SHA512_DIGEST_LENGTH</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Int(result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extension String &#123;</span><br><span class="line">    func hmac(algorithm: HMACAlgorithm, key: String) -&gt; String &#123;</span><br><span class="line">        let cKey = key.cStringUsingEncoding(<span class="built_in">NSUTF8StringEncoding</span>)</span><br><span class="line">        let cData = <span class="keyword">self</span>.cStringUsingEncoding(<span class="built_in">NSUTF8StringEncoding</span>)</span><br><span class="line">        var result = [CUnsignedChar](count: Int(algorithm.digestLength()), repeatedValue: <span class="number">0</span>)</span><br><span class="line">        CCHmac(algorithm.toCCHmacAlgorithm(), cKey!, strlen(cKey!), cData!, strlen(cData!), &amp;result)</span><br><span class="line">        var hmacData:<span class="built_in">NSData</span> = <span class="built_in">NSData</span>(bytes: result, length: (Int(algorithm.digestLength())))</span><br><span class="line">        var hmacBase64 = hmacData.base64EncodedStringWithOptions(<span class="built_in">NSDataBase64EncodingOptions</span>.Encoding76CharacterLineLength)</span><br><span class="line">        <span class="keyword">return</span> String(hmacBase64)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MD5-加密的问题"><a href="#MD5-加密的问题" class="headerlink" title="MD5 加密的问题"></a>MD5 加密的问题</h2><p>细心的朋友注意到，上面 HMAC 加密的枚举里有一个 MD5 的字段，如果同时用到  HMAC 加密和 MD5 加密的朋友，需要注意一下 Hmac-MD5 加密和 MD5 加密的区别，推荐可以用在线加密工具比较直观的看到加密结果的区别：<a href="https://tool.oschina.net/encrypt?type=2">在线加解密</a>。另外这个工具也可以用于通信双方用来和自己解密的结果校验是否正确。</p>
<p>回归正题，<code>MD5</code> 加密本身没什么难度，网上搜索一大把。抱着做笔记的目的贴一下 Swift 的源码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">///字符直接转 md5</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">conversionToMD5</span>() -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> str <span class="operator">=</span> <span class="keyword">self</span>.cString(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)</span><br><span class="line">    <span class="keyword">let</span> strLen <span class="operator">=</span> <span class="type">CUnsignedInt</span>(<span class="keyword">self</span>.lengthOfBytes(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8))</span><br><span class="line">    <span class="keyword">let</span> digestLen <span class="operator">=</span> <span class="type">Int</span>(<span class="type">CC_MD5_DIGEST_LENGTH</span>)</span><br><span class="line">    <span class="keyword">let</span> result <span class="operator">=</span> <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">UInt8</span>&gt;.allocate(capacity: <span class="number">16</span>)</span><br><span class="line">    <span class="type">CC_MD5</span>(str<span class="operator">!</span>, strLen, result)</span><br><span class="line">    <span class="keyword">let</span> hash <span class="operator">=</span> <span class="type">NSMutableString</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> digestLen &#123;</span><br><span class="line">        hash.appendFormat(<span class="string">&quot;%02x&quot;</span>, result[i])</span><br><span class="line">    &#125;</span><br><span class="line">    free(result)</span><br><span class="line">    <span class="keyword">return</span> <span class="type">String</span>(format: hash <span class="keyword">as</span> <span class="type">String</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后问题就来了：iOS 端的加密和服务器那边的加密结果无法对应，导致鉴权失败。<br>排查问题，让服务器同事打印在 <code>MD5</code> 加密前的每个步骤的值，发现都是一致的，在 <code>MD5</code> 加密后就不一致了。然后去就看了一下他写的源码，服务器那边的逻辑使用 <code>Java</code> 写的，发现他丢进 <code>MD5</code> 加密时是把上一步的结果调用 <code>getBytes()</code> 语句后丢进去的。即<strong>加密的是字符串转换后的字节数组</strong>。所以在 iOS 端这边的处理也需要将 <code>String</code> 转换成 <code>Data</code> 数据来加密。</p>
<p>所以步骤分为以下两步：<br>1.把 <code>String</code> 类型数据转换成 16 进制 <code>Data</code> 数据——注意是 16 进制的 <code>Data</code> 数据，如果直接用原生方法 <code>&quot;&lt;#String#&gt;&quot;.(using: .utf8)</code> 转换肯定是不行的。<br>2.把 <code>Data</code> 数据丢进 <code>MD5</code> 方法中进行加密<br>而在网上搜了一圈，Swift 版本大部分看到的都是用字符串进行 <code>MD5</code> 加密，最后仍是在 Stack Overflow 上看到了一个正确的结果 - <a href="https://stackoverflow.com/questions/39400495/md5-of-data-in-swift-3">MD5 of Data in Swift 3</a></p>
<p>最后和 <a href="https://www.jianshu.com/p/95dd32a15246"><code>String</code> 转 <code>Data</code> 的方法</a>整合以后。代码如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">///转换成 Data 数据再转换成 md5</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">conversionToDataToMD5</span>() -&gt; <span class="type">String</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data <span class="operator">=</span> <span class="type">Data</span>(hex: <span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">var</span> digest <span class="operator">=</span> [<span class="type">UInt8</span>](repeating: <span class="number">0</span>, count: <span class="type">Int</span>(<span class="type">CC_MD5_DIGEST_LENGTH</span>))</span><br><span class="line"></span><br><span class="line">    data.withUnsafeBytes &#123;</span><br><span class="line">        <span class="type">CC_MD5</span>(<span class="variable">$0</span>.baseAddress, <span class="type">UInt32</span>(data.count), <span class="operator">&amp;</span>digest)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> hashString <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> digest &#123;</span><br><span class="line">        hashString <span class="operator">+=</span> <span class="type">String</span>(format:<span class="string">&quot;%02x&quot;</span>, <span class="type">UInt8</span>(byte))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hashString</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="params">hex</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(bytes: <span class="type">Array</span>&lt;<span class="type">UInt8</span>&gt;(hex: hex))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> bytes: <span class="type">Array</span>&lt;<span class="type">UInt8</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Array</span>(<span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Array</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="params">reserveCapacity</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span> <span class="operator">=</span> <span class="type">Array</span>&lt;<span class="type">Element</span>&gt;()</span><br><span class="line">        <span class="keyword">self</span>.reserveCapacity(reserveCapacity)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Array</span> <span class="keyword">where</span> <span class="type">Element</span> <span class="operator">==</span> <span class="type">UInt8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="params">hex</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(reserveCapacity: hex.unicodeScalars.lazy.underestimatedCount)</span><br><span class="line">        <span class="keyword">var</span> buffer: <span class="type">UInt8</span>?</span><br><span class="line">        <span class="keyword">var</span> skip <span class="operator">=</span> hex.hasPrefix(<span class="string">&quot;0x&quot;</span>) <span class="operator">?</span> <span class="number">2</span> : <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> hex.unicodeScalars.lazy &#123;</span><br><span class="line">            <span class="keyword">guard</span> skip <span class="operator">==</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">                skip <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">guard</span> char.value <span class="operator">&gt;=</span> <span class="number">48</span> <span class="operator">&amp;&amp;</span> char.value <span class="operator">&lt;=</span> <span class="number">102</span> <span class="keyword">else</span> &#123;</span><br><span class="line">                removeAll()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> v: <span class="type">UInt8</span></span><br><span class="line">            <span class="keyword">let</span> c: <span class="type">UInt8</span> <span class="operator">=</span> <span class="type">UInt8</span>(char.value)</span><br><span class="line">            <span class="keyword">switch</span> c &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">let</span> c <span class="keyword">where</span> c <span class="operator">&lt;=</span> <span class="number">57</span>:</span><br><span class="line">                v <span class="operator">=</span> c <span class="operator">-</span> <span class="number">48</span></span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">let</span> c <span class="keyword">where</span> c <span class="operator">&gt;=</span> <span class="number">65</span> <span class="operator">&amp;&amp;</span> c <span class="operator">&lt;=</span> <span class="number">70</span>:</span><br><span class="line">                v <span class="operator">=</span> c <span class="operator">-</span> <span class="number">55</span></span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">let</span> c <span class="keyword">where</span> c <span class="operator">&gt;=</span> <span class="number">97</span>:</span><br><span class="line">                v <span class="operator">=</span> c <span class="operator">-</span> <span class="number">87</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                removeAll()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> b <span class="operator">=</span> buffer &#123;</span><br><span class="line">                append(b <span class="operator">&lt;&lt;</span> <span class="number">4</span> <span class="operator">|</span> v)</span><br><span class="line">                buffer <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                buffer <span class="operator">=</span> v</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> b <span class="operator">=</span> buffer &#123;</span><br><span class="line">            append(b)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> md5Str <span class="operator">=</span> <span class="string">&quot;两个黄鹂鸣翠柳，一行白鹭上青天。&quot;</span>.conversionToDataToMD5()</span><br></pre></td></tr></table></figure>

<p>然后因为业务原因，也用 OC 实现了这一整套的加密流程，最后一步的转换加密也大同小异：</p>
<ol>
<li>转换成 16 进制 <code>NSData</code> 数据<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+(NSData*)getHexDataWithString:(NSString*)string&#123;</span><br><span class="line">    const char *buf = [string UTF8String];</span><br><span class="line">    </span><br><span class="line">    NSMutableData *data = [NSMutableData data];</span><br><span class="line">    if (buf)&#123;</span><br><span class="line">        uint32_t len = strlen(buf);</span><br><span class="line">        char singleNumberString[3] = &#123;&#x27;\0&#x27;, &#x27;\0&#x27;, &#x27;\0&#x27;&#125;;</span><br><span class="line">        uint32_t singleNumber = 0;</span><br><span class="line">        for(uint32_t i = 0 ; i &lt; len; i+=2)&#123;</span><br><span class="line">            if ( ((i+1) &lt; len) &amp;&amp; isxdigit(buf[i]) &amp;&amp; (isxdigit(buf[i+1])) )&#123;</span><br><span class="line"></span><br><span class="line">                 singleNumberString[0] = buf[i];</span><br><span class="line"></span><br><span class="line">                 singleNumberString[1] = buf[i + 1];</span><br><span class="line"></span><br><span class="line">                 sscanf(singleNumberString, &quot;%x&quot;, &amp;singleNumber);</span><br><span class="line"></span><br><span class="line">                 uint8_t tmp = (uint8_t)(singleNumber &amp; 0x000000FF);</span><br><span class="line"></span><br><span class="line">                 [data appendBytes:(void *)(&amp;tmp)length:1];</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    return data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><code>NSData</code> <code>MD5</code> 加密<br>OC<code>MD5</code> 的加密就概不累述了，OC 比 Swift 更容易搜到，放一个我参考的博客：<a href="https://blog.csdn.net/u011349387/article/details/47318679">Objective-C NSString NSData Byte 等转换</a></li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>iOS</tag>
        <tag>OC</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS - 一些蓝牙问题的解决</title>
    <url>//ios-some-question-about-bluetooth.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="最近阅读"><a href="#最近阅读" class="headerlink" title="最近阅读"></a>最近阅读</h2><ul>
<li><a href="https://stackoverflow.com/questions/44030213/whats-the-swift-best-practice-for-reusable-uialertcontroller-configuration-via-e">通过枚举在 Swift 中实现 UIAlertController 的复用性</a></li>
<li><a href="https://mp.weixin.qq.com/s/FShd9WAMQdWU9Mp6eZR4rA">一文看破Swift枚举本质</a> </li>
<li><a href="https://www.cnblogs.com/onepixel/articles/7674659.html">十大经典排序算法（动图演示）</a></li>
<li><a href="https://daily.zhihu.com/story/9726758">为什么人会变成「工作狂」？这算不算一种上瘾行为？</a></li>
</ul>
<h2 id="一、计算蓝牙设备距离"><a href="#一、计算蓝牙设备距离" class="headerlink" title="一、计算蓝牙设备距离"></a>一、计算蓝牙设备距离</h2><p>被问到如何计算蓝牙设备距离的，之前有做过大概是通过设备信号量强弱通过计算，得出距离。这里总结一下。</p>
<p>基于上述逻辑，我们只要通过系统接口能拿到设备的信号量就行，而这里有个值得注意的点在于，这个设备信号量其实是可以通过两种方式获取到的。</p>
<ol>
<li>利用 <code>CoreLocation.framework</code> 中的 <a href="https://developer.apple.com/documentation/corelocation/clbeacon#//apple_ref/occ/instp/CLBeacon/rssi"><code>iBeacon</code></a> 这个类，其中有 <code>RSSI</code> 值（接收信号强度），可以用来计算发射端和接收端间距离。</li>
<li>通过 <code>Core Bluetooth</code> 的 <a href="https://developer.apple.com/documentation/corebluetooth/cbperipheral#//apple_ref/occ/instm/CBPeripheral"><code>CBPeripheral</code></a> 类中的 <code>readRSSI</code> 方法中读取到信号量。<br>如果你需要用蓝牙连接来控制设备，推荐使用第二种方法，如果需要长时间监听信号量，则可以配合定时器使用。</li>
</ol>
<p>通过 <code>rssi</code> 的计算距离公式具体如下：</p>
<blockquote>
<p>d &#x3D; 10^((abs(RSSI) - A) &#x2F; (10 * n))</p>
</blockquote>
<p>计算公式的代码实现：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="type">float</span>)calcDistByRSSI:(<span class="type">int</span>)rssi</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> iRssi = abs(rssi);</span><br><span class="line">    <span class="type">float</span> power = (iRssi<span class="number">-59</span>)/(<span class="number">10</span>*<span class="number">2.0</span>);</span><br><span class="line">    <span class="keyword">return</span> pow(<span class="number">10</span>, power);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<blockquote>
<p>d - 计算所得距离<br>RSSI - 接收信号强度（负值）<br>A - 发射端和接收端相隔1米时的信号强度<br>n - 环境衰减因子</p>
</blockquote>
<p>其中 环境衰减因子 可以根据具体设备计算出来，比如多次测试，通过确定的距离值 d 反向计算出 n 的值，然后用平均数或中位数的取值法取一个合适的数值。</p>
<h2 id="二、通过蓝牙设备在应用内实现直接拨打电话功能"><a href="#二、通过蓝牙设备在应用内实现直接拨打电话功能" class="headerlink" title="二、通过蓝牙设备在应用内实现直接拨打电话功能"></a>二、通过蓝牙设备在应用内实现直接拨打电话功能</h2><p>使用百度车载设备的时候发现他们可以直接在应用内发起系统拨打电话，众所周知，由于 iOS 系统限制，调用打电话方法时，都会弹出一个系统提示框，让用户确认。</p>
<p>那么这个问题是如何解决的呢，网上找了一下，在这篇文章<a href="https://historyzhang.github.io/2017/09/28/iOS%E6%8B%A8%E6%89%93%E7%94%B5%E8%AF%9D%E5%AF%B9%E8%AF%9D%E6%A1%86%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/">iOS拨打电话对话框问题解决</a>里面得到了答案。</p>
<p>里面使用的 <code>PBAP</code> 协议的 <code>AT Command</code> 来实现直接拨号功能。具体逻辑里面也写得很清晰。通俗的来说就是我们把号码发给蓝牙设备，由蓝牙设备发起拨打电话这个动作。唯一的限制就在于如果是纯 ble 设备就无法实现该功能。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>iOS</tag>
        <tag>OC</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift - 顶部弹出框封装</title>
    <url>//swift-toppop-upboxencapsulation.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>抽空把项目里的顶部弹出框封装了一下。</p>
<span id="more"></span>
<p>效果大概是这个样子：<br><img data-src="https://i.loli.net/2020/08/04/9R7WuCT2b5ezKoN.gif"></p>
<!--<img align="center" data-src="https://i.loli.net/2020/08/04/9R7WuCT2b5ezKoN.gif" width=375px height=677px/>-->

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><strong>自定义弹出框：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  KKHeadMessageView.swift</span></span><br><span class="line"><span class="comment">//  VoiceAssistant</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Kai Lv on 2020/7/29.</span></span><br><span class="line"><span class="comment">//  Copyright © 2020 Kaaaaai. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">MessageStyle</span>: <span class="title class_ inherited__">Int</span>&#123;</span><br><span class="line">    <span class="keyword">case</span> none</span><br><span class="line">    <span class="keyword">case</span> success</span><br><span class="line">    <span class="keyword">case</span> error</span><br><span class="line">    <span class="keyword">case</span> warning</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">extension</span> <span class="title class_">KKHeadMessageView</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> mv: <span class="type">KKHeadMessageView</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">func</span> showMessageView(<span class="keyword">_</span> message: <span class="type">String</span>) -&gt; ()&#123;</span><br><span class="line">        <span class="keyword">if</span> mv <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">            mv<span class="operator">?</span>.removeFromSuperview()</span><br><span class="line">            mv <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        mv <span class="operator">=</span> <span class="type">KKHeadMessageView</span>.<span class="keyword">init</span>(message: message, style: .warning)</span><br><span class="line">        mv<span class="operator">!</span>.show()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">func</span> showMessageView(<span class="keyword">_</span> message: <span class="type">String</span>, style:<span class="type">MessageStyle</span>) -&gt; ()&#123;</span><br><span class="line">        <span class="keyword">if</span> mv <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">            mv<span class="operator">?</span>.removeFromSuperview()</span><br><span class="line">            mv <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        mv <span class="operator">=</span> <span class="type">KKHeadMessageView</span>.<span class="keyword">init</span>(message: message, style: style)</span><br><span class="line">        mv<span class="operator">!</span>.show()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KKHeadMessageView</span>: <span class="title class_ inherited__">UIView</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> message: <span class="type">String</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> label_mes <span class="operator">=</span> <span class="type">UILabel</span>.<span class="keyword">init</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> style: <span class="type">MessageStyle</span> <span class="operator">=</span> .none</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">let</span> successBackgroundColor: <span class="type">UIColor</span> <span class="operator">=</span> <span class="type">UIColor</span>(red: <span class="number">86.0</span><span class="regexp">/255, green: 188/</span><span class="number">255</span>, blue: <span class="number">138.0</span><span class="operator">/</span><span class="number">255</span>,  alpha: <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">let</span> warningBackgroundColor: <span class="type">UIColor</span> <span class="operator">=</span> <span class="type">UIColor</span>(red: <span class="number">242.0</span><span class="regexp">/255, green: 153.0/</span><span class="number">255</span>, blue: <span class="number">46.0</span><span class="operator">/</span><span class="number">255</span>,  alpha: <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">let</span> errorBackgroundColor: <span class="type">UIColor</span> <span class="operator">=</span> <span class="type">UIColor</span>(red: <span class="number">192.0</span><span class="regexp">/255, green: 36.0/</span><span class="number">255</span>, blue: <span class="number">37.0</span><span class="operator">/</span><span class="number">255</span>,  alpha: <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">let</span> noneBackgroundColor: <span class="type">UIColor</span> <span class="operator">=</span>  <span class="type">UIColor</span>(red: <span class="number">44.0</span><span class="regexp">/255,  green: 187.0/</span><span class="number">255</span>, blue: <span class="number">255.0</span><span class="operator">/</span><span class="number">255</span>, alpha: <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">init</span>(<span class="params">message</span>: <span class="type">String</span>, <span class="params">style</span>: <span class="type">MessageStyle</span>)&#123;</span><br><span class="line">        <span class="keyword">self</span>.message <span class="operator">=</span> message</span><br><span class="line">        <span class="keyword">self</span>.style <span class="operator">=</span> style</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="operator">-</span><span class="number">49</span>, width: <span class="type">UIScreen</span>.main.bounds.size.width, height: <span class="number">48</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> style &#123;</span><br><span class="line">        <span class="keyword">case</span> .success:</span><br><span class="line">            <span class="keyword">self</span>.backgroundColor <span class="operator">=</span> <span class="type">KKHeadMessageView</span>.successBackgroundColor</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> .warning:</span><br><span class="line">            <span class="keyword">self</span>.backgroundColor <span class="operator">=</span> <span class="type">KKHeadMessageView</span>.warningBackgroundColor</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> .error:</span><br><span class="line">            <span class="keyword">self</span>.backgroundColor <span class="operator">=</span> <span class="type">KKHeadMessageView</span>.errorBackgroundColor</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> .none:</span><br><span class="line">            <span class="keyword">self</span>.backgroundColor <span class="operator">=</span> <span class="type">KKHeadMessageView</span>.noneBackgroundColor</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> attributes <span class="operator">=</span> [<span class="type">NSAttributedString</span>.<span class="type">Key</span>.font : <span class="type">UIFont</span>.<span class="keyword">init</span>(name: <span class="string">&quot;PingFangSC-Medium&quot;</span>, size: <span class="number">14</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> textSize <span class="operator">=</span> <span class="keyword">self</span>.message.boundingRect(with: <span class="type">CGSize</span>(width: <span class="type">UIScreen</span>.main.bounds.size.width, height: <span class="type">CGFloat</span>.greatestFiniteMagnitude), options: <span class="type">NSStringDrawingOptions</span>.usesLineFragmentOrigin, attributes: attributes <span class="keyword">as</span> [<span class="type">NSAttributedString</span>.Key : <span class="keyword">Any</span>], context: <span class="literal">nil</span>).size</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> label_mes <span class="operator">=</span> <span class="type">UILabel</span>.<span class="keyword">init</span>(frame: <span class="type">CGRect</span>(x: <span class="number">10</span>, y: <span class="keyword">self</span>.frame.height <span class="operator">-</span> textSize.height <span class="operator">-</span> <span class="number">5</span>, width: textSize.width, height: textSize.height))</span><br><span class="line">        label_mes.font <span class="operator">=</span> <span class="type">UIFont</span>.<span class="keyword">init</span>(name: <span class="string">&quot;PingFangSC-Medium&quot;</span>, size: <span class="number">14</span>)</span><br><span class="line">        label_mes.textColor <span class="operator">=</span> .white</span><br><span class="line">        label_mes.text <span class="operator">=</span> message</span><br><span class="line">        <span class="keyword">self</span>.label_mes <span class="operator">=</span> label_mes</span><br><span class="line">        <span class="keyword">self</span>.addSubview(<span class="keyword">self</span>.label_mes)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">show</span>()&#123;</span><br><span class="line">        <span class="type">UIApplication</span>.shared.keyWindow<span class="operator">?</span>.addSubview(<span class="keyword">self</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> animations : () -&gt; () <span class="operator">=</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.frame.origin.y <span class="operator">=</span> <span class="operator">-</span><span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> completionAnimations : (<span class="type">Bool</span>) -&gt; () <span class="operator">=</span> &#123; finished <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> finished &#123;</span><br><span class="line">                <span class="type">UIView</span>.animate(withDuration: <span class="number">5</span>, delay: <span class="number">0</span>, usingSpringWithDamping: <span class="number">1</span>, initialSpringVelocity: <span class="number">5</span>, options: [.curveEaseInOut], animations: &#123;</span><br><span class="line">                    <span class="keyword">self</span>.frame.origin.y <span class="operator">=</span> <span class="operator">-</span><span class="number">49</span></span><br><span class="line">                &#125;)&#123;finished <span class="keyword">in</span></span><br><span class="line">                    <span class="keyword">self</span>.removeFromSuperview()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">UIView</span>.animate(withDuration: <span class="number">1</span>, delay: <span class="number">0</span>, usingSpringWithDamping: <span class="number">10</span>, initialSpringVelocity: <span class="number">10</span>, options: [.curveEaseInOut], animations: animations, completion: completionAnimations)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     NSCoding not supported. Use init(text, preferences, delegate) instead!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">public</span> <span class="keyword">init?</span>(<span class="params">coder</span> <span class="params">aDecoder</span>: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">&quot;NSCoding not supported. Use init(text, preferences, delegate) instead!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>调用方式：</strong></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Swift 调用</span></span><br><span class="line">KKHeadMessageView.showMessageView(<span class="string">&quot;😊这是一个测试的弹窗。&quot;</span>, style: .success)</span><br><span class="line"></span><br><span class="line"><span class="comment">//OC 调用</span></span><br><span class="line">[KKHeadMessageView showMessageView:<span class="string">@&quot;😊这是一个测试的弹窗&quot;</span> style:MessageStyleNone];</span><br></pre></td></tr></table></figure>

<h2 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h2><p>如上文所见，基本逻辑相对简单，首先编写一个继承自 <code>UIView</code> 的类，重写 <code>init</code> 方法用来自定义这个 <code>view</code>，为了方便调用，用拓展写了两个类方法 <code>showMessageView()</code>，让后通过定义的枚举来展示不同风格的提示框。虽然作为一个自定义 <code>View</code>，上面的代码可能不是最优写法，但勉强算最适合我当前项目的写法。</p>
<p>也考虑到这个自定义 <code>View</code>，并不对多数人适用。所以想分享一下我在封装这个 <code>View</code> 时所做的一些思考，主要有两点：</p>
<ul>
<li>1.如何写好一个自定义 View？</li>
<li>2.我们应该如何设定自定义 View 的调用方式？</li>
</ul>
<p>那么关于这两个问题的答案从哪里可以找到呢？其实总的来说也就是老生常谈的三个方向：</p>
<ol>
<li>官方文档。</li>
<li>阅读源码。</li>
<li>技术博客。</li>
</ol>
<p>展开来说，自定义 <code>View</code> 的官方文档，其实就是去看看 <code>UIButton</code>、<code>UIView</code> 官方是怎么写的。但因为苹果是不开源的，看不到——虽然网上也有反推的实现，但毕竟有作者个人风格，而且有些还是用 <code>C++</code> 实现的，要模仿着写比较费劲。所以这条先搁置。</p>
<p>然后退而求其次，阅读 GitHub 上 Star 数量较多的自定义视图开源库，学学他们的写法。这里推荐两个库：</p>
<ul>
<li><a href="https://github.com/SwiftKickMobile/SwiftMessages">SwiftMessages</a></li>
<li><a href="https://github.com/jdg/MBProgressHUD">MBProgressHUD</a></li>
</ul>
<p>在封装消息提示框的时候我也考虑过对外开放的接口做成 <code>MBProgressHUD</code> 中调用方法返回一个单例，或者是和 <code>SwiftMessages</code> 将视图定义和使用分开。但最终因为图省事就选了一个简单的方式。另外还想到一个把 <code>MessageView</code> 用枚举来定义，然后通过实现关联值方法来直接显示，如果换这种实现的话，上面的调用方式可能就会变成这样：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">KKHeadMessageView</span>.success.showMessageView(<span class="string">&quot;😊这是一个测试的弹窗。&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>看起来有点像工厂模式的产物😊。</p>
<p>最后是技术博客。在 Google 上搜，一大推的教你怎么自定义 <code>View</code>，这里推荐两篇我觉得比较好的，有概念讲解，有源码示范，值得参考：</p>
<ul>
<li><a href="https://juejin.im/post/6844903686758481934">如何写好一个自定义View</a></li>
<li><a href="https://juejin.im/post/6844903878111002637">自定义View都写不好还做什么iOS开发</a></li>
</ul>
<p>最后还有几个小疑惑备注在这里：</p>
<ol>
<li>在自定义 <code>View</code> 中，我们通常在 <code>setSubUI</code> 方法里面设置子视图，在里面写一大堆类似于这种代码：<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> label_mes <span class="operator">=</span> <span class="type">UILabel</span>.<span class="keyword">init</span>(frame: <span class="type">CGRect</span>(x: <span class="number">10</span>, y: <span class="keyword">self</span>.frame.height <span class="operator">-</span> textSize.height <span class="operator">-</span> <span class="number">5</span>, width: textSize.width, height: textSize.height))</span><br><span class="line">        label_mes.font <span class="operator">=</span> <span class="type">UIFont</span>.<span class="keyword">init</span>(name: <span class="string">&quot;PingFangSC-Medium&quot;</span>, size: <span class="number">14</span>)</span><br><span class="line">label_mes.textColor <span class="operator">=</span> .white</span><br><span class="line">label_mes.text <span class="operator">=</span> message</span><br><span class="line"><span class="keyword">self</span>.label_mes <span class="operator">=</span> label_mes</span><br><span class="line"><span class="keyword">self</span>.addSubview(<span class="keyword">self</span>.label_mes)</span><br></pre></td></tr></table></figure>
 在 <a href="https://casatwy.com/iosying-yong-jia-gou-tan-viewceng-de-zu-zhi-he-diao-yong-fang-an.html">iOS应用架构谈 view层的组织和调用方案</a> 中看到说建议把这种初始化都丢进 <code>getter</code> 里面，而且 <strong>getter 和 setter 全部都放在最后</strong>。另外配合 <code>Swift</code> 中的 <code>extension</code> 可以让代码布局更好看，但也看到唐巧的<a href="http://blog.devtang.com/2015/03/15/ios-dev-controversy-1/#%E7%9C%81%E5%BF%83%E7%9C%81%E4%BA%8B">iOS 开发中的争议（一）</a>中说：<blockquote>
<p>在类中完全使用 _property 的方式来访问私有成员变量，是不会有内存管理上的问题的。但是使用 self.property 的方式来访问私有变量是不是也是一样不会有内存管理上的问题呢？确实也是，但是有一点需要注意：我们最好不要在 init 和 dealloc 中使用 self.property 的方式来访问成员变量。</p>
</blockquote>
</li>
</ol>
<p>  那么 <code>setSubUI</code> 的写法最优解是什么呢？</p>
<ol start="2">
<li>一个自定义 <code>View</code> 的展现形式通常有：<br>  1）外部初始化后，外部手动添加到视图，比如一些嵌入视图<br>  2）外部初始化后，自动添加到 <code>UIWindow</code> 或者当前显示 <code>Controller</code>，比如一些弹出框视图。<br>  3）也看到一自定义 View 会定义这种初始化方法<code>initWith:(NSString*)Message ToRootView:(UIView*)View</code>。外部传入父视图，然后自己在内部添加自己。<br>  以上三种方式，除了根据实际需求，就把自己添加到父视图上，还有什么更好的方式吗？</li>
</ol>
<p>以上。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>被光放弃的人</title>
    <url>//a-person-abandoned-by-the-light.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>看科幻小说常常会感到一种作为人类的自卑感，对于宇宙来说，我们只是其中数以亿计星球中的一个，即使拥有灿烂的文化和恢弘的历史，也一粒尘埃反射出的微弱光芒。</p>
<p>而作为个体，虽然每个人都有自己引以为傲的事情，经历过的人和事、在事件中的感受，我们也因为这些而变得与众不同。然而目光宇宙，时间、空间，都能比量出我们的不值一提。甚至可能只是一场灾难，我们日常曾以为很深刻的痛苦也会立马失去他原来的分量。</p>
<p>自卑感即源于此。在这些宏大和久远里，我们的所思所想所感，还存在什么意义吗？</p>
<p>电影《被光抓走的人》讲述了一个城市被不明白光照射后，一些相亲相爱的人集体消失了。而剩下的人，则因为没有消失而在自己的故事里兜兜转转。而在这些人的故事里，电影摘取了四个不同人物的例子作为整个城市的切片展示。</p>
<div class="note warning"><p>剧透警告 </p>
</div>

<p>黄渤扮演的中年教师因为自己和爱人没消失，在同学面前粉饰自己，怀疑爱人婚外情，自己也在婚外情的边缘试探，最后幡然醒悟，和爱人一起做饭。<br>都市白领王珞丹因为爱人消失，因为想知道他是和谁一起消息的，因为在找寻的过程中更加了解了丈夫和自己，决定放弃找寻的时候，收到丈夫意外沉湖的消息，最终放下。<br>地痞混混王大锤因为自己发小消失，蹲点，找警察，最后在某个小区门口拿刀捅了疑似的凶手。<br>漂亮富家女在民政局楼顶遭遇父母消失，因为自己和男朋友都没消失而不相信爱情，最后在男朋友跳楼证明自己后又回心转意。</p>
<p>几段故事里最饱满的是黄渤的故事，最喜欢的是大锤的故事。</p>
<p>比起另外三个较为直白的故事，大锤的故事显得含蓄，也更加深沉。虽然科幻片已然被降维成都市情感片，但导演关注男女之间的爱恨纠葛之余，也不忘关注城市中少数群体的感情。同性恋这一群体虽然在现代社会，随着人们认知的发展已经不是一个闻虎色变的词汇，但被人们所接受的同性恋大概都是那些时髦的，帅气的。同性恋中绝大部分，我想应该都是像大锤这样，在市井之中生活，虽然模糊的可以感知到自己的情感，但这种事，不说周围人认知，哪怕是自己的认知，也仍然固守传统，爱，但不敢去爱。这种表现在电影里面展示出来显得更具人性。</p>
<p>说黄渤的那段饱满也是一样的原因。在宾馆等女老师的时候，表现自己内心惶恐和不安时的做法是去洗了个澡。和女老师面对面坐着宾馆的床上时，终于决定坦诚面对自己，提到自己年轻时有过的阴暗想法，让我想起钱钟书先生说的：</p>
<blockquote>
<p>一个十八九岁没有女朋友的男孩子，往往心里藏的女人抵得上皇帝三十六宫的数目，心里的污秽有时过于公共厕所。</p>
</blockquote>
<p>是不是人到中年，总会直接或间接的承认自己曾经不光彩的心理以此来达到和展示自己比起过往更加成熟的目的。如果是这样，我打算现在就承认。</p>
<p>回到故事，黄渤和女老师坦诚之后就回家和妻子一起做饭。整部影片也在黄渤和妻子默契做饭背景下停止。</p>
<p>回到一开始我所提出的问题，《被光抓走的人》虽然不能给出一个答案，但却提供了一个看到问题的角度。就像电影里面虽然发生了重大的超自然事件，但里面所有的人，所面对的只是在这些事发生之后，他们自己的生活而已。宇宙和外星人离生活还有点距离。</p>
<p>在未来还未到来，远方还没能抵达的时候，我们所能处理的就是眼前的一些琐事罢了。对宇宙和未来的想象有益思维锻炼，但如果为之烦恼，那和杞人忧天又有什么区别。</p>
]]></content>
      <categories>
        <category>旁白</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>电影</tag>
        <tag>观后感</tag>
      </tags>
  </entry>
  <entry>
    <title>OC - 多代理的实现</title>
    <url>//oc-multi-delegate-implementation.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>迭代项目的时候碰到一个问题， 原因是负责的内容有一项是封装各大 AI 开放平台的 SDK 集成到一个 SDK 里，然后输出统一的接口，目的是为了可以在不同的 AI 中快速切换并使用。但由于之前输出给了兄弟公司使用，他们在一个音乐 SDK 中用语音 SDK 实现语音点歌的功能。然后当我的主应用同时使用两个 SDK 时，由于音乐 SDK 中实现了语音 SDK 的代理，所以我在上层再初始化语音 SDK 设置代理就不起作用。</p>
<h2 id="二、解决方式"><a href="#二、解决方式" class="headerlink" title="二、解决方式"></a>二、解决方式</h2><p>知道问题原因后，就比较容易解决了，具体有几种思路：</p>
<ol>
<li>打电话给兄弟公司的开发人员，你不要这样弄了，如果你非要这么弄，就暴露一个接口给我，让我选择是否要让你初始化。</li>
<li>延迟上层语音 SDK 的初始化，不和你抢代理的设置，就不存在被抢夺这件事了。</li>
<li>语音 SDK 实现多代理——既然你们都要实现我的代理方法，我就全部都给你们。</li>
</ol>
<p>作为一个有追求的开发仔，当然选择实现最高难度的自己实现多代理的方式——虽然由于时间关系，也用了第二种方式作为缓冲，然后也发现第二种方式存在一个问题，就是当网络较差的情况下，未能初始化成功，在初始化成功后，音乐 SDK 又会设置一次语音 SDK 的代理，又被抢回去了~</p>
<h2 id="三、具体实现"><a href="#三、具体实现" class="headerlink" title="三、具体实现"></a>三、具体实现</h2><p>实现的过程中，以下几篇文章的内容给了我很大的帮助：</p>
<ul>
<li><a href="https://www.jianshu.com/p/fed580fa45eb">iOS 如何实现多代理模式–OC</a></li>
<li><a href="https://juejin.im/post/5bd6842f6fb9a05d0045f925#heading-4">【OC梳理】多播代理</a></li>
</ul>
<p>两篇文章都讲的很细，所以对于有些细节就不展开讲了，只讲一下具体实现原理：</p>
<ol>
<li>首先理解代理模式。也就是由一个对象 A 通过他的<strong>唯一一个代理成员</strong>把消息发个对象 B。</li>
<li>多代理就是在第一步的基础上，把对象 A 的代理成员从唯一一个，拓展为多个，消息接收者也从单一的 B，可以延伸为 B1、B2、B3…Bx。</li>
</ol>
<p>所以实现的时候很简单。</p>
<h3 id="1-定义一个储存多个代理成员的数组："><a href="#1-定义一个储存多个代理成员的数组：" class="headerlink" title="1.定义一个储存多个代理成员的数组："></a>1.定义一个储存多个代理成员的数组：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@property (strong, nonatomic) NSPointerArray* delegates;</span><br><span class="line"></span><br><span class="line">-(NSPointerArray *)delegates&#123;</span><br><span class="line">    if (!_delegates) &#123;</span><br><span class="line">        _delegates = [[NSPointerArray alloc]init];</span><br><span class="line">    &#125;</span><br><span class="line">    return _delegates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-重写代理的-set-方法"><a href="#2-重写代理的-set-方法" class="headerlink" title="2.重写代理的 set 方法"></a>2.重写代理的 set 方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)setDelegate:(id&lt;ManagerDelegate&gt;)delegate&#123;</span><br><span class="line">    </span><br><span class="line">    for (id existDelegate in self.delegates) &#123;</span><br><span class="line">        if ([delegate isEqual:existDelegate]) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [_delegates addPointer:(__bridge void*)delegate];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-多代理响应"><a href="#3-多代理响应" class="headerlink" title="3.多代理响应"></a>3.多代理响应</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)asrResultIsTimeOut&#123;</span><br><span class="line">    if (self.currentCount != 0) &#123;</span><br><span class="line">        self.currentCount--;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        [self.asrTimer invalidate];</span><br><span class="line">        self.asrTimer = nil;</span><br><span class="line">        for (id delegate in self.delegates) &#123;</span><br><span class="line">            if ([delegate respondsToSelector:@selector(asrManagerActiveError:)]) &#123;</span><br><span class="line">                [delegate asrManagerActiveError:NETWORKERROR];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">      //原始响应方法</span><br><span class="line">//        if ([self.asrDelegate respondsToSelector:@selector(asrManagerActiveError:)]) &#123;</span><br><span class="line">//            [self.asrDelegate asrManagerActiveError:TIMEOUT];</span><br><span class="line">//        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、拓展阅读"><a href="#四、拓展阅读" class="headerlink" title="四、拓展阅读"></a>四、拓展阅读</h2><p>在实现的过程中，我一开始用的是 <code>NSMutableArray</code>，因为使用运行也没有什么问题，但看到👆多代理文章里说，用 <code>NSPointerArray</code> 会好点，不增加成员的应用计数，相当于弱引用。听起来不错哦，但忽然之前想到一个问题，为什么 <code>delegate</code> 一一定要用 <code>weak</code> 引用呢，这个问题之前一直没仔细去思考过，像灯下黑，一直用的反倒忽略了。当下，想起来就去百度了一下。在这里看到：<a href="https://www.jianshu.com/p/398472616435">iOS 代理为啥要用weak修饰? (刨根问底一)</a>——刨根问底的副标题深得我心~，里面有生动详细的例子说明，简单来说就是强引用会出现循环引用的问题。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>iOS</tag>
        <tag>OC</tag>
      </tags>
  </entry>
  <entry>
    <title>我的 AIO-notion 工作流搭建</title>
    <url>//about-my-notion-workflow.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://i.loli.net/2020/06/07/cSgrjKnkbB41AxI.jpg" alt="cSgrjKnkbB41AxI"></p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><p>制造和使用工具，是人类和动物最本质的区别。而使用好的工具和使用好工具，又是效率高的人类和效率低的人类最本质的区别。如何使用好工具，是方法，是技巧，千人千面，可能同一个好的方法放到不同的人身上，效果却是迥然不同的。好的工具的定义也同理。但在我们最终找到适合我们的方法和工具之前，我们可以选择那些久经人们考验的一些工具和方法来尝试和体验。本文介绍的就是一个久（大概有那么一两年）经人们考验的笔记软件——Notion。</p>
<h1 id="使用-Notion-之前"><a href="#使用-Notion-之前" class="headerlink" title="使用 Notion 之前"></a><strong>使用 Notion 之前</strong></h1><p>在使用 Notion 之前，我日常使用的工具大概有：苹果自带的便签、Sublime Text、MWeb、滴答清单。便签是用来记录琐碎的信息、想法，Sublime Text 用来浏览一些开发语言后缀的文件，MWeb 用来 Markdown 写作，滴答清单用来 GTD 管理和番茄计时。针对不同类型的事情，使用不同的工具去解决，在大部分情况下，体验还是不错的。但也存在一些局限，比如：</p>
<ul>
<li>当我处理一件任务，需要同时多个工具时，dock 栏挂了一大堆软件不说，在不同应用间切换也让我不能很好地集中注意力。</li>
<li>当我想回溯一个任务的文件或者记录时，不太方便。</li>
</ul>
<p>原因是我会实际产生数据记录的有两个地方，一个是便签，一个是 MWeb 的 Library，后者因为软件属性的原因，不好做分类，文件数量一多起来检索困难，前者虽然可以做分类，而我虽然也在做分类上花了一些心思。<br><img data-src="https://i.loli.net/2020/06/07/mYiUI1ZtVN3nA4X.png" alt="mYiUI1ZtVN3nA4X"><br>但也会存在当数据记录一旦多起来就检索困难，在层级不深的界面预览查找，通常只能看到便签内容的前几行内容，因为没有文件名和标签这种概念，要用便签这个轻量级应用做知识管理还是有点强便签所难的。</p>
<p>所以基于使用当前工具所发现的这两个局限，我倾向于找一个尽可能可以大一统的笔记&#x2F;GTD&#x2F;文档加工软件，并且在文件分类上最好能有一些自己的思考。在体验了 Bear、OneNote、印象笔记之后，最终我选择 Notion。</p>
<h1 id="选择-Notion-的理由"><a href="#选择-Notion-的理由" class="headerlink" title="选择 Notion 的理由"></a><strong>选择 Notion 的理由</strong></h1><p>为什么在体验后筛选掉那些同样优秀的笔记软件而选择 notion，抛开高低优劣的比较不谈。这里只说 notion 吸引我的地方。</p>
<p>比起 block 的使用便利性，和可以无限递增层级这两个特点。主要吸引我的其实是好看，通过各种不同类型的 block 组装来输出自己想要的东西，可以轻松的让输出结果很好看，稍微注意排版和颜色搭配的话，不过分的说，赏心悦目。甚至于有时候工作的间隙只是看着自己搭建的 GTD 界面就不自觉的感到被治愈。除了好看，所有二级目录都以瀑布流的形式汇集在一个界面，对于查找文件来说，也非常一目了然。</p>
<p>其次是好玩，网上对 notion 的评价，看到一个很形象的比喻：像乐高积木。我很赞同，notion 除了像乐高积木一样可以不断堆叠出自己想要的东西，从某种方面也具备着和它相似的可以无限拓展的可能性。另外，使用不同 block 堆叠的整个过程，也显得非常 geek，而 geek 在我看来他的意思就是，玩一些有意思的东西。</p>
<p>最后是好用。当然对于刚使用的人来说，是有一定上手难度的，但这些难度对于上手后可以提供的帮助也可以忽略不计。而具体是否好用，如何好用，我会在后文通过搭建我的工作流的例子来做展示。</p>
<h1 id="使用-Notion-搭建我的工作流"><a href="#使用-Notion-搭建我的工作流" class="headerlink" title="使用 Notion 搭建我的工作流"></a><strong>使用 Notion 搭建我的工作流</strong></h1><p>搭建我的工作流之前，我稍微去了解了一下在 notion 上用的很多的 PARA 相关知识，在 B 站上看到一个 up 主列了一个比较直观的脑图，大体如下：<br><img data-src="https://i.loli.net/2020/06/07/5uWnINJeSMsA7UV.jpg" alt="5uWnINJeSMsA7UV"></p>
<p>然后就把我以前记在便签内容，抽取了出来，分成了五个模块，分别是：</p>
<ul>
<li>Memo - 便签，用于快速记录笔记，和某个正在编辑的内容的快速链接地址</li>
<li>Personal - 个人，如题图所见，用于保存年度目标，习惯养成，愿望清单，记录想看的书籍电影的马克清单，记录账号的通行证，“有待整理”则是一个方便拓展的接口，用于保存随手收藏的资源。</li>
<li>Work - 工作，记录一些公司的信息，比如地址邮编，账号信息，客户信息，还有工作过程中产生的一些文件。</li>
<li>Study - 学习，除了记录大学自考本科的一些信息，还有一些个人开发和学习中记录到的一些琐碎小知识，虽然前面按身份属性区分，Study 也可以归类到 Personal，但为了方便记录跟踪，所以就把学习抽取出来做单独一个模块。</li>
<li>Archive - 归档，保存一些不经常用到资料，和用作展示的个人网站。</li>
</ul>
<p>有了这个初步结果，已经基本可以收纳我日常学习工作所产生的信息了。但基于 All-In-One 这一点，又看到 Youtube 上一个直播主的这个视频 - <a href="https://www.youtube.com/watch?v=wtBSAwPSjoU">How I Use Notion ● June 2019</a>，于是就决定把我滴答清单的项目搬运到 Notion 来，除了在首页置顶显示方便跟踪以外，我在单个的项目中添加了以下下属性：<br><img data-src="https://i.loli.net/2020/06/07/G9ejc6uqBdUMoVz.png" alt="G9ejc6uqBdUMoVz"></p>
<ul>
<li>类型：区分工作和个人</li>
<li>项目类型：二级分类，区分具体项目，学习也在这一级里面</li>
<li>状态：主要有四种，预处理，进行中，暂停，已完成。日常工作中我通常把图标切成看板模式，进行中只挂一个任务，排除其他的干扰。通常的流程是 预处理 → 进行中 → 已完成。而暂停则可以在 预处理 和 进行中 两者间转换。</li>
<li>Description：关于当前任务的描述，可选项</li>
<li>文件：作用于属性名一致</li>
<li>Mouths、Weeks、Weekday、isThisMouth、isThisWeek：都是为了从时间线查看任务信息，实际使用上用的比较多的是使用 isThisWeek 来过滤出一个只显示 本周任务 的表格，用于每个礼拜末的任务复盘。</li>
<li>截止：和预期时间相关联，确保任务可以按时完成。</li>
</ul>
<p>除了以上属性，这个表格我也创建了一个快速笔记的模板，用于记录任务中琐碎，具有时效性的信息。而有意义的数据则记录到工作或者个人的数据库中，以快捷方式引用。</p>
<p>至此，整个属于我的 Notion 工作流已经搭建完毕。当然有一些在规划时没想到的问题和后面新增的需求因为也要在实际使用中持续迭代，所以也创建了一个任务，用来持续更新我的 Notion 工作流。</p>
<p>除了用作只是管理和 GTD，在深度使用 Notion 后我也用它搭建了我的第二个博客网站 - <a href="https://notion.kaaaaai.cn/">背面-肆拾壹</a>，在 Study 中为我大学接下来的考试搭建了一个简单的学习复习跟踪和实行的表格。而 Notion 可以做到的远比我在这里分享的还要多得多。</p>
<p>当然除了很多优点，notion 作为一个刚起步没几年的新生软件也有一些体验比较糟糕的地方，比如从其他地方复制文本过来，不会保留空行，导出的文件无论是选择 md 格式、cvs 格式还是 pdf 格式都不是很尽人意，支持导入的软件寥寥无几，还有因为是在线的应用，有时候打开加载比较慢，如果碰到网络差，你恰好要快速记录时，就比较容易着急上火，另外前一阵子被墙的新闻闹得沸沸扬扬，没有国内版本支持，也是比较硬伤的地方。</p>
<p>最后，回到开始，制造和使用工具，是人类和动物最本质的区别。Notion 作为一个笔记工具，虽然强大，但工具只是工具。我们应该关注的是自我本身，关注如何通过工具创造出更有价值的内容。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>时间管理</tag>
        <tag>笔记软件</tag>
        <tag>Notion</tag>
      </tags>
  </entry>
  <entry>
    <title>解决使用 GitPage 重定向多次问题</title>
    <url>//web-resolve-recirculation-errors.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题表现"><a href="#问题表现" class="headerlink" title="问题表现"></a>问题表现</h2><p>博客网站更换了 DNS 解析的服务商，访问出现以下问题。<br>![03oBxi-20200530][image-1]</p>
<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>主要是使用的 <code>DNS</code> 解析服务的 <code>SSL/TLS</code> 设置和 GitPage 的 <code>HTTPS</code> 设置冲突了。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>解决方法很简单，主要就是保证网页和 <code>DNS</code> 解析服务的设置一致就好了。可以从两个方向解决。</p>
<h3 id="一、CloudFlare-设置灵活，GitHub-取消-HTTPS"><a href="#一、CloudFlare-设置灵活，GitHub-取消-HTTPS" class="headerlink" title="一、CloudFlare 设置灵活，GitHub 取消 HTTPS"></a>一、CloudFlare 设置灵活，GitHub 取消 HTTPS</h3><p>进入 GitHub 的仓库，点击 <strong>Setting → Options</strong>，一路下拉到 GitHub Pages，把 Enforce HTTPS  取消勾选就好了。<br>![OjCxmm-20200530][image-2]</p>
<h3 id="二、GitHub-设置-HTTPS，CloudFlare-设置-完全-模式"><a href="#二、GitHub-设置-HTTPS，CloudFlare-设置-完全-模式" class="headerlink" title="二、GitHub 设置 HTTPS，CloudFlare 设置 完全 模式"></a>二、GitHub 设置 HTTPS，CloudFlare 设置 完全 模式</h3><p>![DdM9XQ-20200530][image-3]</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>这里也推荐官方提供的解决方法-[解决重定向循环错误][1]，其实和我上述所说的是一致的。对于有经验的话按照里面所说的解决应该是不难的，但是对于第一次碰到这种问题的人来说，可能有点抽象。</p>
<p>[1]:	<a href="https://support.cloudflare.com/hc/zh-cn/articles/115000219871-%E8%A7%A3%E5%86%B3%E9%87%8D%E5%AE%9A%E5%90%91%E5%BE%AA%E7%8E%AF%E9%94%99%E8%AF%AF">https://support.cloudflare.com/hc/zh-cn/articles/115000219871-%E8%A7%A3%E5%86%B3%E9%87%8D%E5%AE%9A%E5%90%91%E5%BE%AA%E7%8E%AF%E9%94%99%E8%AF%AF</a> “解决重定向循环错误”</p>
<hr>
<h2 id="title-解决使用-GitPage-重定向多次问题tags-EXP-Web-Https-DNS-解析categories-笔记abbrlink-21686date-2020-05-30-17-24-52"><a href="#title-解决使用-GitPage-重定向多次问题tags-EXP-Web-Https-DNS-解析categories-笔记abbrlink-21686date-2020-05-30-17-24-52" class="headerlink" title="title: 解决使用 GitPage 重定向多次问题tags:  - EXP  - Web  - Https  - DNS 解析categories: 笔记abbrlink: 21686date: 2020-05-30 17:24:52"></a>title: 解决使用 GitPage 重定向多次问题<br>tags:<br>  - EXP<br>  - Web<br>  - Https<br>  - DNS 解析<br>categories: 笔记<br>abbrlink: 21686<br>date: 2020-05-30 17:24:52</h2><h2 id="问题表现-1"><a href="#问题表现-1" class="headerlink" title="问题表现"></a>问题表现</h2><p>博客网站更换了 DNS 解析的服务商，访问出现以下问题。<br>![03oBxi-20200530][image-1]</p>
<h2 id="问题原因-1"><a href="#问题原因-1" class="headerlink" title="问题原因"></a>问题原因</h2><p>主要是使用的 <code>DNS</code> 解析服务的 <code>SSL/TLS</code> 设置和 GitPage 的 <code>HTTPS</code> 设置冲突了。</p>
<h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h2><p>解决方法很简单，主要就是保证网页和 <code>DNS</code> 解析服务的设置一致就好了。可以从两个方向解决。</p>
<h3 id="一、CloudFlare-设置灵活，GitHub-取消-HTTPS-1"><a href="#一、CloudFlare-设置灵活，GitHub-取消-HTTPS-1" class="headerlink" title="一、CloudFlare 设置灵活，GitHub 取消 HTTPS"></a>一、CloudFlare 设置灵活，GitHub 取消 HTTPS</h3><p>进入 GitHub 的仓库，点击 <strong>Setting → Options</strong>，一路下拉到 GitHub Pages，把 Enforce HTTPS  取消勾选就好了。<br>![OjCxmm-20200530][image-2]</p>
<h3 id="二、GitHub-设置-HTTPS，CloudFlare-设置-完全-模式-1"><a href="#二、GitHub-设置-HTTPS，CloudFlare-设置-完全-模式-1" class="headerlink" title="二、GitHub 设置 HTTPS，CloudFlare 设置 完全 模式"></a>二、GitHub 设置 HTTPS，CloudFlare 设置 完全 模式</h3><p>![DdM9XQ-20200530][image-3]</p>
<h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><p>这里也推荐官方提供的解决方法-[解决重定向循环错误][1]，其实和我上述所说的是一致的。对于有经验的话按照里面所说的解决应该是不难的，但是对于第一次碰到这种问题的人来说，可能有点抽象。</p>
<p>[1]:	<a href="https://support.cloudflare.com/hc/zh-cn/articles/115000219871-%E8%A7%A3%E5%86%B3%E9%87%8D%E5%AE%9A%E5%90%91%E5%BE%AA%E7%8E%AF%E9%94%99%E8%AF%AF">https://support.cloudflare.com/hc/zh-cn/articles/115000219871-%E8%A7%A3%E5%86%B3%E9%87%8D%E5%AE%9A%E5%90%91%E5%BE%AA%E7%8E%AF%E9%94%99%E8%AF%AF</a> “解决重定向循环错误”</p>
<p>[image-1]:	<a href="https://s2.loli.net/2022/04/02/QRqexU16yVaWFuY.jpg">https://s2.loli.net/2022/04/02/QRqexU16yVaWFuY.jpg</a></p>
<p>[image-2]:	<a href="https://s2.loli.net/2022/04/02/eWLNPRoSHapdO38.jpg">https://s2.loli.net/2022/04/02/eWLNPRoSHapdO38.jpg</a></p>
<p>[image-3]:	<a href="https://s2.loli.net/2022/04/02/K4k8aJdegWbuPoV.jpg">https://s2.loli.net/2022/04/02/K4k8aJdegWbuPoV.jpg</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Web</tag>
        <tag>Https</tag>
        <tag>DNS 解析</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift - ?和!的学习</title>
    <url>//swift-optional-and-unwrapping-learning.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　最近在优化一个项目的过程，过程中发现之前开发时由于刚接触 <code>Swift</code> 的原因，在 <code>Swift</code> 中的类里使用了很多 <code>OC</code> 的写法，比如字典数组对象会习惯性用 <code>NSDictionary</code>、<code>NSArray</code>来初始化，而不是用 <code>[KeyType: ValueType]()</code> 或是 <code>[SomeType]()</code> 这种类型来实例化变量。虽然在使用上没有什么问题，但看起来多少有点。。。不优雅。<br>　　当我把大部分类型都修改成 <code>Swift</code> 中的写法后（部分未修改是因为使用 <code>String</code> 类型来给文本做截取和富文本定义，实在不如 <code>NSString</code> 顺手，这种不顺手让我不由想起 Stack Overflow 上看到的一个评论：I thougt i already getting along well  with Swift.）发现，原来一些变量是否为空的判断中，使用 <code>Swift</code> 里的 <code>optional</code> 类型会方便很多。<br>　　比如解析一个 json 数据，如果层级多而且里面每个元素都是不确定的，那么可能就需要每个层级都判一次空。而如果使用 ? 来设置当前对象为可选值，只需要在最后一层实际使用到对象值时，判一次空就 OK 了。<br>　　对于 ? 和 ! 的区别和总结，网上有很多文章，在这里就不重复造轮子了。下面就对这个 <code>optional</code> 的自己两个疑问做个记录。
　　</p>
<h2 id="和-！-是表示两种不同的类型吗，一种是可以为空，一种不可以为空？"><a href="#和-！-是表示两种不同的类型吗，一种是可以为空，一种不可以为空？" class="headerlink" title="? 和 ！ 是表示两种不同的类型吗，一种是可以为空，一种不可以为空？"></a>? 和 ！ 是表示两种不同的类型吗，一种是可以为空，一种不可以为空？</h2><p>　　刚开始使用的时候没做深入了解，以为 <code>optional</code> 中的 ? 和 ! 和 <code>let</code> 声明不可变变量，<code>var</code> 声明可变变量。? 和 ! 是一组彼此相对只是含义不同的两个符号。但深入了解了一下，发现并不是这样，引用两段官方的文档：</p>
<blockquote>
<p>You use the Optional type whenever you use optional values, even if you never type the word Optional. Swift’s type system usually shows the wrapped type’s name with a trailing question mark (?) instead of showing the full type name. For example, if a variable has the type Int?, that’s just another way of writing Optional<Int>. The shortened form is preferred for ease of reading and writing code.</p>
<p>The types of shortForm and longForm in the following code sample are the same:</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> shortForm: <span class="built_in">Int</span>? = <span class="built_in">Int</span>(<span class="string">&quot;42&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> longForm: Optional&lt;<span class="built_in">Int</span>&gt; = <span class="built_in">Int</span>(<span class="string">&quot;42&quot;</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>　　这里的意思是说当你使用 <code>Optional</code> 类型时的值，即使在初始化时没有用“Optional”这个单词指定类型，在 Swift 中也可用 ? 代替。即 <code>Int?</code> 等于 <code>Optional&lt;Int&gt;</code>。那按照之前我的理解，是否 ! 也是某个 Not Optional 单词的代替？后面官方文档就有提到了：</p>
<blockquote>
<p>When you’re certain that an instance of Optional contains a value, you can unconditionally unwrap the value by using the forced unwrap operator (postfix !). For example, the result of the failable Int initializer is unconditionally unwrapped in the example below.</p>
</blockquote>
<p>　　意思是说 ! 是代表一种 <code>Unconditional Unwrapping</code> 的运算符，而并不是作为一种类型的表达。
　　</p>
<h2 id="关于-Unconditional-Unwrapping"><a href="#关于-Unconditional-Unwrapping" class="headerlink" title="关于 Unconditional Unwrapping"></a>关于 Unconditional Unwrapping</h2><p>　　<code>Unconditional Unwrapping</code> 怎么理解，直译的话叫<strong>无条件展开</strong>，专业术语叫<strong>强制拆包</strong>。为什么使用 <code>Optional</code> 类型会需要强制拆包，如果使用 ! 运算符意味着强制拆包，那不使用 ! 时，<code>Optional</code> 是否还会做拆包的处理呢？<br>　　仍然回到官方文档，有这句：</p>
<blockquote>
<p>The Optional type is an enumeration with two cases. Optional.none is equivalent to the nil literal.</p>
</blockquote>
<p>　　也就是说 <code>Optional</code> 是一个默认带有 <code>Optional.none</code> 枚举类型的包装。所以使用时我们必须按官方说的：</p>
<blockquote>
<p>You must unwrap the value of an Optional instance before you can use it in many contexts.</p>
</blockquote>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>　　基于以上的学习和理解，我们可以来解读以下一些写法：</p>
<figure class="highlight swift"><figcaption><span>初始化</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> value:<span class="type">NSString</span> <span class="operator">=</span> <span class="literal">nil</span> <span class="comment">//错误写法，未指定 Optional，所以不可以被赋值为空</span></span><br><span class="line"><span class="keyword">let</span> value:<span class="type">NSString</span>! <span class="comment">//如果后续未赋值而直接使用则会崩溃</span></span><br><span class="line"><span class="keyword">let</span> value:<span class="type">NSString</span>? <span class="operator">=</span> <span class="literal">nil</span> <span class="comment">//同下，如果后续 value 未被赋值，他会默认等于 nil</span></span><br><span class="line"><span class="keyword">let</span> value:<span class="type">NSString</span>?</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><figcaption><span>转换类型</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array:<span class="type">NSArray</span> <span class="operator">=</span> <span class="type">NSMutableArray</span>.<span class="keyword">init</span>(object: <span class="string">&quot;111&quot;</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(111)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">print</span>(array <span class="keyword">as!</span> <span class="type">NSMutableArray</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Optional(&lt;__NSArrayM 0x7b790430&gt;(111))</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">print</span>(array <span class="keyword">as?</span> <span class="type">NSMutableArray</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><figcaption><span>方法定义</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//可传空值</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">buttonClick</span>(<span class="params">sender</span>: <span class="type">UIButton</span>?)&#123;</span><br><span class="line">    <span class="comment">//....    </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不可传空值</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">buttonClick</span>(<span class="params">sender</span>: <span class="type">UIButton</span>)&#123;</span><br><span class="line">    <span class="comment">//....    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fruitDic: [<span class="type">String</span>: <span class="type">String</span>] <span class="operator">=</span> [<span class="string">&quot;apple&quot;</span>:<span class="string">&quot;red&quot;</span>,<span class="string">&quot;banana&quot;</span>:<span class="string">&quot;yellow&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> apple: <span class="type">String</span>! <span class="operator">=</span> fruitDic[<span class="string">&quot;apple&quot;</span>]<span class="operator">!</span> <span class="comment">// String! 可以直接写成 String，这里只是为了直观阅读</span></span><br><span class="line"><span class="keyword">let</span> banana: <span class="type">String</span>? <span class="operator">=</span> fruitDic[<span class="string">&quot;apple&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> blueberry: <span class="type">String</span>! <span class="operator">=</span> fruitDic[<span class="string">&quot;blueberry&quot;</span>] <span class="operator">??</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">let</span> orange: <span class="type">String</span>? <span class="operator">=</span> fruitDic[<span class="string">&quot;orange&quot;</span>]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>《文学回忆录》读书笔记</title>
    <url>//literary-memoirs-reading-notes.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="《文学回忆录》"><a href="#《文学回忆录》" class="headerlink" title="《文学回忆录》"></a>《文学回忆录》</h2><div align = right> [木心](https://book.douban.com/subject/20440644/) </div>
<div align = right> 97 条标注 </div> 

<blockquote>
<p>我觉得艺术、哲学、宗教，都是人类的自恋，都在适当保持距离时，才有美的可能、真的可能、善的可能。如果你把宗教当做哲学对待，就有了距离，看清宗教究竟是什么；如果你把哲学当做艺术对待，就有了距离，看清哲学究竟是什么；如果你把艺术当做宗教对待，就有了距离，看清艺术究竟是什么——我的意见是，将宗教作宗教来信，就迷惑了；将哲学作哲学来研究，就学究了；将艺术作艺术来玩弄，就玩世不恭了。原因，就在于太直接，是人的自我强求，正像那耳喀索斯要亲吻水中的影。</p>
<p>凡是健全高尚的人，看悲剧，既骄傲又谦逊地想：事已如此，好自为之。一切伟大的思想来自悲观主义。真正伟大的人物都是一开始就悲观、绝望，置之死地而后生。</p>
<p>毕竟我们曾在五年之中，写信、等信二百多次，一片诚心。</p>
<p>佛家的慈悲、道家的虚纳（如婴、如水）都源于这种无抵抗的抵抗，以含垢忍辱占上风。吓倒你，不彻底的，使你惭愧而悔改，才是真的征服。</p>
<p>伪善，以物质换赞谢。善，天堂成银行，上帝是行长，天使是出纳，人们来取善与善报——慈善家都是高利贷者。 善，因是无报偿的，才可爱；恶，因是无恶报的，才可恶。 在智慧层次上，宗教低于哲学；宗教的善有善报、恶有恶报，是低层次的，平民的，乡愿的。 善之可爱，即因无报偿。</p>
<p>所有有趣的小孩子在学校走，突告母亲、姐姐送伞来，必羞臊，这是心理。小学，性质上就是伊甸园。儿童有儿童的浪漫主义，一时出现父母，拉回现世。天堂人间不能共存，世俗和理想难以沟通。</p>
<p>为什么先知、宗教家、哲学家要用比喻？从西方史诗到中国《诗经》，充满比喻，几乎是靠比喻架构完成的。从前的政治家、大臣、纵横家，劝君，为使其听，用比喻；对下民说，知其不懂，也用比喻。 说明人类的智力还在低级阶段。 真的相爱的人，不语，一瞥，不需比喻。智者面对，相视而笑，也不用比喻。比喻，是不得已。</p>
<p>一种圆融的刚执，一种崇高的温柔</p>
<p>特洛那教众人学成，个个武艺高强。特洛那说：你们要报答，就把我的仇人掳来。之后是大战，直到终于把仇人掳了来。特洛那说：啊，你来了，我还像从前一样爱你。去吧。 古人可爱。动作之大！</p>
<p>希望大家读《道德经》。有疑难，有问题，可以找我。电话是（718）5261357，<br>&#x2F;* 打不通了</p>
<p>“《道德经》就是以一种令人费解的、似乎不合逻辑的风格写成的，它充满了迷人的矛盾，它那有力而富有诗意的语言，捕获了读者的心灵，使读者摆脱了习以为常的逻辑推理的轨道。”</p>
<p>读陶诗，是享受，写得真朴素，真精致。不懂其精致，就难感知其朴素。不懂其朴素，就难感知其精致。他写得那么淡，淡得那么奢侈。</p>
<p>他不是中国文学的塔尖。他在塔外散步。我走过的，还要走下去的，就是这样的意象和境界。“釆菊东篱下，悠然见风筝”，我就像脱线的风筝，线断了，还向上飞。陶先生问：“不愿做塔尖么？”我说：“生在西方，就做伊卡洛斯，生在中国，只好做做脱线的风筝。”</p>
<p>我的大灵感呢？讲出来容易，写来难。不讲，写出来再讲。<br>&#x2F;* 是哪本书呢?</p>
<p>中国诗的演变，脉络清晰。既是连贯呼应的，又是段落分明的——唐诗宋词，有一种精神上的亲戚关系。 唐是盛装，宋是便衣，元是裤衩背心。拿食物来比，唐诗是鸡鸭蹄膀，宋词是热炒冷盆，元曲是路边小摊的豆腐脑、脆麻花。</p>
<p>如果抽掉杜甫的作品，一部《全唐诗》会不会有塌下来的样子。</p>
<p>《红楼梦》中的诗，如水草。取出水，即不好。放在水中，好看。</p>
<p>这几天在考虑，唐代诗人谁最有代表性？（“代表性”，是党的说法，奇怪）排下名来，只能是以下（硬硬心肠）：王勃、王之涣、王昌龄、高适、陈子昂、孟浩然、王维、崔颢、李白、杜甫、韩翃、孟郊、韩愈、刘禹锡、白居易、柳宗元、元稹、贾岛、李贺、杜牧、李商隐。</p>
<p>我不过是一箭飞过空中， 落在地上找不到藏身之处。</p>
<p>凡是纯真的悲哀者，我都尊敬。人从悲哀中落落大方走出来，就是艺术家。麦阿里并不是真的苦命。真的悲哀者，不是因为自己穷苦。哈姆雷特、释迦、叔本华，都不为自己悲哀。他们生活幸福。悲观，是一种远见。</p>
<p>从前艺术家要么不创造形式，一旦创造，都严守格律。贝多芬之前的交响乐，从不破格，乖乖的。西方、中国，都如此，在格式里拼命翻跟斗，不想到跑出来。</p>
<p>我和她乍相逢，记不真娇模样，我则索手抵着牙儿慢慢的想。</p>
<p>抱着原谅的心情去看这些诗，很轻，很薄，半透明，纸的木的竹的。日本味。非唐非宋，也非近代中国的白话诗。平静，恬淡。</p>
<p>不见哪儿有力度、深度，或有智慧出现。你要写却写不出来。真像他们的芥末、木拖鞋、纸灯笼。</p>
<p>提到东方，日本可以看看。希望在座都去日本看看，看看日本芸芸众生如何芸芸。我是日本文艺的知音，知音，但不知心——他们没有多大的心。 日本对中国文化是一种误解。但这一误解，误解出自己的风格，误解得好。 老一辈人说，日本民族不得好死。但在死之前，可得好活。</p>
<p>哦，上帝，你要救我就救我，你要毁灭我就毁灭我，但我时时刻刻把持住我的舵。</p>
<p>《哈姆雷特》其中有个最坏的叔叔，他却不多写。后来我懂了，有个象征即可，不必多写。整个古堡阴沉，唯奥菲莉娅（Ophelia）的死是明艳的一笔，白色和绿色。</p>
<p>我在狱中时，看见五十六个男人睡熟了，心想，好，大家统统释放了，出狱了——早晨醒来，大家又在牢里了。</p>
<p>“每一行都要表现自己的性格。”</p>
<p>真的智者、思想家，不能明争，懂得暗斗。</p>
<p>我少年时家有后花园，每闻笛声传来，倍感孤独，满心欲念，所以爱这两句“良辰美景奈何天，赏心乐事谁家院”。</p>
<p>通情达理而脾气很坏的人</p>
<p>任性，要看任什么性。伟大的性，要任，大任特任。</p>
<p>沈璟（1553—1610），他把武松弄了个老婆，好好一条汉子就此完了——武松好，好在单身。</p>
<p>鲁迅他们一味反封建反礼教，大概不以为这是值得注意的命题。周作人算是爱读闲书的，可惜忙于小玩意小摆设，拣了芝麻，忘了西瓜。他们兄弟二人对中国有爱而不知怎样去爱，最后还是谈不上爱。</p>
<p>历代红学家靠红学吃饭，鲁迅就挖苦过他们，鲁迅没有来得及论一论《红楼梦》——他不适宜做这件事，曹雪芹的“色”、“空”观念，鲁迅排斥的——只有王国维初步触到问题，因他用了叔本华、尼采的方法，但用得不熟练。看似哲学观点，还是佛学观点。</p>
<p>“性”，通常是器官在活动，没有“人”。《金瓶梅》不然，器官生在身上，还是写成了人，几乎是性的陀思妥耶夫斯基——托尔斯泰，陀思妥耶夫斯基，完成了艺术，《金瓶梅》要靠你自己找出它的艺术。</p>
<p>讽刺在艺术中的位置是什么？我认为：直接的、有具体对象的讽刺，是不艺术的。但丁、歌德，有过很多讽刺诗（歌德曾和席勒天天写讽刺诗），被遗忘了。但《神曲》、《浮士德》流传，伟大。 鲁迅的大量讽刺文，对象太具体，今日没有人看了。</p>
<p>我们要有耐心读古人的东西，要体谅他们的好奇心，如鬼怪之类。现代人喜欢真实——在陀思妥耶夫斯基以前，以为已写得很真实了，到陀氏一出，啊！文学能那么真实！到普鲁斯特，更真实。</p>
<p>文学不是描写真实，而是创造真实——真实是无法描写的。上帝是立体的艺术家，艺术家是平面的上帝。耶稣是半立体的，十字架只有正面才好看，侧面不好看，非得把耶稣钉上去才好看。</p>
<p>斯塔尔夫人（认为歌德《浮士德》写得不好的就是她）高度雄辩，也大赏理査逊的小说，曾前往哭其坟，结果墓中是一位屠夫。</p>
<p>少年人是脆弱的，因为纯洁。二十七岁、三十七岁、五十七岁，人就复杂了，知道如何对付自尊心，对付人生。</p>
<p>我看不活，弃世，也是一种坚强。 我说过“以死殉道易，以不死殉道难”，说得太含糊。“殉”是动词，“道”是名词，“死”是助词。以死得道，是“殉”；不死而得道，也是“殉”；死而不得道，是“牺牲”；不死也不得道，是行尸走肉。牛羊死，有什么道不道。 然而以死殉道者看不起不死者，不死者又看不起死者……两者都没有得道。 真的以死而殉道，一定理解尊重那不死而殉道者；真得道而不死者，也一定理解死而殉道者。 这是对上帝说的，不必注。学生讲，可以注此一注。</p>
<p>我说：“恋爱总是成功的。”为什么呢？你爱，那就成功了。歌德曾说：“假如我爱你，与你无涉。”全世界欣赏这句话。</p>
<p>我从小讨厌徐志摩型的文人，细皮白肉，金丝边眼镜，忽而轻声细语，忽而哈哈大笑。所谓江南才子，最可厌——曹雪芹是北方人的血，又在南方生活过。他的颓废，是北派的颓废。我要继续写，是南派的颓废（江南，可分有骨的江南，如绍兴；无骨的江南，如苏州）。</p>
<p>波德莱尔（Charles Baudelaire）不过是刘姥姥的海外亲戚。</p>
<p>将来回国，想出两篇论文：《鲁迅论》，《曹雪芹论》。</p>
<p>无知的人总是薄情的。无知的本质，就是薄情。</p>
<p>鲁迅，是一个人物。他早期的思想宣言《摩罗诗力说》，就对拜伦大为赞扬，以为要救中国，必须提倡“恶魔精神”，可惜鲁迅先生的抱负只在反帝反封建，可惜他刚刚开始怀疑，就找到了信仰。</p>
<p>老年人的仁慈是看清了种种天真。</p>
<p>就此别了吧， 就是别了吧， 如果是永远也别了吧， 虽然我不原谅你， 也决不会背弃你， 就此别了吧，就是别了吧， 如果是永远也别了吧。</p>
<p>没有长夜痛哭过的人，不足语人生。</p>
<p>但这种伟大崇高的灵智境界，进去容易，出来很难。一进去，年轻人很容易把自己架空。艺术家不能这样凭着英雄气息成长的。一个人要成熟、成长、成功，其过程应该是不自觉、半自觉、自觉这样一个自然的过程。</p>
<p>所谓民主，是得过且过的意思。一船，无船主，大家吵，吵到少数服从多数——民主。</p>
<p>道德在土中，滋养花果——艺术品是土面上的花果。道德力量愈隐愈好。一点点透出来。</p>
<p>现代文学，我以为好的作品将道德隐得更深，更不做是非黑白的评断。</p>
<p>人有那么一种心理，痛悔，内疚，等等，放在心里深思即可。一出声，就俗了，就要别人听见——就居心不良。人要想博得人同情、叫好，就是犯罪的继续。</p>
<p>我们的青春没有花朵，只有标语、口号、大字报。我们的青春在二次大战烽火中度过，在国共内战中度过。解放后，浪漫情怀被剥夺。我常常说浪漫情怀，意思是青年应该是这样的。我们没有像样的青春，至今恨恨不已。但可以安慰的，是死乞白赖拉到一点浪漫主义的尾巴，不是猪尾，是孔雀屏，有点光彩的。<br>&#x2F;* 那就是浪漫了</p>
<p>年青人无私无畏，其实私得厉害、畏得厉害，只有那点东西，拿掉就没有了。年青人谈人生，谈世界，其实说的是自己。</p>
<p>对年青人一生的转变有重要影响的事件，如下： 死亡，最亲爱的人的死亡。 爱情，得到或失去爱。 大病，病到几乎要死。 旅行，走到室外，有钱的旅行和无钱的流浪。<br>&#x2F;* 不觊觎死亡大病,听先生的,多恋爱,多走动。</p>
<p>对年青人一生的转变有重要影响的事件，如下： 死亡，最亲爱的人的死亡。 爱情，得到或失去爱。 大病，病到几乎要死。 旅行，走到室外，有钱的旅行和无钱的流浪。</p>
<p>当年的枕边书是《红楼梦》。</p>
<p>一拿起都德的书，轻快，舒适，像赤了脚走在河滩的软泥上，感觉好像早该这样享受一下。</p>
<p>以我的经验，“唯一恰当的词”，有两重心意：一，要最准确的。二，要最美妙的。准确而不美妙，不取，美妙而不准确，亦不取。</p>
<p>不忘记少年时翻来覆去读《恶之花》和《巴黎的忧郁》的沉醉的夜晚。我家后园整垛墙，四月里都是蔷薇花，大捧小捧剪了来，插在瓶里，摆书桌上，然后读波德莱尔，不会吸鸦片，也够沉醉了。<br>&#x2F;* 听起来也让人沉醉</p>
<p>所谓理想主义，要么是向未来看，要么，其实是向古代看。“现在”没有多大意思。<br>&#x2F;* 想起⟪午夜巴黎⟫了</p>
<p>什么是悲观主义？我以为就是“透”观主义。不要着眼于“悲”，要着眼于“观”——万事万物都会过去的，人是要死的，欲望永远不能满足，太阳底下无新事……这就是悲观。悲观主义是一个态度，是一个勇敢的人的态度。</p>
<p>尼采的《朝霞》、《艺术的启示》，特别是《查拉图斯特拉如是说》，是一流的艺术品。可惜我们不懂德文，听说尼采原文读起来铿锵有力，坠地作金石声，以后找个纯种的日耳曼男人朗读几段《查拉图斯特拉》听听。</p>
<p>个人遭遇时代，有人手舞足蹈，有人直接介入。我以为，遭遇大事要先退开。退开，可以观察。谁投入呢？有的是。</p>
<p>现在看，《少年维特之烦恼》站得住，《茵梦湖》已被忘记了。你们有机会遇到《茵梦湖》，不妨大略看看，借此知道“五四”时期年轻人的心态和取向。</p>
<p>任何天才免不了模仿期（贝多芬的第一、第二交响乐，就明显地受莫扎特、海顿的影响），而天才的特征，又是不顾死活要找自己的风格。“风格”的定义，我最近想到的诠释是：“敏于受影响，烈于展个性，是谓风格。”</p>
<p>三十而立，指的是选择对了。选择错了，是“三十而倒立”。</p>
<p>一个天才的诞生，必然是战争。如果有人反对你，你应该说：“情况正常。”</p>
<p>世界这只大船根本没有船长，有人毁坏，有人修补，但不问这船究竟航向哪里。可以预见，这船会爆炸，会沉没，沉没在宇宙里。</p>
<p>永恒是长长的一连串现实，现实是短短的一小段永恒。</p>
<p>柏格森（Bergson）认为，生命的冲动是宇宙万物的主宰。</p>
<p>普鲁斯特《睡眠与记忆》，伍尔芙夫人《一间自己的屋子》，写得好极了，就是散文。</p>
<p>痴心而保持明哲。</p>
<p>穿裤子的云</p>
<p>你小时可曾玩过枪 有木塞背带的枪 可曾弄坏扳机 如今我沉在遐想里 你和我一起哭吧 不要心肠太硬</p>
<p>《査泰莱夫人的情人》</p>
<p>鲁迅的世界观、宇宙观，有一度和佛教“touch”（触摸）了一下，就避开来。尼釆也碰过一下，避开来。他们都急着要去建立他们的人生观。</p>
<p>“因为礼物太精美，使得接受的人不配。”</p>
<p>幸与不幸，我们目睹了它的破灭。</p>
<p>自然界没有金鱼。名目繁多的菊花，也是靠野菊一代代培植变种而来。原始的女性，很难看，腰粗、臀大，乳房像两个袋，和现代时装模特儿完全两码事。男人按照自己的审美观念，千年万年，调教改造女人，妆饰、美衣、香料……女性渐渐好看了，骄傲了。连曹雪芹先生也糊涂，说男人是泥做的，女人是水做的，其实女人是男人的手工艺品。</p>
<p>尔曹身与名俱灭，不废江河万古流。</p>
<p>走在正道上，眼睛看着邪道，此之谓博大精深。</p>
<p>担当人性中最大的可能。</p>
<p>梦中情人，还是不如真的情人，我要见那个真情人。</p>
<p>《第二十二条军规》</p>
<p>夫妻的意思，就是凭道义、义务，共同生活，是守约，不能去要求爱情。爱情，是青春、美貌、神秘。夫妻呢，是有福同享、有难同当。</p>
<p>我少年时跟一个女孩子通信，因为写写文章，爱慕，通了三年多，后来一见面，从此不来往了。三年柏拉图。一见，一塌糊涂。勉强地吃饭，散步，勉强地有个月亮照着。</p>
<p>多少可爱的人去杀了多少可爱的人。</p>
<p>中国的公园，许多人在那里弄气功，抱住树，晃头——那是怕死，没有别的意思。穷凶极恶地怕死（说着，学抱树晃头的动作）。</p>
<p>大人虎变，小人革面，君子豹变。<br>&#x2F;* 出处?</p>
<p>生活是什么？生活是死前的一段过程。</p>
<p>25-24A，82 Street Jackson Heights，NY 11372. （中译：纽约市，杰克逊高地，八十二街，邮编11372）</p>
</blockquote>
]]></content>
      <categories>
        <category>剪报</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>中国近代文学</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS - UITableview 阴影圆角共存</title>
    <url>//ios-uitableview-shadow-rounded-corners-coexist.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>给 <code>UITableView</code> 同时设置圆角和阴影时发现在视图上只会显示圆角，原因是因为当我们设置 <code>masksToBounds</code> 为 <code>YES</code> 允许圆角剪裁时，圆角以外的阴影也会一并被剪裁掉。在网上找了一下解决方法，<a href="https://www.jianshu.com/p/48b1a601febf">ios阴影圆角共存</a> 这篇文章提供了一个思路，就是把圆角和阴影放在不同的两个控件上实现，然后叠加到一块。基本思路是正确的，但实际操作发现在最后插入作为阴影层的 <code>CALayer</code>，调用的方法可能会照成层级有点混乱的问题。下面展示一下我解决这个问题的方法和用 Swift 实现的代码。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>上图，阴影设置的有点浅：<br><img data-src="https://s1.ax1x.com/2020/04/11/G7xnHA.jpg" alt="IMG_8947A00ED7B9-1"></p>
<p>上代码：</p>
<figure class="highlight swift"><figcaption><span>Swift</span></figcaption><table><tr><td class="code"><pre><span class="line">        <span class="keyword">self</span>.view_navigation.frame <span class="operator">=</span> <span class="type">CGRectMake</span>(x: <span class="number">61</span>, y: <span class="number">15</span>, width: <span class="number">261</span>, height: <span class="type">CGFloat</span>(<span class="number">50</span> <span class="operator">*</span> (model.navigaArr.count <span class="operator">&lt;</span> <span class="number">5</span> <span class="operator">?</span> model.navigaArr.count : <span class="number">5</span>)))</span><br><span class="line">        <span class="keyword">self</span>.view_navigation.frame.origin.y <span class="operator">+=</span> <span class="keyword">self</span>.label_content.frame.height <span class="operator">+</span> <span class="keyword">self</span>.label_content.frame.origin.y</span><br><span class="line">        <span class="keyword">self</span>.view_navigation.layer.cornerRadius <span class="operator">=</span> <span class="number">14.0</span></span><br><span class="line">        <span class="keyword">self</span>.view_navigation.layer.masksToBounds <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">self</span>.view_navigation.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.white</span><br><span class="line">        <span class="keyword">self</span>.view_navigation.reloadData()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//因为这个 UITableview 是嵌套在另一个 UITableview 上的，实际测试发现 CALayer 会重复被添加，解决方法是给 CALayer 设置一个标记位，然后每次刷新的时候遍历一遍删除，当然这种方法有点不太优雅，</span></span><br><span class="line"><span class="comment">//        if self.layer.sublayers?.count ?? 0 &gt; 0 &#123;</span></span><br><span class="line"><span class="comment">//            self.layer.sublayers?.forEach(&#123; (zerolayer) in</span></span><br><span class="line"><span class="comment">//                if zerolayer.name == &quot;layer_navigation&quot;&#123;</span></span><br><span class="line"><span class="comment">//                    zerolayer.removeFromSuperlayer()</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;)</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> layer_navigation <span class="operator">=</span> <span class="type">CALayer</span>()</span><br><span class="line">        <span class="keyword">let</span> frame_navigation <span class="operator">=</span> <span class="keyword">self</span>.view_navigation.frame</span><br><span class="line">        layer_navigation.name <span class="operator">=</span> <span class="string">&quot;layer_navigation&quot;</span></span><br><span class="line">        layer_navigation.frame <span class="operator">=</span> frame_navigation</span><br><span class="line">        layer_navigation.cornerRadius <span class="operator">=</span> <span class="number">14.0</span></span><br><span class="line">        layer_navigation.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.white.cgColor</span><br><span class="line">        layer_navigation.masksToBounds <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">        layer_navigation.shadowColor <span class="operator">=</span> <span class="type">UIColor</span>.rgbaColorFromHex(rgb: <span class="number">0x333333</span>, alpha: <span class="number">0.12</span>).cgColor</span><br><span class="line">        layer_navigation.shadowOffset <span class="operator">=</span> <span class="type">CGSize</span>(width: <span class="number">0</span>, height: <span class="number">2</span>)</span><br><span class="line">        layer_navigation.shadowOpacity <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        layer_navigation.shadowRadius <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">        <span class="comment">//原 po 主方法：self.layer.insertSublayer(layer_navigation, below: self.view_navigation.layer)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.layer.insertSublayer(layer_navigation, at: <span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>上帝会掷几次骰子</title>
    <url>//god-will-rolls-the-dice-several-times.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　看了一本图说量子物理学史的书，《上帝的骰子》，书名来自于爱因斯坦的一句话：上帝不会掷骰子。去年也有一本书很火叫《量子物理史話：上帝掷骰子嗎？》，不说大家为什么都一窝蜂的抓着骰子不放，从这些现象我们可以看出，量子的不确定性的迷人魅力让许多人趋之如骛。<br>　　<span id="more"></span><br>　　《上帝的骰子》从量子物理的诞生引发争端开始，到贝尔不等式宣告近代量子物理的确立结束，中间穿插着近代物理学家的轶事和量子力学的知识点，基于人物引出理论，由时间线描述整个量子力学的演化过程，结构上还算井井有条，错落有致。但由于是一本入门书，不能讲的太深，这点就先天不足，然后所采取的叙述方式是用漫画这种形式，虽然生动形象，但总觉得有注水的嫌疑。前面讲量子物理学发展时还好，因为有干货，以物理学家对话的小剧场形式注水，勉强可以接受。但最后用了一整个大章用图解的形式来讲量子物理的应用，在我看来虽然不是画蛇添足，但也是一种可以让人一眼看穿的、并不高明的小聪明。<br>　　常言与人交往，切忌交浅言深。我补充一句，写读书评论，切忌学浅言深。回到内容本身，关于量子力学和量子力学史，可以让我评论的其实不多，限于认识，脱口而出的只有——牛逼，当贝尔不等式终结一切，我囫囵吃进几个认识：量子是纠缠的，宇宙是由无数个连续的不确定性所组成的。除此之外还有什么呢？在微观上，当代的技已尽于此，在宏观上，人类逃离地心引力仍然很费劲。对宇宙的认识除了依靠物理学家们的研究，作为时代里微不足道注脚的普通人，似乎只能依靠想象来填充关于宇宙的其他细枝末节，如此，宇宙、量子等等的一切对于我们普通人的意义在哪？<br>　　我想每个人都有自己的答案，虽然我也可以像之前一样，一字一句把我心里的答案通过推导的方式，摆出来给人看。但对于宇宙的答案，我想不给比给要好的多，不是因为害怕浅薄，浅薄没什么好怕的。只是觉得唯有无限才能回答无限。</p>
]]></content>
      <categories>
        <category>旁白</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>读后感</tag>
      </tags>
  </entry>
  <entry>
    <title>社畜都爱 GTD</title>
    <url>//everyone-love-gtd.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://s1.ax1x.com/2020/03/21/8hSBZR.jpg"></p>
<p>　　用了很久 GTD 工具，才知道它的全拼是 Getting Things done（把事情做好），而不是 Get to do（快去做）。虽然意思差不多，但是情绪上好像一个是在昂首挺胸向前迈进，另一个是无可奈何负重前行。看过关于很多关于时间管理的文章，每个作者侧重点和方向不同，都给我带来一定的收获。虽然在用心程度，耕耘深度都不如写文章的大佬们，但还是想写一下自己从接触到使用那么久以来的心得。<br>　　看到题目“社畜都爱 GTD”，可能有朋友就会跳出来这样反驳：我承认我是个社畜，但我不爱 GTD，我甚至不知道 GTD。或是这样反驳：我每天从八百平方米的卧室起来，在高大的落地窗前喝咖啡欣赏清晨的阳光，我不是个社畜，但我也爱 GTD 啊。虽然后面的杠法难度有点高，但这两个争议对于我的题目来说也确实存在，不过不去钻牛角尖，通过这两个争议我们可以延伸出两个问题：</p>
<blockquote>
<p>1.我是一名普通的工作者，不知道 GTD，也不知道 GTD 对我有何意义？<br>2.我并不是一个传统型的工作者，我甚至不用工作，但我也在使用 GTD，所以 GTD 到底适合哪些人群？</p>
</blockquote>
<h2 id="为什么需要-GTD"><a href="#为什么需要-GTD" class="headerlink" title="为什么需要 GTD"></a>为什么需要 GTD</h2><p>　　GTD 虽然只是一种时间管理的方法，但透过方法我们可以看到他的本质，即有条不紊的安排自己的事情，以避免手上事情堆积给自己造成压力和更好地完成手上的事情。就这点来说，我觉得每个人可能都有主动地去做 GTD 这件事或做了 GTD 而不自知。比如一个远离现代都市的农民，春种秋收，虽说是按着时节变化，按部就班，但不可否认，具体到哪天播种，哪天收割，田地上的每个人都有自己的打算。这算不算一种 GTD？<br>　　比如一个小孩，虽然小孩子的行为总是天马行空，想到做啥就去做啥，但像我小时候也偶尔会计划，哪一天要和朋友爬山，爬山那天要干嘛，哪一天和朋友去骑自行车，骑自行车那天要干什么。这又算不算一种 GTD？<br>　　我觉得 GTD 其实并不是一板一眼把计划写出来：很重要不紧急——补作业，很重要很紧急——看迪迦奥特曼。GTD 只是一种方法，一种化整为零，把我们需要做的事情按阶段，按层次划分的一种思想。这样看起来，人人都在 GTD。<br>　　当然也有人会说，这只是一种诡辩，把 GTD 和时间管理划等号的一种概念偷换。那换个方向，直面问题，GTD 对于一名普通工作者，意义到底在哪里？我想如果自己的位置不是在当前权利阶级的塔尖位置，所有人都会面临一个问题，就是自己的时间被自己的直属领导安排，当然这都是理所应当的。而这时候如果你在设定好的时间内完成好自己所需要做的事情，那么是不是可以获得一定的时间自由？而 GTD 的意义在于这里，可以更好的帮助你在设定好的边界内，获取到尽可能的时间自由。通俗一点说就是，你不进行时间管理，你就被时间管理。当然也可以比较浪漫的想，GTD 是每天三点一线的社畜为捍卫自己时间自由进行的最后一点负隅顽抗，几乎是一种戴着镣铐的舞蹈了。
　　</p>
<h2 id="GTD-到底适合哪些人群"><a href="#GTD-到底适合哪些人群" class="headerlink" title="GTD 到底适合哪些人群"></a>GTD 到底适合哪些人群</h2><p>　　另一个问题，GTD 到底适合哪些人群，在上文中，我说人人都在 GTD，所以每个人都适合 GTD，这就是我的结论。但我想在这个结论的基础上延伸一下，为什么每个人都适合 GTD？<br>　　回到原点，GTD 是什么，GTD 是一种时间管理的方法，那为什么我们需要时间管理，因为我们时间不够，拿最近的疫情来说，医生呼吁大家不用每个疑似患者都去医院检查，这样容易照成医疗资源挤兑，每个人都检查，导致真正重症病人被遗漏，乃至悲剧发生。换成我们的日常来说，就是每件事都挤到这一分钟想被完成，造成了一种时间挤兑，导致真正重要的事情被我们遗忘。<br>　　也就是说我们需要时间管理，本质是因为我们时间不够用，因为时间不够用我们去寻求一种解决方式。从某种意义上来看，这是一件让人伤感的事。所以结论虽然是每个人都适合 GTD，但我希望每个人都用不上 GTD。
　　</p>
<h2 id="选择一个-GTD-工具"><a href="#选择一个-GTD-工具" class="headerlink" title="选择一个 GTD 工具"></a>选择一个 GTD 工具</h2><p>　　长篇累牍铺垫了那么久，发现我说废话能力又上升了一个档次，几乎可以收拾收拾去官场里打滚了。haha，进入正题，选择一个 GTD 工具，市面上的 GTD 工具有很多，考虑到在苹果不同的设备端上都能使用，我尝试了三种主流的工具：Microsoft To Do&#x2F;Things&#x2F;滴答清单<br>　<img data-src="https://s1.ax1x.com/2020/03/21/8hS4eA.jpg"><img data-src="https://s1.ax1x.com/2020/03/21/8hScRO.jpg"><img data-src="https://s1.ax1x.com/2020/03/21/8hSyi6.jpg"><br>　　先说结论，如果是深度用户，可以接受付费使用的话，推荐使用滴答清单。而如果是像我这样，整体的工作流核心并不是围绕着 GTD 工具展开，而是把它当成一个辅助工具来用的话，且不想为之付费的用户，则推荐使用 Microsoft To Do。<br>　　为了直观展现这三个软件的差异，针对他们的功能我列了个表格：<br> <img data-src="https://s1.ax1x.com/2020/03/23/8TSxPA.jpg"></p>
<p>　　除此以外，还有一些频度不是很高的功能或是并不是功能性的，只是某个软件独有的小功能，我并没列出来，比如 Microsoft To Do 的任务清单设置背景，Things 自成风格的动画效果，滴答清单的任务评论。不过前两个虽然看似是一个差异性的功能，但实际使用却不是那么友好，Microsoft To Do 的任务清单设置背景，可设置的背景图片只有默认的几张，而且有的图片会比较突出某种风格，难以当成一个通用选择来用，而 things 的动画效果，初次使用时，特别是在移动端上着实有被惊艳到，但长时间使用下来，也发现一些问题，像比如在滴答清单，我们需要从一个任务的详细描述切换查看另一个任务的详细描述，我们只需要点击一下，即可完成切换。但在 things 上，如果你展开了一个任务，首先要在展开任务以外的区域点击一下收起，然后在另一个任务上双击才可暂开。对于习惯每天早上打开电脑都会过一遍手头上所有任务及及其细节的我来说，实在有点疲惫。<br>　　当然除了以上三种工具市面上可供选择的软件也有很多，包括苹果自家的提醒事项也是不错的选择，而我选择不用的原因是，他的任务清单不支持 emoji 命名，在这一点上有必要夸一下 Microsoft To Do，在选择新建 list 后，列表会有一个默认图标，但当你命名的开头有一个 emoji 时，默认的图标就会隐藏，在视觉上避免了繁复之感。还有另一个我也曾考虑过的工具是 notice，可以作为 GTD 工具但却不止可以做 GTD 工具，无限 block 和多模版是我看中它的两个原因，但网络差加载很慢以及需要花很多精力去搭建整个工作流也是劝退我的另外两个原因。
　　</p>
<h2 id="平常心对待-GTD-这件事"><a href="#平常心对待-GTD-这件事" class="headerlink" title="平常心对待 GTD 这件事"></a>平常心对待 GTD 这件事</h2><p>　　之前为了找到适合自己的 GTD 工具看了不少文章，在过程中发现，会谈论 GTD 的人也会谈论到诸如番茄工作法，康奈尔笔记法，极简主义，自我管理，减负，手账，成就，目标等之类的字眼，就好像每个人都在通过各种不同的方式为自己打造一个美好生活，高效工作的满分局面，期望可以从不断加速的生活旋涡逃离或可以加以控制，但在我看来这些不同的生活方式交织重叠在一块，又好像变成了另一种旋涡，漩涡的中心是焦虑。<br>　　我想我们不应该被那些看起来很好的方法和工具的表象所迷惑，工具只是工具，我们不仅要分清主次关系，也要明确主从关系。如果花在规划的时间远远超过实践的时间，就有点本末倒置了。希望我们可以平常心对待包括 GTD 以内的提高效率、提升自己这些事。 　　
　　</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>产品思考</tag>
        <tag>时间管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Git - Submodule 使用简单教程</title>
    <url>//git-submodule.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　最近在项目中使用了 <code>Git Submodule</code> 的功能，好处是如果是自己开发的封装库，比较方便调试，push 时可以同时上传项目和库的修改，别人通过主仓库地址下载工程的时候速度也会快上一些。<br>　　<code>Git Submodule</code> 的使用可以通过终端命令来操作（<a href="https://tnie.github.io/2018/04/02/git_submodule/">Git Submoudle 使用完整教程</a>），或者通过 <code>Git</code> 第三方可视化客户端直接操作。本文展示的是通过 <code>Git</code> 第三方客户端 Sourcetree 来实现这个功能的。
　　</p>
<h2 id="一、通过-Sourcetree-使用-Git-Submodule"><a href="#一、通过-Sourcetree-使用-Git-Submodule" class="headerlink" title="一、通过 Sourcetree 使用 Git Submodule"></a>一、通过 Sourcetree 使用 Git Submodule</h2><p>1.首先下载一个你想要添加 Git Submodule 功能的主仓库。<br>这里以我用来学习的仓库为例子<br><img data-src="https://s1.ax1x.com/2020/03/14/8MjX4S.jpg"><br>　　<br>2.在下载好的仓库左侧菜单栏，右键点击 SUMODULES，在弹出的菜单中选中“Add Sumodelues”<br><img data-src="https://s1.ax1x.com/2020/03/14/8MjON8.jpg"></p>
<p>3.在弹出的菜单中填写远程仓库地址，和本地仓库地址<br>这里我填的远程仓库地址是一个第三方库 AFNetworking，大家可以根据自己的实际需求填写自己私有仓库地址或者其他仓库地址。<br>需要注意的是，Git Submodule 的文件夹地址的路径最好是在主工程文件路径的子目录底下，比如：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">master path：~/User/xxx/主工程文件夹</span><br><span class="line">Submodule path：~/User/xxx/主工程文件夹/Submodule 文件夹</span><br></pre></td></tr></table></figure>
<p><img data-src="https://s1.ax1x.com/2020/03/14/8MjLAf.jpg"><br>点击 OK 就可以随意使用了。</p>
<p>后面如果需要 push&#x2F;pull Submodule 仓库，更新方式也和在 sourcetree 中正常使用其他工程的流程是一样的。</p>
<p>4.切换分支和节点<br>如果需要指定 Submodule 固定的版本或分支，也很简单。<br>双击左侧菜单 SUMODULES 下我们添加的子仓库，仍以上面 AFNetworking 为例子：<br><img data-src="https://s1.ax1x.com/2020/03/23/8TJuqK.jpg"><br>在弹出的窗口可以看到很多很多 Tag 和分支，按自己需求手动点击切换即可。</p>
<p>5.删除子模块<br><img data-src="https://s1.ax1x.com/2020/03/23/8TBwdI.jpg"><br>操作也很简单，右键点击左侧菜单 SUMODULES 下我们添加的子仓库，在弹出的菜单中选择“删除”，然后点击确认“即可”</p>
<p>Sourcetree 会帮我们完成剩下的事情：<br><img data-src="https://s1.ax1x.com/2020/03/23/8TBnsJ.jpg"></p>
<h2 id="二、其他说明"><a href="#二、其他说明" class="headerlink" title="二、其他说明"></a>二、其他说明</h2><ol>
<li>实际开发中建议子仓库权限除管理员和子仓库维护人员以外设置为 reporter 权限（即可以克隆代码，不能提交）。</li>
<li>当子仓库有更新时，需要通知主仓库底下所有开发人员手动更新。</li>
</ol>
<p>以下测试结果为上述结论提供依据：<br>1） 当子仓库为 reporter 权限的开发人员提交子仓库修改。其他开发人员会在主仓库中会收到子仓库的 commit 提交，但实际代码并无改变。<br>2） 当子仓库为 Developer 权限以上的开发人员提交代码更新时。其他开发人员会在主仓库收到子仓库的更新提醒，但需要手动 pull 到本地，代码才会发生变化。<br>3） 当有两个开发人员分别在子仓库中使用了不同分支或节点，并把使用的设置提交了修改。其他开发人员会在主仓库中会收到子仓库的 commit 提交，但实际代码并无改变。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Git</tag>
        <tag>Sourcetree</tag>
      </tags>
  </entry>
  <entry>
    <title>我不能留在这里爱你</title>
    <url>//i-can&#39;t-stay-here-to-love-you.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>每当我远离日常生活<br>就会被日常生活的场景感动<br>长椅上的老人他神色安详<br>两个骑单车的少年在树下相遇<br>停车说笑，相互点烟<br>恋人们手拉手穿过人行横道<br>那一刻的依恋是真心<br>每当我被这日常生活的场景感动<br>就忍不住要狠心逃开</p>
</blockquote>
<p>　　看电影《桃姐》，总是让我想起这首诗。<br>　　<br>　　电影里那些生活化的镜头和似曾相识的桥段，总让我想起和家中长辈相处的情形，在家庭关系里，我自觉自己是一个不通情达理和懂事妥帖的小孩，而电影勾起我的种种回忆，让我意识到我内心有一部分可能并没有我想象中的冷酷，这让我感到有点难为情。这种感觉，就像是以前在学校食堂吃午饭，奶奶来看我，在餐桌旁探着头，看我在吃什么，和我说话，叮嘱我要吃饱饭。虽然现在想起来觉得怀念和难过，但当时我只是难为情，想奶奶快点回家。<br>　　<br>　　“每当我被这日常生活的场景感动，就忍不住要狠心逃开”。这是我看《桃姐》大部分时候的感受。一部分是因为剧情的演绎，另一部分是因为共情，共谁的情？桃姐刚入老人院的时候，因为被说名字听起来像佣人，桃姐生气说得罪你啦，要这样骂我，那时候共的是桃姐的情，桃姐过世，坚叔借钱买花，到了灵堂犹豫踌躇，那时候共的是坚叔的情，罗杰妈妈探望桃姐，给桃姐钱，两人互相推搡，那时候共的是亲近又有分寸感的两个人之间氛围的情，还有老人院的老头用粤语念诗，一字一句，相见时难别亦难，东风无力百花残。春蚕到死丝方尽，蜡炬成灰泪始干。晓镜但愁云鬓改，夜吟应觉月光寒。蓬山此去无多路，青鸟殷勤为探看。那时候共的是李商隐的情，也可以说是导演的情，但这个倒没让我难为情的想逃开，只觉得怅然若失。<br>　　<br>　　虽然前面抒了很多严肃又沉重的情，看起来，《桃姐》这部电影又像是讲一个大爱无疆，高山仰止这类的故事，但其实电影整体的情绪并不激烈和沉重，相反，它平淡朴实的像一篇流水账日记，虽然也有很多家长里短的龌蹉部分藏在电影的角落头，但整体让人感受到的还是温暖积极的，很适合挑一个无所事事的晚上，准备点瓜子，一个人安静的看。<br>　　<br>　　从整体出来，里面演员的表现也非常可圈可点，不提那些老戏骨的表现，就连演什么都像演自己的刘德华因为角色是电影监制，也算娱乐圈里的人，所以有时候有点端着，也不算违和。而让人惊喜的是，电影里面出现了很多很久没见过但在以前几乎家喻户晓的老明星，其中最让我影响深刻的就是罗兰了——我也是刚搜索她才知道名字，可能大家都很陌生，但是提起她演过的角色可能都有印象，比如陈浩民版的《封神榜》里李靖他妈，古天乐版《神雕侠侣》里公孙绿萼他妈以及等等慈眉善目和面目可憎的老太太。真是相当遥远的记忆了。另一个觉得很有意思的是黄秋生演的养老院院长，不知道扮演通过巧立名目对老人们收取各种不合理费用的角色时，他是否有预料到几年后，他也会扮演一个下肢瘫痪，单身寡居，脾气暴躁的老头？演员们因为年龄增长，而不可避免的只能出演中老年角色，再过几年是否也会看到华仔颤颤巍巍的在大屏幕上出现。想到这，忽觉时光流逝飞快，世事也不过都是面貌不同的轮回。<br>　　<br>　　可能再过几年，迎头撞上这样的日常，我不会再想逃开，而是想着尽可能的和它多呆一会。
　　</p>
]]></content>
      <categories>
        <category>旁白</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>电影</tag>
        <tag>观后感</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS - 初探符号断点调试</title>
    <url>//ios-preliminary-study-of-symbolic-breakpoints.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><em>在调试一个项目中包含库工程的工程时发现，平常在代码视图左侧点击添加断点调试，忽然发现不起作用了，然后尝试使用了一些不同的方法去解决，虽然最后仍然是通过开关机，重启 Xcode 的方式解决问题的，但那些尝试也在过程中期起到了排除问题的作用，记录一下其中用到的符号断点的用法。</em></p>
<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>Symbolic Breakpoint 为符号断点，可以针对某一个方法(函数)设置断点并暂停执行；有时候，我们并不清楚会在什么情况下调用某一个函数，那我们可以通过符号断点来跟踪获取调用该函数的程序堆栈。</p>
<h2 id="二、使用方法"><a href="#二、使用方法" class="headerlink" title="二、使用方法"></a>二、使用方法</h2><p>例：跟踪应用程序的启动函数。<br>第一步：左侧导航视图切换到“Breakpoint Navigator”<br><img data-src="https://s2.ax1x.com/2020/02/29/3s1QNF.jpg"></p>
<p>第二步：点击左侧导航栏左下角的“+”<br><img data-src="https://s2.ax1x.com/2020/02/29/3s139J.jpg"></p>
<p>第三步：在弹出的菜单中选择“Add Symbolic Breakpoint”<br><img data-src="https://s2.ax1x.com/2020/02/29/3s1MAU.jpg"></p>
<p>第四步：在“Symbol”右侧的输入框中输入要设置断点的函数(方法)<br><img data-src="https://s2.ax1x.com/2020/02/29/3s1lh4.jpg"></p>
<p>第五步：本例中设置断点在 App 应用的启动函数<br><img data-src="https://s2.ax1x.com/2020/02/29/3s1nBV.jpg"></p>
<p>第六步：模拟器运行 APP，断点停留在了启动函数“- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions”<br><img data-src="https://s2.ax1x.com/2020/02/29/3s1839.jpg"></p>
<p>3、符号断点输入框中各字段说明<br><strong>Symbol</strong>：填入你想设置断点的方法<br>（例如：-[NSException raise]，-号是实例方法，+号是类方法）。<br>你也可以输入：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">objc_exception_throw malloc_error_break <span class="comment">//跟踪调试释放了2次的对象</span></span><br><span class="line">-[<span class="built_in">NSObject</span> doesNotRecognizeSelector:] <span class="comment">//向某个object发送没有的方法</span></span><br></pre></td></tr></table></figure>

<p><strong>Module</strong>：填入要设置断点的方法或函数是否在位于dylib中，默认不填。</p>
<p><strong>Conditon</strong>：填入条件，例如：(BOOL)[item isEqualToString:@“test”]前面的（BOOL）是必须的。否则 console 会提示类型不符号，导致条件不能生效。意思是 <code>item（NSString）</code> 是 <code>test</code> 时停下。<br>同样可以写一下判断的方法比如用来确定类类型的 <code>isKindOfClass</code>:，确定对象在继承体系中的位置的 <code>isMemberOfClass</code>:，判断一个对象是否能接收某个特定消息的 <code>respondsToSelector:，判断一个对象是否遵循某个协议的 </code>conformsToProtocol<code>:，以及提供方法实现地址的 </code>methodForSelector&#96;:。</p>
<p><strong>Ignore</strong>：忽略几次。</p>
<p><strong>Action</strong>：可在程序断点执行后增加额外动作（Applescript，捕捉动画帧速，调试器命令（lldb），输入 log 记录，终端命令（shell）,播放声音）<br>例如：Debugger Commond 中可填入<br>po item 输出 item 变量的值<br>bt 表示输出方法调用堆栈信息</p>
<p>4、示例<br>查找项目中哪些地方对 <code>UICollectionView</code> 的背景色进行了设置。<br>注 <code>UICollectionView</code> 的设置背景色方法继续了 <code>UIView</code> 的 <code>setBackgroundColor</code>，故使用以下设置：<br><img data-src="https://s2.ax1x.com/2020/02/29/3s1GcR.jpg"></p>
<p>设置成功后断点下方显示了要跟踪的方法：<br><img data-src="https://s2.ax1x.com/2020/02/29/3s1Jj1.jpg"></p>
<p>运行调试，断点停留在方法的调用位置：<br><img data-src="https://s2.ax1x.com/2020/02/29/3s1cut.jpg"></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>iOS</tag>
        <tag>OC</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>黑帮老大和荔枝</title>
    <url>//gangster-and-litchi.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　疫情蔓延的春天，待在家看了几本书，有一本是马家辉先生写的《龙头凤尾》，讲的是一个在动荡年代里一个香港黑帮龙头“南爷”的故事，和传统的江湖故事，历史演义不同，这本书没有在争斗和时局多费笔墨，只是把这些当做推动人物活动的一个必要的背景，更多的是关注南爷和他同性恋人的纠缠和他本身的心理活动。</p>
<p>　　起初这本书吸引我，是因为开头便知故事主角陆北才会当上后面的“南爷”，所以对南爷何以成为南爷，故事后续发展可能藏着的风波诡谲，存着微微雀跃的期待，有着像《新世界》的电影剧情的想象。</p>
<p>　　看到一半，故事虽然没像我想象的一样发展，但江湖毕竟是江湖，波涛翻滚前零星半点的浪花——陆北才当兵无意窥知兄弟的秘密差点被开瓤送命；投奔弟弟入了洪门做马仔；在凌晨雾气弥漫的时候将替死鬼沉湖；开创黄赌毒代金券玩法，便足以满足乏味时期的我的猎奇心情。而到后半部，看到南爷对鬼佬张迪臣也不只是因为贪昧肉体欢娱，而是把他放在自己心里反复想念，到张迪臣入狱，陆北才为他奔走操心，得知张迪臣可能死亡的消息，他接近崩溃，又引发了我对他们所发生的一切所持态度的思考。</p>
<p>　　我对同性恋群体没有什么偏见，觉得就像有人喜欢下象棋，有人喜欢打篮球，都是兴趣爱好，只是表现不同，而无分高低。但陆北才的性向偏好并非来自先天，而是源于幼年他叔父对他的侵犯，所以在后来的故事中，在结婚后的逃避，离开家乡去当兵，然后去了香港爱上鬼佬等等这一切的事情，在心理上，我都把他当做一个病人。爱上鬼佬男人，只是旧病复发，可以原谅，但让我理解却很难。哪怕书里有很多内心独白都表现出他对自身状态早就早早接受，我也偏偏不替主人公接受，这种顽固的来源，一部分可能来自于身为直男的体面，对这种强暴式人生走向坚决 say no，另一部分大概因为看见了前因后果，所以对每个雄性个体存在着这部分的可能性——即是可以因为后天改变的，感到抗拒，甚至是害怕。另一方面也忽然理解那些旧式社会里一些男同性恋，长大成人后反而会表现的比普通男人更有男子气概，比普通人更加敌视同性恋者，我想这也是因为恐惧，所不同的是，我恐惧的是这事在我身上发生，而他们的恐惧是这事被人发现。</p>
<p>　　想通这些，书最后一部分反而能用更客观的态度去看了。除了主体故事，有几个配角也很出彩，比如女同妓女仙蒂，她大概是乱世中唯一一个可以理解南爷的人了，比如南爷手下，得知南爷性向，回家大哭，和老婆大打一架。但除此以外，许多人物脸孔过于扁平，故事结局安排的也显得有些刻意。<br>　　看完在豆瓣看到一个评论：</p>
<blockquote>
<p>　　心疼南爷，像一颗荔枝，剥开外表的一层硬壳，里头竟是一汪水，水里头包裹着的核儿，却是死心塌地的苦和涩。</p>
</blockquote>
<p>　　我想写这句话的人一定很温柔——搞不好也是个 gay。</p>
]]></content>
      <categories>
        <category>旁白</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>读后感</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS - 私有仓库通过 CocoaPods 引入工程</title>
    <url>//ios-private-repository-introduces-engineering-through-cocoapods.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Spec-Repo-配置仓库-的概念"><a href="#Spec-Repo-配置仓库-的概念" class="headerlink" title="Spec Repo(配置仓库)的概念"></a>Spec Repo(配置仓库)的概念</h2><p>　　<code>CocoaPods</code> 对于一名 <code>iOS</code> 开发来说再熟悉不过了，它的工作原理就是在 <code>GitHub</code> 上面有个 <code>Spec Repo</code>，它里面包括成千上万的后缀名为 <code>.podspec</code> 的文件。我们在项目中集成第三方库(如 <code>SDWebImage</code> )的时候其实就是通过 <code>CocoaPods</code>的 <code>Spec Repo</code> 去找到我们需要的开源项目的 <code>.podspec</code> 文件，然后在 <code>.podspec</code> 文件中有具体的源码地址(放具体代码的地方)，根据这个地址去下载代码。</p>
<p>　　按照上面 <code>Spec Repo</code> 的理解，我们如果能自己创建一个类似 <code>CocoaPods</code> 的 <code>Spec Repo</code>，然后把我们私有的公共组件的 <code>.podspec</code> 文件放在里面，然后集成的时候让 <code>CocoaPods</code> 帮我们集成那我们就能达到目的，就可以建立私有pod库了。</p>
<p>　　一般项目经理都会把代码仓库和配置仓库都建好，这时候我们只需要把 <code>Spec Repo</code> 加到本地就行了。(注意：需要管理员将你的账号加到里边，有访问权限并且有修改权限)。
 </p>
<h2 id="一、添加’本地的私有仓库’-Spec-Repo-文件"><a href="#一、添加’本地的私有仓库’-Spec-Repo-文件" class="headerlink" title="一、添加’本地的私有仓库’(Spec Repo)文件"></a>一、添加’本地的私有仓库’(Spec Repo)文件</h2><p>1、使用下面的命令就可以在本地生成配置文件的仓库,建议这个本地的名字也和远程的一致,这样便于区分和后期的维护.<br>“baseSpecs”是你们团队远端创建的配置文件仓库的名字,后面是配置文件仓库远端的地址 .<br>注意此时不需要 <code>cd</code> 进入任何目录,从默认位置输入这个命令,即在点击终端快捷方式打开的状态下直接输入下面的命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pod repo add baseSpecs http://***/***/specs.git</span><br></pre></td></tr></table></figure>
<p>2、查看是否添加成功(查看本地的所有repo)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pod repo list</span><br></pre></td></tr></table></figure>
<p>或者打开本地配置仓库管理文件夹进行查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open ~/.cocoapods/repos</span><br></pre></td></tr></table></figure>
<p>如果能看到自己团队的 repo(本地的私有仓库)，就 OK 了。注意：这个操作只需要执行一次就可以了，下次再打新的 pod 库的时候就不需要再执行了。</p>
<h2 id="二、创建-pods-项目工程文件"><a href="#二、创建-pods-项目工程文件" class="headerlink" title="二、创建 pods 项目工程文件"></a>二、创建 pods 项目工程文件</h2><p>1、创建项目和 <code>.podspec</code> 文件</p>
<p>方式1、可以利用 <code>pod</code> 提供的命令，直接创建一个 <code>pod</code> 库的标准模板。这个很方便，可以直接创建一个工程，可以省去很多操作。命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pod lib create UIPoolSingleImage</span><br></pre></td></tr></table></figure>
<p>方式2、自己在项目根目录创建 <code>podspec</code> 文件。该方式比较麻烦，需要自己创建项目。</p>
<p>2、编写 <code>.podspec</code> 文件。根据自己的 <code>pod</code> 库更改相关内容，文件内容大概是这样的：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="comment">//特别说明，里面的注释是博主为了大家知道什么意思加的，实际使用时一定要去掉</span></span><br><span class="line">Pod::Spec.<span class="keyword">new</span> <span class="keyword">do</span> |s|</span><br><span class="line"><span class="comment">//文件名</span></span><br><span class="line">s.name = <span class="string">&#x27;UIPoolSingleImage&#x27;</span></span><br><span class="line"><span class="comment">//版本</span></span><br><span class="line">s.version = <span class="string">&#x27;0.1.0&#x27;</span></span><br><span class="line"><span class="comment">//描述信息</span></span><br><span class="line">s.summary = <span class="string">&#x27;A short description of UIPoolSingleImage.&#x27;</span></span><br><span class="line"><span class="comment">//这里的主页自己随便写</span></span><br><span class="line">s.homepage = <span class="string">&#x27;https://github.com/623099552@qq.com/UIPoolSingleImage&#x27;</span> </span><br><span class="line"><span class="comment">//作者</span></span><br><span class="line">s.authors = &#123; <span class="string">&#x27;623099552@qq.com&#x27;</span> =&gt; <span class="string">&#x27;623099552@qq.com&#x27;</span> &#125;</span><br><span class="line"><span class="comment">//资源路径</span></span><br><span class="line">s.source = &#123; :<span class="function"><span class="params">git</span> =&gt;</span> <span class="string">&#x27;http://***/***/uipoolsingleimage.git&#x27;</span>, :<span class="function"><span class="params">tag</span> =&gt;</span> s.version.to_s &#125;</span><br><span class="line"><span class="comment">//ARC模式</span></span><br><span class="line">s.requires_arc = <span class="literal">true</span></span><br><span class="line"><span class="comment">//license，一般我们用MIT</span></span><br><span class="line">s.license = <span class="string">&#x27;MIT&#x27;</span></span><br><span class="line"><span class="comment">//允许的最低系统使用版本</span></span><br><span class="line">s.ios.deployment_target = <span class="string">&#x27;8.0&#x27;</span></span><br><span class="line"><span class="comment">//库文件路径，这个路径需要和你提供的库文件的目录相对应，否则会报错</span></span><br><span class="line">s.source_files = <span class="string">&#x27;UIPoolSingleImage/Classes/*&#x27;</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h2 id="三、创建自己的-pods-公共组件库项目"><a href="#三、创建自己的-pods-公共组件库项目" class="headerlink" title="三、创建自己的 pods 公共组件库项目"></a>三、创建自己的 pods 公共组件库项目</h2><p>1、在可以创建私有库的地方创建一个 <code>code repository</code>(代码仓库), 也就是存放要打的 <code>pod</code> 库中的代码文件。这里我使用的是 <code>gitlab</code>。</p>
<p> 点击右上角的加号按钮,创建代码仓库名为 <code>UIPoolSingleImage</code><br><img data-src="https://s2.ax1x.com/2020/02/15/1xiKSO.jpg" alt="2018101510425055"></p>
<p>2.克隆 <code>code repository</code>(代码仓库)到本地，并将上面创建好的私有库代码文件上传到 <code>code repository</code>(代码仓库)中。注意：代码上传之后时候需要打一个 <code>tag</code>，并且每次更新 <code>tag</code> 都要和 <code>.podspec</code> 文件中的 <code>tag</code> 对应。</p>
<h2 id="四、在命令行验证-podspec-文件是否有效"><a href="#四、在命令行验证-podspec-文件是否有效" class="headerlink" title="四、在命令行验证 .podspec 文件是否有效"></a>四、在命令行验证 <code>.podspec</code> 文件是否有效</h2><p>注意：<code>--allow-warnings</code> :表示忽略警告。 <code>--verbose</code>：表示会输出详细的debug信息。</p>
<p> 1、本地校验：pod lib lint UIPoolSingleImage.podspec –allow-warnings<br> 2、线上校验：pod spec lint UIPoolSingleImage.podspec –allow-warnings<br>注意：如果你制作的pod库，会依赖spec repository(配置文件仓库)中其他的私有仓库，则需要加上 –use-libraries。并且将spec repository 的源加上。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pod spec lint  UIPoolSingleImage.podspec --sources=<span class="string">&#x27;http://***/***/specs.git&#x27;</span>,<span class="string">&#x27;https://github.com/CocoaPods/Specs.git&#x27;</span> --use-libraries</span><br></pre></td></tr></table></figure>
<p>如果出现 <code>passed validating</code> 则表示 <code>spec</code> 文件验证通过了<br><img data-src="https://s2.ax1x.com/2020/02/15/1ximY6.jpg"></p>
<h2 id="五、将-podspec配置文件push到远端专门存储配置文件的仓库中"><a href="#五、将-podspec配置文件push到远端专门存储配置文件的仓库中" class="headerlink" title="五、将.podspec配置文件push到远端专门存储配置文件的仓库中"></a>五、将.podspec配置文件push到远端专门存储配置文件的仓库中</h2><p>1、将配置文件 push 到远端专门存储配置文件的仓库中 ,本地的也会同步更新<br>此时需要 <code>cd</code> 进入本地的 <code>.podspec</code> 所在的路径(否则会找不到 <code>podspe</code> c文件) <br>然后使用下面的命令即可，<code>baseSpecs</code> 是你创建的 <code>spec repository</code> 的名字,后面是你本地创建的 <code>.podspec</code> 文件</p>
<p>注意：如果你制作的 <code>pod</code> 库，会依赖 <code>spec repository</code>(配置文件仓库)中其他的私有仓库，则需要加上 <code>--use-libraries</code>。</p>
<p>注意：如果你在手动验证 <code>Pod</code> 时使用了 <code>--use-libraries </code>或 <code>--allow-warnings</code> 等修饰符，那么发布的时候也应该使用相同的字段修饰，否则可能会报错。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pod repo push baseSpecs UIPoolSingleImage.podspec --allow-warnings --use-libraries --verbose</span><br></pre></td></tr></table></figure>

<p>2、出现下面信息,则代表成功<br><img data-src="https://s2.ax1x.com/2020/02/15/1xiMlD.jpg"><br>或者查询本地私有 <code>spec</code> 管理文件夹,如果看到了<code>UIPoolSingleImage</code> 则代表成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open ~/.cocoapods/repos</span><br></pre></td></tr></table></figure>

<p>3、可以在远端配置文件仓库中看到这个文件，如下：<br><img data-src="https://s2.ax1x.com/2020/02/15/1xinfK.jpg"></p>
<p>到此，利用 <code>Cocoapods</code> 打私有的 <code>pod</code> 库就完成了。接下来，在项目中就可以直接引入私有库了。 </p>
<p>注意：引用私有库的时候，需要将 <code>Spec Repo</code> 源加到 <code>Profile</code> 文件中，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="string">&quot;https://github.com/CocoaPods/Specs.git&quot;</span> <span class="comment">#cocoapods的</span></span><br><span class="line"><span class="built_in">source</span> <span class="string">&quot;http://***/***/specs.git&quot;</span> <span class="comment">#私有的</span></span><br><span class="line"> </span><br><span class="line">pod <span class="string">&#x27;UIPoolSingleImage&#x27;</span>, <span class="string">&#x27;0.1.0&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>更新</strong>：下次更新 <code>pod</code> 库的时候，在 <code>sourceTree</code> 需要打 <code>tag</code> ，比如从 0.1.0 升级到 0.2.0，要先将代码推送到远端，然后再打 <code>tag</code>，顺序不能反。而且打的 <code>tag</code> 要和 <code>.podspec</code> 文件中的 <code>tag</code> 要对应。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>iOS</tag>
        <tag>OC</tag>
        <tag>CocoaPods</tag>
      </tags>
  </entry>
  <entry>
    <title>林中落日</title>
    <url>//sun-sleeping-in-the-forest.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><p>梦见一剑劈开了太阳，蛋黄浸透大半个银河系。我从岸上落下，在蛋液里浮沉，你在高处梨花带雨，你快上来，我不吃辣椒炒蛋了，快上来。太阳已经无可救药了，我想把剩下的星球都送给你。 </p>
</li>
<li><p>梦见和北野武决斗，各有一名帮手在旁边掠阵。我和北野武持剑相对，一剑未出，我在北野武强大的气势下，不断后退，后退。另一边，他的帮手迟钝，只做防御，我的帮手灵活，在进攻的间隙，还能在北野武身上留下伤口。眼见我在稳定的后退中，即将取胜。北野武忽然大喝，我扑通一声掉入河面。原来我早已被逼退至岸边。</p>
</li>
<li><p>梦见住在一个位于大厦顶层的陌生公寓，公寓往外望有很多奇形怪状的建筑，有照相机形的，有裸体女人形的。<br>每天都有很多人从我房间经过，借道下楼，一开始还有点生气，但看到其他楼层也一样情况，就释然了。<br>后来大厦发生了杀人事件，一位漂亮的女士在她家里被杀，警察们以房间每日人流量太多，不予立案。<br>画面一转，看见我一身侦探打扮和凶手坐在他家的床上谈话，床下躺着那具漂亮女尸。后来不知道说到了什么，房间的气氛变得有点忧郁。我们四个都很难过。<br>我在这种难过中提前醒来。</p>
</li>
<li><p>梦见坐飞船到了外太空，发现一段在陨石碎片生长的走廊，日式风格，玄关处飘落很多纸片，捏中一张，立马看见远山炊烟，贞子伽椰子恐怖片里的各种子林立在田野。村里喜欢抱着猫上树的老太太说纸片上有字，我没看见。旁边窜出一个身患白化病的和尚，大声喝咒太上老君急急如律令，在我们两手上各划拉一刀，贴一块。上面写，九州怪谈，今日奇人奇事。</p>
</li>
<li><p>梦见去了德云社看李小龙讲相声，梳朝天辫，包袱听不太真切，台下一阵突兀响亮的喝彩，李小龙歪着头露出唐山大兄里得意的笑。</p>
</li>
<li><p>梦见脑袋里有个录音机，循环播放着四首记不起名字的老歌，最近播到第三首总是卡带引起的头疼，去看医生，开处方药，两盒周杰伦的专辑，早晚服食 ​​​​</p>
</li>
<li><p>梦见去了喜欢的女孩的卧室，天花板倒挂着两把打开的纸伞，伞面上龙飞凤舞的挂着几行毛笔字，一把伞上是，天生我材必有用，千金散去还复来。另一把伞上是，不许欺负小女孩。 ​​​​</p>
</li>
<li><p>梦见策划了一个展，展出有开发到一半但已然荒废的大厦，一只袖子没织的毛衣，加载着没通关游戏的游戏机，没寄出的信，树和他上面的风筝，被黄色警戒条围起来的女士讲述着一位先生追她追到一半忽然了无音讯的故事，会生产人们谈话回声的空旷房间，展会还没到尽头的位置挂着一块指示牌：由于本次展会的多个展品，在正式展出之前失去了适合展出的状态，请大家原路返回，由我们工作人员退还部分票价。</p>
</li>
<li><p>我老远就看见她了。<br>她松开挎着的男人手臂，朝我走来。<br>打完招呼，我插着裤兜，踢马路上的石子，头也不抬问她：“怎么和他在一块了？”<br>“其实他是个很有意思的人。”她笑了笑，“我原来也挺瞧不上他的，也是后来相处了一阵才发现的。”<br>我抬头看了看不远处的那个男人，察觉到我在看他，朝我憨厚的笑笑，脸上依稀还有些我记忆中的少年时代的样子，我点了点头，脑子里想起来的全是以前瞧不起他的印象。<br>“这几年都在干嘛啊，一直都不联系，还以为你消失了。要不要待会一起吃个饭，反正都是认识的，就在附近，刚好我知道有个馆子还不错，是你喜欢的口味……”<br>她一直滔滔不绝，我闷着头只顾踢路上的石子，没说话。最后她又问了一遍要不要一起吃饭，没办法，我抬头和她说，不了，待会还有点事，最近都好忙，而且这几年我的口味也都变了。<br>后来，我就醒了。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>扯谈</tag>
        <tag>梦</tag>
      </tags>
  </entry>
  <entry>
    <title>推理小说家煲的鸡汤</title>
    <url>//chicken-soup-from-inference-writer.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　去年部门抽奖抽中一本《解忧杂货铺》，因为在那之前就已经看过这本书了，所以后来也就没有反抗的，让同事抢走归了她。到年底忽然想起这本书，索性就提笔写写。<br>　　《解忧杂货铺》讲的是几个小偷闯进了一个废弃的杂货铺，通过一个牛奶箱和不同年代的人通信，给与回应，不断解决不同人的问题，到最后也找到自己人生的出路。<br>　　整本书由几个不同的故事串联而成，简单易懂，不同于东野圭吾其他的推理小说，在结局的时候或者在过程中，推理有答案或者答案有了反转。甚至唯一一点略有神秘色彩的事件——信箱的信会穿越时空，也在事件出现之后的一两页内容里得到了答案。纵观全文，值得大书特书的内容有不少，但对我来说，那些值得一提的东西，温暖，感动，悔过，坚持自己等等这些书里的特质，都有些乏善可陈。<br>　　产生这样的心情当然也不是因为书写的不够好，书还可以，大概能打三星半。但抱着吃川味火锅店的心情，点菜的时候发现只有清淡偏甜的粤菜可点。因为结果低于期待，难免有所抱怨。<br>　　当然如果因为自己的期待就不允许火锅店的菜谱上只有粤菜可点，这种态度是不够端正的，虽然我不喜欢，但我也捍卫火锅店做粤菜的自由，而且也不是挂羊头卖狗肉，《解忧杂货铺》也没打着我是推理小说的招牌出来接活，所以不妨把它当做是作者的一种尝试。<br>　　梳理推理小说发展过程，从古典推理到侦探小说，到日本新本格出现，松本清张结合时事始创社会派推理小说，最后宫部美雪、伊坂幸太郎、绫辻行人、东野圭吾等作家让日本推理小说百花齐放。到这，我不禁有个疑问，为什么东野圭吾可以在同时代的同行作家中脱颖而出，让路人也有个好像在哪听过的印象？东野圭吾虽然也写过侦探破案的本格小说，但他真正让人印象深刻的作品，比如《白夜行》《嫌疑犯X的献身》，这些书无一不以事件中的人物纠葛为主色调，辅以推理破案，结尾真相大白，人物冲突达到最高峰。这些人事纠葛，日式风格的说法是，羁绊。因为羁绊，使得东野圭吾讲的故事多了些人情味，当然部分给人眼前一亮的推理也是一个地基式的存在，另一个方面东野圭吾小说被大量改编成了影视剧，吸引了不少推理小说圈外的路人粉，这也是东野圭吾火起来的一个原因，儿比起其他推理、侦探小说衍生的影视剧，东野圭吾书里在上述中提到的人情味所带来的晚间八点档狗血剧的氛围，冲淡了推理小说迷们和普通观众们之间的壁垒，像迪士尼动画片大人可以看到成年人的元素，小孩可以看到小孩子的元素，大家各取所需，皆大欢喜。<br>　　说完东野圭吾小说的整体风格，我们再来看这本书，比起他之前的那些作品——《黑笑小说》之类的不在对比范围，我们可以看到，《解忧杂货铺》推理味和人情味的配比，前者少，近乎于无，后者晚间八点档的氛围则被推到前作们所未有的地步。这种改变对于推理小说迷们来说是接受困难的，甚至是抵触：没想到东野圭吾你个浓眉大眼的家伙也写这种东西了？但对于东野圭吾、普通观众、普通读者，从现在结果来看，好处是远大于坏处的。而且这种改变从东野圭吾之前的作品中其实已经可以窥见端倪，对社会人性黑暗的长期注视，不可避免会产生两种态度，看透看破心灰意冷，或者一直乐观下去，对人之初性本善投赞成票。《解忧杂货铺》如果我们不把他粗暴的归类到是作者投读者们所好的一部纯商业作品——比如《阿弥陀佛么么哒》之流，而把他当做是作者在黑暗中得到的答案，似乎变得容易让人接受起来，甚至于作者本身跳出了推理小说家这个标签所带来的局限性，但这么看，似乎又给原本平庸的作品加了一个过分闪耀的光环。<br>　　无论如何，《解忧杂货铺》给我的观感仍然还是开头所提到的一样，三星半。至于东野圭吾先生之后的作品是在《解忧杂货铺》上一条道走到黑，还是又折回头写以前那类推理小说。我始终都会感谢他带来那么多优秀的作品。</p>
]]></content>
      <categories>
        <category>旁白</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>读后感</tag>
      </tags>
  </entry>
  <entry>
    <title>Android - 音频焦点学习</title>
    <url>//android-learning-audio-ocus.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在做蓝牙带屏音箱项目的时候，碰到一个问题，具体是在连接蓝牙音箱回连的时候，播放音乐会在手机端点击播放过一会就回被暂停。</p>
<p>调试了一下问题后，大概问题是这样的，一般情况下，我们在播放音乐时会请求系统音频焦点，然后在不播放的时候释放焦点。</p>
<p>我也是按照这种逻辑处理的，但和一般情况不同的是，我应用所在的底层系统是经过定制的，而在音频焦点的处理上，除了我上层应用会在蓝牙播放变化的时候请求焦点，底层的系统也会做同样的操作，这就造成了在两者来回请求的过程中，焦点丢失了。</p>
<p>这种问题还是比较少见的，所以记录一下，而最终的解决办法是让提供定制系统的硬件方解决。不过这里也记录一下对于音频焦点请求和监听的学习。</p>
<p>完整的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MusicService</span> <span class="keyword">extends</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> AudioManager mAm;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> isPlaymusic;</span><br><span class="line">   <span class="keyword">private</span> String url;</span><br><span class="line">   <span class="keyword">private</span> MediaPlayer mediaPlayer;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>.onCreate();</span><br><span class="line">       mAm = (AudioManager) getSystemService(AUDIO_SERVICE);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">(Intent intent, <span class="type">int</span> startId)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (intent != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="type">Bundle</span> <span class="variable">bundle</span> <span class="operator">=</span> intent.getExtras();</span><br><span class="line">           <span class="keyword">if</span> (bundle != <span class="literal">null</span>) &#123;</span><br><span class="line">               isPlaymusic = bundle.getBoolean(<span class="string">&quot;isPlay&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">               url = bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">               <span class="keyword">if</span> (isPlaymusic)</span><br><span class="line">                   play();</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                   stop();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">OnAudioFocusChangeListener</span> <span class="variable">afChangeListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OnAudioFocusChangeListener</span>() &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAudioFocusChange</span><span class="params">(<span class="type">int</span> focusChange)</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (focusChange == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT) &#123;</span><br><span class="line">               <span class="comment">// Pause playback</span></span><br><span class="line">               pause();</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (focusChange == AudioManager.AUDIOFOCUS_GAIN) &#123;</span><br><span class="line">               <span class="comment">// Resume playback</span></span><br><span class="line">               resume();</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (focusChange == AudioManager.AUDIOFOCUS_LOSS) &#123;</span><br><span class="line">               <span class="comment">// mAm.unregisterMediaButtonEventReceiver(RemoteControlReceiver);</span></span><br><span class="line">               mAm.abandonAudioFocus(afChangeListener);</span><br><span class="line">               <span class="comment">// Stop playback</span></span><br><span class="line">               stop();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">requestFocus</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// Request audio focus for playback</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mAm.requestAudioFocus(afChangeListener,</span><br><span class="line">       <span class="comment">// Use the music stream.</span></span><br><span class="line">               AudioManager.STREAM_MUSIC,</span><br><span class="line">               <span class="comment">// Request permanent focus.</span></span><br><span class="line">               AudioManager.AUDIOFOCUS_GAIN);</span><br><span class="line">       <span class="keyword">return</span> result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resume</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (mediaPlayer != <span class="literal">null</span>) &#123;</span><br><span class="line">           mediaPlayer.start();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pause</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (mediaPlayer != <span class="literal">null</span> &amp;&amp; mediaPlayer.isPlaying()) &#123;</span><br><span class="line">           mediaPlayer.pause();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">OnCompletionListener</span> <span class="variable">completionListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OnCompletionListener</span>() &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCompletion</span><span class="params">(MediaPlayer player)</span> &#123;</span><br><span class="line">           <span class="keyword">if</span>(!player.isLooping())&#123;</span><br><span class="line">               mAm.abandonAudioFocus(afChangeListener);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (requestFocus()) &#123;</span><br><span class="line">           <span class="keyword">if</span> (mediaPlayer == <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   mediaPlayer = <span class="keyword">new</span> <span class="title class_">MediaPlayer</span>();</span><br><span class="line">                   mediaPlayer.setDataSource(url);</span><br><span class="line">                   mediaPlayer.prepare();</span><br><span class="line">                   mediaPlayer.setOnCompletionListener(completionListener);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (!mediaPlayer.isPlaying()) &#123;</span><br><span class="line">               mediaPlayer.start();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>.onDestroy();</span><br><span class="line">       <span class="keyword">if</span> (mediaPlayer != <span class="literal">null</span>)</span><br><span class="line">           mediaPlayer.release();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (mediaPlayer != <span class="literal">null</span>) &#123;</span><br><span class="line">           mediaPlayer.stop();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> IBinder <span class="title function_">onBind</span><span class="params">(Intent arg0)</span> &#123;</span><br><span class="line">       <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要解释一下的是，在 <code>onAudioFocusChange</code> 方法里的返回值代表了当前焦点变化的状态</p>
<table>
<thead>
<tr>
<th>常量</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>AUDIOFOCUS_GAIN</td>
<td>持有焦点</td>
</tr>
<tr>
<td>AUDIOFOCUS_LOSS</td>
<td>失去焦点</td>
</tr>
<tr>
<td>AUDIOFOCUS_LOSS_TRANSIENT</td>
<td>临时失去焦点</td>
</tr>
<tr>
<td>AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK</td>
<td>临时失去焦点，允许小声播放</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Android</tag>
        <tag>Audio Focus</tag>
      </tags>
  </entry>
  <entry>
    <title>Android - 动态改变 seekbar 滑块大小和其他</title>
    <url>//android-more-than-seekbar-slider-dynamic-change.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　在做项目下拉栏音量条拖动的时候，产品提了一个新需求，想拖动的时候让滑块选中时变大，未选中时就正常大小，这个需求如果在 iOS 项目，我会选择监听手势方法，监听按下和松开的时机，改变滑块的大小。在 Android 中我想应该也有类似的方法，但实际在网上搜索资料，发现问题简单，但找解决问题的方式非常困难，具体困难点在于，无法找到精确到“动态改变 seekbar 滑块大小”这个需求具体实现的文章，除了一方面很多文章来源自复制粘贴，另一部分在讲述 seekbar 的使用顺便提了一下选中和普通状态的样式改变，但这个方法的效果在新的版本里，不知道是不是从来就如此，还是接口变化导致不适用了。到最后我解决这个方法的姿势是：我想类似需求的实现出现最多的地方应该是在音乐播放器之类的项目，然后就在 GitHub 上搜索类似的工程，最后在 <a href="https://github.com/magic5650/Recoderapp">Recoderapp</a> 这个项目最新更新的节点中看到有关 seekbar 的描述，抱着试一试的心态，下了，看了，解决了。具体方法会和上面那个不适用的方法一起放在后文。<br>　　我想大部分开发者在搜索问题解决的时候都会倾向于直接看代码，所以我这里的长篇累牍显得有点不太必要，但是还是想提一下的就是，由查找不到问题解决方式引发的一些思考，类似于，大家应该多多少少有动态改变滑块大小的需求，但是网上为什么没有这么精确的回答，如果是因为简单，但哪怕再简单的问题，也会有处于新手期的开发者会觉得这是一个难题——比如我，这篇文章也是基于这个思考才写的，而另一个原因是想到最近大火的电商——拼多多，他之所以能在淘宝京东的围杀中杀出重围，主要做的一件事就是渠道下沉。而渠道下沉的变体其实就是集中解决一部分人的需求。最近下的两三个 App 也给我这种感觉，一个是播放白噪音的软件，一个是类似于番茄钟的软件，但和传统的 GTD 软件区别在于后者的记录是主要针对你在做某一项技能的学习时的记录，最后会统计单一技能所花费的时间。不知道这个例子能不能解释清楚，总的来说，另一个原因可以总结成，既然没有人写简单问题的讲解，那我就来做为开发者来做一个技术方面渠道下沉的尝试。
　　</p>
<h2 id="第一个方法：在-XML-文件配置-seekbar-不同状态"><a href="#第一个方法：在-XML-文件配置-seekbar-不同状态" class="headerlink" title="第一个方法：在 XML 文件配置 seekbar 不同状态"></a>第一个方法：在 XML 文件配置 seekbar 不同状态</h2><p>控件布局</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;SeekBar</span><br><span class="line">               android:id=<span class="string">&quot;@+id/sb_volume&quot;</span></span><br><span class="line">               android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">               android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">               android:layout_marginEnd=<span class="string">&quot;44dp&quot;</span></span><br><span class="line">               android:thumbOffset=<span class="string">&quot;5dp&quot;</span></span><br><span class="line">               android:minHeight=<span class="string">&quot;4dp&quot;</span></span><br><span class="line">               android:maxHeight=<span class="string">&quot;4dp&quot;</span></span><br><span class="line">               android:background=<span class="string">&quot;@null&quot;</span></span><br><span class="line">               android:progressDrawable=<span class="string">&quot;@drawable/seekbar_background_light_volueme&quot;</span></span><br><span class="line">               android:thumb=<span class="string">&quot;@drawable/seekbar_light_volume_shape&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>seekbar_background_light_volueme.xml 样式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;layer-list</span><br><span class="line">    xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class="line">    &lt;item&gt; ----对背景的控制，没有进度时</span><br><span class="line">        &lt;shape&gt;</span><br><span class="line">            &lt;corners android:radius=<span class="string">&quot;2dp&quot;</span> /&gt; --圆角</span><br><span class="line">            &lt;solid android:color=<span class="string">&quot;#33ffffff&quot;</span>/&gt; --颜色</span><br><span class="line">        &lt;/shape&gt;</span><br><span class="line">    &lt;/item&gt;</span><br><span class="line">    &lt;item&gt; --- 这个目前来说不知道什么用，也可以去掉这一部分</span><br><span class="line">        &lt;clip&gt;</span><br><span class="line">            &lt;shape&gt;</span><br><span class="line">                &lt;corners android:radius=<span class="string">&quot;2dp&quot;</span> /&gt;</span><br><span class="line">                &lt;solid android:color=<span class="string">&quot;#ffffff&quot;</span> /&gt;</span><br><span class="line">            &lt;/shape&gt;</span><br><span class="line">        &lt;/clip&gt;</span><br><span class="line">    &lt;/item&gt;</span><br><span class="line">    &lt;item&gt; --- 对进度条的控制</span><br><span class="line">        &lt;clip&gt;</span><br><span class="line">            &lt;shape&gt;</span><br><span class="line">                &lt;corners android:radius=<span class="string">&quot;2dp&quot;</span> /&gt; --圆角</span><br><span class="line">                &lt;solid android:color=<span class="string">&quot;#ccffffff&quot;</span> /&gt; --颜色</span><br><span class="line">            &lt;/shape&gt;</span><br><span class="line">        &lt;/clip&gt;</span><br><span class="line">    &lt;/item&gt;</span><br><span class="line">&lt;/layer-list&gt;</span><br></pre></td></tr></table></figure>
<p>seekbar_light_volume_shape.xml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;selector xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class="line">    &lt;item android:drawable=<span class="string">&quot;@drawable/seekbar_thumb_selected&quot;</span> android:state_enabled=<span class="string">&quot;true&quot;</span> android:state_pressed=<span class="string">&quot;true&quot;</span>/&gt; --按下</span><br><span class="line">    &lt;item android:drawable=<span class="string">&quot;@drawable/seekbar_thumb_selected&quot;</span> android:state_selected=<span class="string">&quot;true&quot;</span>/&gt; --选中</span><br><span class="line">    &lt;item android:drawable=<span class="string">&quot;@drawable/seekbar_thumb_selected&quot;</span> android:state_focused=<span class="string">&quot;true&quot;</span>/&gt; --获取焦点</span><br><span class="line">    &lt;item android:drawable=<span class="string">&quot;@drawable/seekbar_thumb_normal&quot;</span>/&gt; ---默认效果</span><br><span class="line">&lt;/selector&gt;</span><br></pre></td></tr></table></figure>

<p>seekbar_thumb_normal.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:shape</span>=<span class="string">&quot;rectangle&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:useLevel</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">size</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:height</span>=<span class="string">&quot;24px&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:width</span>=<span class="string">&quot;24px&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;12px&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">&quot;#ffffffff&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>seekbar_thumb_selected.xml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;shape xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:shape=<span class="string">&quot;rectangle&quot;</span></span><br><span class="line">    android:useLevel=<span class="string">&quot;false&quot;</span> &gt;</span><br><span class="line">    </span><br><span class="line">    &lt;size</span><br><span class="line">        android:height=<span class="string">&quot;30px&quot;</span></span><br><span class="line">        android:width=<span class="string">&quot;30px&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;corners android:radius=<span class="string">&quot;15px&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;solid android:color=<span class="string">&quot;#ffffffff&quot;</span>/&gt;</span><br><span class="line">&lt;/shape&gt;</span><br></pre></td></tr></table></figure>

<p>这个方法虽然也会在拖动的时候改变滑块的大小，但是会有两个问题，一个是滑块没有像预期的一样变成圆形的，而是变成椭圆，另一个是松开滑块时，不能变回来。</p>
<h2 id="第二个方法：在代码中监听手势回调"><a href="#第二个方法：在代码中监听手势回调" class="headerlink" title="第二个方法：在代码中监听手势回调"></a>第二个方法：在代码中监听手势回调</h2><p>需要注意的是这里使用是 <code>Kotlin</code> 语法，回调和设置 <code>xml</code> 配置文件可能和在 <code>java</code> 有所出入。另外文中的 <code>xml</code> 配置可以参考上一个方法中的配置。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 音量调节监听</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mOnVolumeSeekBarChangeListener = <span class="keyword">object</span> : SeekBar.OnSeekBarChangeListener &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onProgressChanged</span><span class="params">(seekBar: <span class="type">SeekBar</span>, progress: <span class="type">Int</span>, fromUser: <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">            mIsVolumeSlideing = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">if</span> (fromUser) &#123;</span><br><span class="line">                preSeekBarProgress = progress</span><br><span class="line"><span class="comment">//                mVoiceSeekBar?.setRightText(progress.toString())</span></span><br><span class="line">             <span class="keyword">val</span> mVoice=progress/<span class="number">15f</span>*<span class="number">100</span></span><br><span class="line">                mVolumeTextView?.setText(<span class="string">&quot;&quot;</span>+mVoice.roundToInt())</span><br><span class="line">                <span class="comment">// 0-100</span></span><br><span class="line">                <span class="keyword">val</span> volume = ((progress / seekBar.max.toFloat()) * ScreenLightAndVoiceUtil.getInstance().mediaMaxVolume).toInt()</span><br><span class="line">                ScreenLightAndVoiceUtil.getInstance().mediaVolume = progress</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (progress &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                mVolumeImageView?.setBackgroundResource(R.mipmap.statusbar_setup_toolbar_volume_low)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mVolumeImageView?.setBackgroundResource(R.mipmap.statusbar_setup_toolbar_volume_off)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStartTrackingTouch</span><span class="params">(seekBar: <span class="type">SeekBar</span>?)</span></span> &#123;</span><br><span class="line">            <span class="keyword">var</span> tumb_selected = ContextCompat.getDrawable(context, R.drawable.seekbar_thumb_selected)</span><br><span class="line">            sb_volume.setThumb(tumb_selected)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStopTrackingTouch</span><span class="params">(seekBar: <span class="type">SeekBar</span>?)</span></span> &#123;</span><br><span class="line">            <span class="comment">// todo</span></span><br><span class="line">            mIsVolumeSlideing = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> tumb_normal = ContextCompat.getDrawable(context, R.drawable.seekbar_thumb_normal)</span><br><span class="line">            sb_volume.setThumb(tumb_normal)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Android</tag>
        <tag>seekbar</tag>
      </tags>
  </entry>
  <entry>
    <title>运气不好的祥子的一生</title>
    <url>//xiangzi-and-his-misfortune.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　上上个礼拜把读了十几年的《骆驼祥子》读完了，说读十几年的原因是因为第一次看《骆驼祥子》大概是我初中，老师让买了一套书，课外看，目的是为了提高阅读理解能力和作文水平。但当时我觉得不喜欢看文学名著，喜欢看小说，觉得文学名著太过严肃，有一张拒人于千里之外的旧学堂老先生凶巴巴的脸，整套书一共十二本，看完的好像只有鲁迅先生的《朝花夕拾》和一两本收录短篇故事的书，而祥子，总是看到祥子朝气逢勃拉着车子在北平窜来窜去的光景，我就抽身走人了，抽身的原因很简单，对于北京的想象和里面人们生活方式，当时我有我一套自己的想象，书里写的和我想象相差很远，所以就走了。<br>　　而重新捡起来看的原因，也很简单，起初是个巧合，因为好久没看书，翻开 kindle 看，前几本分别是《傻瓜式投资》、《软技能》、《退步集》、《骆驼祥子》，里面有故事情节又适合打发时间的好像只有《骆驼祥子》。<br>　　《骆驼祥子》的故事很简单，概述起来大概是讲还是军阀混战年代的北平，一个初入社会，叫祥子的年轻车夫，在攒出属于自己车的过程中，遇到了种种不幸，梦想破灭，人格也随之破产，最后活成浑浑噩噩苟且生活的行尸走肉的故事。<br>　　故事虽然一直都是这个故事，但现在看和以前看的心境完全不一样，在社会上打了几个滚的我，再去看祥子在刚入社会时，给自己打的算盘和不算远大的抱负，对我来说不再有雾里看花的隔阂，更多的是觉得，如果抛开因为时代和环境而产生的，具体到像攒一辆自己的车的这种事，祥子的所思所感，放在所有时代，对比所有时代的年轻人，包括二十一世纪现在的我的所思所想，其实一般无二，初出茅庐不怕虎，被雨打风吹后犹疑怨怼愤懑，最后因为个人际遇不同，有人跳出来后被当做励志的榜样，有人没跳出来被当做“二十岁就死了，但八十岁才被埋葬”，茶余饭后被提起，供人唏嘘的段子。祥子，祥子可能不到八十岁就会被埋葬掉吧。<br>　　和朋友聊天提起看完了这本书，他说了一句人人都是祥子。他大概是想说每个人在经历社会上的摸爬滚打之后，都会变成一种模样，即浑浑噩噩的样子。祥子的结局，有一部分是时代的必然性，所以是普遍如此，还是特定事件，值得商榷。在那之后我们又提到了电影《小丑》。<img data-src="https://s2.ax1x.com/2019/11/17/MsYf8x.jpg"><br>　　《小丑》的剧情就不展开讲了，总之还不错，推荐没看过的朋友可以去看看。<br>　　想想电影里的亚瑟和祥子是否存在一定相似性？祥子心心念念的车，是亚瑟扮成小丑，给人们带来笑声的梦想，亚瑟和祥子都被他们所面临的处境所伤害，受伤之后，亚瑟选择向伤害自己的人开枪，而祥子，因为很难说有某个清晰的、可以用来复仇的目标，最后他只好用钝刀挥向自己内心。<br>　　深究祥子或者亚瑟，何以成为他们本身，我尝试思考了以下两个问题：在同时代的人中，我想拥有他们同样遭遇的人肯定很多，但为什么只要祥子和亚瑟被选中，可以拥有他们的名字？祥子和亚瑟的结局是否拥有某种必然性？<br>　　为什么只有祥子和亚瑟拥有名字，其他遭受不幸的人们都在历史里模糊成某个群体，是祥子或者小丑存在某种值得书写的闪光点吗？关于祥子的答案，我想是否定的，作为《骆驼祥子》这个故事的男主角，他不存在，或者说不可能存在某种特别，相反，正因为他和当时普通的底层劳苦群众一般无二，所以才可以被当做一个例子，与其深究他和劳苦群众有哪里不同，不如直接说他是劳苦群众的一个代表。而亚瑟，亚瑟不是被选中的，他是自己跳出了的，之所以这样说是因为，如果去掉小丑这个辨识度极强的符号，亚瑟可能在每个时代都很多见，受压迫到歇斯底里后陷入疯狂的变态杀人狂，或是因为本身存粹的恶导致的无差别杀人。如果只是因为带着小丑面具杀人而被人记住，这种说法不免有点牵强，而事实上，亚瑟也不仅仅只是因为带着小丑的脸杀人而被人记住，他之所以得以被高举，是因为他杀人在群体围观之下被赋予某种意义，第一次在地铁开枪杀人，对于亚瑟本身来说，是失手和恐惧的混合——事后在厕所的舞蹈虽然可以解释成，他潜意识里本身就想杀人。但无论如何，都和被公众解释成是城市底层边缘人对精英阶层的一次控诉相去甚远，而亚瑟完成自己的蜕变，成为小丑在电视台的演讲，或许有那种意思，但在亚瑟这边，这个演讲，可能是对小丑自我的建立，一段初初登场的自我介绍，是一个开始的标志。而在群众眼里，因为经过舆论酝酿发酵，意义可能远不止于此，在地铁凶案的小丑，在众说纷纭的情况下，登台枪杀了主持人，洋洋洒洒发布了一段正中他们下怀的演讲，这对小丑自发组成的信徒们来说，这是一个集结号，一段对近期发生的所有事的结束陈词，一种思想成熟的标志。<br>　　祥子和亚瑟的结局是否拥有某种必然性？正如前文所述，祥子作为一个代表，他是存在一种必然性的，不在城外被军阀抢走车，也可能因为其他原因失去自己的车，没有被虎妞欺骗被迫结婚，也会因为其他的事情受到类似委屈等等，而亚瑟呢，如果他妈妈小时候没有虐待他导致他得精神病，如果他的同事没有两面三刀，如果那个主持人没有看轻他的梦想，是不是事情就会不一样？但除了他妈虐待他导致他得精神病这点，其他事其实在社会上也都很普遍，而得精神病的妈妈虐待自己孩子导致她孩子也患上精神病的这种事，如果把范围扩大，不止哥谭，我想偶然性也不是很小。那是不是有结论，哪怕没有名叫亚瑟这个小丑出现，也可能会有名叫杰克，或者露西的小丑。不过无论是祥子和亚瑟，预设条件，推导事情结果本身存在一定的不靠谱，所以我们只能通过结果本身去下定义，因为祥子有很多个，而小丑亚瑟只有一个，所以祥子的结局是存在必然性的，而小丑的产生是偶然性更多一点。<br>　　和朋友争论调侃小丑的主持人到底有没有错的时候，因为觉得其实主持人只是把嘲讽当做一个工作，甚至可能不存在任何恶意，虽然嘲笑别人可能不对，但因为嘲笑而收到子弹就太过分了吧。但另一边站在小丑的立场上，遭受如此多的不公平，选择复仇也是一种不得已的理所当然。所以我当时的回答是，只能说大家都运气不好吧。这个回答多少有点含糊其辞的成分，想想最近很多事，因为每次转换立场都觉得可以理解对方，而选择一个模棱两可的态度，这种态度多少有一点犬儒，所以我又深刻的想了想，决定给祥子和亚瑟一个坚定但坚决不是为了表明态度而煲鸡汤的态度：<br>　　祥子和亚瑟不仅是因为不幸，更多的是不公平，因为自己的付出没有得到预期的回报，勤勤恳恳拉车的祥子没有攒到自己梦想的新车，希望带给别人欢乐的亚瑟发现从头到尾自己都没得到过善待。面对不幸，我们仍然可以在种种不幸中保持着早期祥子热忱的心态，和亚瑟在公交车上逗小孩子笑的善良的脸。但面对不公呢，祥子和亚瑟大概是两个错误示范，就此沉沦和过激报复。因为不公的表现有很多，也没有万金油的解决方式，这里只能给一些我的建议，面对小事的不公平，豁达点用“就当是一种修行”的心态一笑了之，不豁达就一句“*他妈”了之，面对大事的不公平，如果不能依靠现有的社会机构解决，也绝不要采取会被现有社会机构解决的方式解决。</p>
]]></content>
      <categories>
        <category>旁白</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>读后感</tag>
      </tags>
  </entry>
  <entry>
    <title>如何解决网站访问时弹出“您要访问的网站包含恶意软件”的页面</title>
    <url>//how-to-fix-warnings-about-unsafe-sites.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　前一阵子公司网站的访问出了一点问题，每次访问的时候都会弹出一个警告页面，类似于这种<img data-src="https://s2.ax1x.com/2019/11/07/MACQ0A.png"><br>　　由于之前也没碰过这种问题，只能简单粗暴的归纳出两个方向：<br>　　１.可能是域名原因<br>　　２.可能是服务器原因<br>　　后来问题已经解决的时候看网上分享的资料知道还有一种可能就是，网站本身没问题，之所以出现这个警告页面是因为被运营商 HTTP 或 DNS 劫持了。<br>　　这里刷一条给我们提供域名服务的服务商——<a href="http://now.cn/">时代互联</a>的差评，在解决这个问题的过程中，联系我们账号底下的客服和电话客服，大概联系了不下十次，都没能解决问题，其中有几次，不仅没能帮我解决问题，还用一种推卸责任和不耐烦的态度把我怼的差点憋不住气的跳脚。<br>　　不仅态度有问题，而且他们的工作人员对自己那块的业务好像也不太熟练。因为怀疑网站网站报警告问题，可能和域名服务商的服务可能存在某些问题，所以预期的解决方案中也有一项是迁移域名，迁移域名的话需要通过手机或者邮箱验证，而手机和邮箱这些信息，由于公司人员变动，需要修改。基于这点我问他们工作人员，在修改信息页面中的一个需要勾选的选项，“修改信息之后的 <strong>720</strong> 天内不能迁移域名”，和接我电话的工作人员再三确认，是不是必须勾选，不勾选会不会有问题，告知我可以不用勾选，并且确认不勾选不会造成什么问题。结果最后我确认修改信息的时候，发现那个选项不勾选竟然不能到下一步。。。<br>　　回归正题，当域名问题不能再域名服务商那边解决时，我开始尝试定位到底是域名还是服务器的问题，具体方式：<br>　　1.把我们的域名指向到另一个服务器，如果仍然报警告，那就是域名问题<br>　　2.用其他的域名指向当前服务器，如果仍然报警告，那就是服务器问题<br>　　测试结果出来后，基本可以定位是域名问题，然后让后台的同事帮了一下忙，安装了一个在腾讯云申请的免费 SSL 证书（这个好像也能解决上述所说的未发现的被劫持问题），但仍然无效，打电话给域名服务商，他说肯定是 SSL 证书不起作用或者是根本就没用，没办法，我只好追着皮球到了腾讯云客服人员那，幸运的是，大厂不愧为大厂，服务完全没有可比性，只是提交了怀疑 SSL 证书可能没生效的工单，对方就帮我检测了我的网站是否有异常，以及用不同浏览器测试，得出 QQ 浏览器访问正常，可能需要向谷歌站长平台提供申述。不过因为在此之前，我就在一个网站申述平台提了一个申述：<a href="https://www.stopbadware.org/">StopBadware</a>，因为申述通过但网站访问仍然异常。所以带着将信将疑的态度，又重新激活腾讯问题的工单，然后过了一个上午就接到腾讯云平台技术人员的电话，非常耐心的给我解释了他们所做的所有尝试，最后得出结果，只能去<a href="https://www.google.com/webmasters/tools/home?hl=zh-CN">谷歌站长平台</a>注册，申述试试看了。<br>　　在谷歌站长平台添加了网站之后，立马有个警告消息提醒我，我们公司的网站存在一些问题，不加思索，我反手就是一个申述，第二天收到邮件，有点出乎意料，竟然没有通过，仔细看邮件描述，推测问题可能出在我们的网站因为提供了很多安卓 apk 的下载，而有一部分 apk 之前在 Google 应用市场因为添加了<strong>有风险的广告 SDK 被下架了</strong>，然后谷歌站长平台也默认这些 apk 存在一定风险。再次提交申述之前，让安卓的同事提供了去除广告 SDK 的 apk 替换掉服务器里的文件，果然，第二天收到邮件，审核通过了。<br>　　<img data-src="https://s2.ax1x.com/2019/11/07/MAClTI.jpg"><br>　　这次网站申述的经历给我有两个体会，一个是，只要死磕到底，就一定能让周润发翻译出什么他妈的叫他妈的惊喜。另一个是互联网服务一定要选大厂，盘靓活好态度也呱呱叫。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>domain name</tag>
        <tag>Google Search Console</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS - 类、属性、方法、枚举等命名规则和注释规范</title>
    <url>//ios-naming-rules-and-annotation-specifications.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>iOS开发者规范:以苹果开发者中心规范(<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingBasics.html#//apple_ref/doc/uid/20001281-BBCHBFAH">Coding Guidelines for Cocoa</a>)为标准，添加部分规范。</p>
<blockquote>
<p>iOS 命名两大原则是:可读性高和防止命名冲突(通过加前缀来保证). Objective-C 的命名通常都比较长, 名称遵循<strong>驼峰式命名法</strong>. 一个好的命名标准很简单, 就是做到在开发者一看到名字时, 就能够懂得它的含义和使用方法. 另外, 每个模块都要加上自己的前缀, 前缀在编程接口中非常重要, 可以区分软件的功能范畴并防止不同文件或者类之间命名发生冲突, 比如相册模块(PhotoGallery)的代码都以 PG 作为前缀: PGAlbumViewController, PGDataManager.</p>
</blockquote>
<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><h3 id="类名（class）"><a href="#类名（class）" class="headerlink" title="类名（class）"></a>类名（class）</h3><p>1.避免潜在的命名冲突，设置 Class Prefix<br><img data-src="https://s2.ax1x.com/2019/10/31/KoJDjx.jpg"><br>设置整个项目的统一类名前缀。 由于苹果公司保留使用”两个字母前缀”的所有权，所以项目里的前缀应取三个字母为宜。</p>
<p>2.类名的命名采用 <strong>大驼峰命名法</strong> 即每个单词的首字母大写。</p>
<h3 id="类别-Category"><a href="#类别-Category" class="headerlink" title="类别 (Category)"></a>类别 (Category)</h3><p>如下：类别名添加 大写前缀 KL ， 方法名添加 小写前缀 kl 。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSObject</span>+KLNetworkingMethods.h</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> (<span class="title">KLNetworkingMethods</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="type">BOOL</span>)kl_isEmptyObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h3 id="委托-Delegate"><a href="#委托-Delegate" class="headerlink" title="委托 (Delegate)"></a>委托 (Delegate)</h3><p>第一个参数是触发委托的对象<br>第一个关键词是触发对象的类名<br>除非该方法只有一个参数</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个关键词为触发委托的类名</span></span><br><span class="line">- (<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 当只有一个&quot;sender&quot;参数时可以省略类名</span></span><br><span class="line">- (<span class="type">BOOL</span>)applicationOpenUntitledFile:(<span class="built_in">NSApplication</span> *)sender;</span><br></pre></td></tr></table></figure>
<p>根据委托方法触发的时机和目的，使用 should,will,did 等关键词</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="type">void</span>)browserDidScroll:(<span class="built_in">NSBrowser</span> *)sender;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSUndoManager</span> *)windowWillReturnUndoManager:(<span class="built_in">NSWindow</span> *)window;、</span><br><span class="line"></span><br><span class="line">- (<span class="type">BOOL</span>)windowShouldClose:(<span class="type">id</span>)sender;</span><br></pre></td></tr></table></figure>

<h3 id="通知-Notification"><a href="#通知-Notification" class="headerlink" title="通知 (Notification)"></a>通知 (Notification)</h3><p>通知常用于在模块间传递消息，所以通知要尽可能地表示出发生的事件，通知的命名范式是：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[触发通知的类名] + [Did | Will] + [动作] + Notification</span><br></pre></td></tr></table></figure>
<p>比如：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSApplicationDidBecomeActiveNotification</span></span><br><span class="line"><span class="built_in">UIKeyboardWillShowNotification</span></span><br><span class="line"><span class="built_in">NSUserDefaultsDidChangeNotification</span></span><br><span class="line"><span class="built_in">UITextFieldTextDidBeginEditingNotification</span></span><br></pre></td></tr></table></figure>

<h3 id="常量或者宏"><a href="#常量或者宏" class="headerlink" title="常量或者宏"></a>常量或者宏</h3><p>常量：<code>k</code> 为前缀，后续遵循 驼峰命名法，<code>kConstantName</code></p>
<p>宏：全部使用大写字母加下划线的形式，<code>MACORS_NAME</code></p>
<h3 id="方法-Methods"><a href="#方法-Methods" class="headerlink" title="方法(Methods)"></a>方法(Methods)</h3><p>命名采用 <strong>小驼峰命名法</strong> 即首个单词全部用小写字母，后续的单词首字母大写。<br>方法名中不应该有标点符号(包括下划线)，除了以下的情况：</p>
<ul>
<li>可以用带下划线的小写前缀来命名私有方法或者类别中的方法</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="type">void</span>)kl_setControls</span><br></pre></td></tr></table></figure>
<p>如果方法表示让对象执行一个动作，使用动词打头来命名，注意不要使用 <code>do</code>，<code>does</code> 这种多余的关键字，动词本身的暗示就足够了：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正确，使用属性名来命名方法</span></span><br><span class="line">- (<span class="built_in">NSSize</span>)cellSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误，添加了多余的动词前缀</span></span><br><span class="line">- (<span class="built_in">NSSize</span>)calcCellSize;</span><br><span class="line">- (<span class="built_in">NSSize</span>)getCellSize;</span><br></pre></td></tr></table></figure>
<p>对于有多个参数的方法，务必在每一个参数前都添加关键词，关键词应当清晰说明参数的作用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正确，保证每个参数都有关键词修饰</span></span><br><span class="line">- (<span class="type">void</span>)sendAction:(SEL)aSelector toObject:(<span class="type">id</span>)anObject forAllCells:(<span class="type">BOOL</span>)flag;</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误，遗漏关键词</span></span><br><span class="line">- (<span class="type">void</span>)sendAction:(SEL)aSelector :(<span class="type">id</span>)anObject :(<span class="type">BOOL</span>)flag;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确</span></span><br><span class="line">- (<span class="type">id</span>)viewWithTag:(<span class="built_in">NSInteger</span>)aTag;</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误，关键词的作用不清晰</span></span><br><span class="line">- (<span class="type">id</span>)taggedView:(<span class="type">int</span>)aTag;</span><br></pre></td></tr></table></figure>
<p>不要用 <code>and</code> 来连接两个参数，通常 <code>and</code> 用来表示方法执行了两个相对独立的操作（从设计上来说，这时候应该拆分成两个独立的方法）：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//错误，不要使用&quot;and&quot;来连接参数</span></span><br><span class="line">- (<span class="type">int</span>)runModalForDirectory:(<span class="built_in">NSString</span> *)path andFile:(<span class="built_in">NSString</span> *)name andTypes:(<span class="built_in">NSArray</span> *)fileTypes;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确，使用&quot;and&quot;来表示两个相对独立的操作</span></span><br><span class="line">- (<span class="type">BOOL</span>)openFile:(<span class="built_in">NSString</span> *)fullPath withApplication:(<span class="built_in">NSString</span> *)appName andDeactivate:(<span class="type">BOOL</span>)flag;</span><br></pre></td></tr></table></figure>
<p>方法的参数命名也有一些需要注意的地方:</p>
<ul>
<li>和方法名类似，参数的第一个字母小写，后面的每一个单词首字母大写</li>
<li>不要再方法名中使用类似 <code>pointer</code>,<code>ptr</code> 这样的字眼去表示指针，参数本身的类型足以说明</li>
<li>不要使用只有一两个字母的参数名</li>
<li>不要使用简写，拼出完整的单词</li>
</ul>
<h3 id="存取方法（Accessor-Methods）"><a href="#存取方法（Accessor-Methods）" class="headerlink" title="存取方法（Accessor Methods）"></a>存取方法（Accessor Methods）</h3><p>存取方法是指用来获取和设置类属性值的方法，属性的不同类型，对应着不同的存取方法规范：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//属性是一个名词时的存取方法范式</span></span><br><span class="line">- (type)noun;</span><br><span class="line">- (<span class="type">void</span>)setNoun:(type)aNoun;</span><br><span class="line"><span class="comment">//栗子</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)title;</span><br><span class="line">- (<span class="type">void</span>)setTitle:(<span class="built_in">NSString</span> *)aTitle;</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性是一个形容词时存取方法的范式</span></span><br><span class="line">- (<span class="type">BOOL</span>)isAdjective;</span><br><span class="line">- (<span class="type">void</span>)setAdjective:(<span class="type">BOOL</span>)flag;</span><br><span class="line"><span class="comment">//栗子</span></span><br><span class="line">- (<span class="type">BOOL</span>)isEditable;</span><br><span class="line">- (<span class="type">void</span>)setEditable:(<span class="type">BOOL</span>)flag;</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性是一个动词时存取方法的范式</span></span><br><span class="line">- (<span class="type">BOOL</span>)verbObject;</span><br><span class="line">- (<span class="type">void</span>)setVerbObject:(<span class="type">BOOL</span>)flag;</span><br><span class="line"><span class="comment">//栗子</span></span><br><span class="line">- (<span class="type">BOOL</span>)showsAlpha;</span><br><span class="line">- (<span class="type">void</span>)setShowsAlpha:(<span class="type">BOOL</span>)flag;</span><br></pre></td></tr></table></figure>
<p>命名存取方法时不要将动词转化为被动形式来使用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正确</span></span><br><span class="line">- (<span class="type">void</span>)setAcceptsGlyphInfo:(<span class="type">BOOL</span>)flag;</span><br><span class="line">- (<span class="type">BOOL</span>)acceptsGlyphInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误，不要使用动词的被动形式</span></span><br><span class="line">- (<span class="type">void</span>)setGlyphInfoAccepted:(<span class="type">BOOL</span>)flag;</span><br><span class="line">- (<span class="type">BOOL</span>)glyphInfoAccepted;</span><br></pre></td></tr></table></figure>
<p>可以使用 <code>can</code>,<code>should</code>,<code>will</code> 等词来协助表达存取方法的意思，但不要使用 <code>do</code>,和 <code>does</code>：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正确</span></span><br><span class="line">- (<span class="type">void</span>)setCanHide:(<span class="type">BOOL</span>)flag;</span><br><span class="line">- (<span class="type">BOOL</span>)canHide;</span><br><span class="line">- (<span class="type">void</span>)setShouldCloseDocument:(<span class="type">BOOL</span>)flag;</span><br><span class="line">- (<span class="type">BOOL</span>)shouldCloseDocument;</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误，不要使用&quot;do&quot;或者&quot;does&quot;</span></span><br><span class="line">- (<span class="type">void</span>)setDoesAcceptGlyphInfo:(<span class="type">BOOL</span>)flag;</span><br><span class="line">- (<span class="type">BOOL</span>)doesAcceptGlyphInfo;</span><br></pre></td></tr></table></figure>
<p>为什么 Objective-C 中不适用 <code>get</code> 前缀来表示属性获取方法？因为 <code>get</code> 在 Objective-C 中通常只用来表示从函数指针返回值的函数：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//三个参数都是作为函数的返回值来使用的，这样的函数名可以使用&quot;get&quot;前缀</span></span><br><span class="line">- (<span class="type">void</span>)getLineDash:(<span class="type">float</span> *)pattern count:(<span class="type">int</span> *)count phase:(<span class="type">float</span> *)phase;</span><br></pre></td></tr></table></figure>

<h3 id="集合操作类方法（Collection-Methods）"><a href="#集合操作类方法（Collection-Methods）" class="headerlink" title="集合操作类方法（Collection Methods）"></a>集合操作类方法（Collection Methods）</h3><p>有些对象管理着一系列其它对象或者元素的集合，需要使用类似“增删查改”的方法来对集合进行操作，这些方法的命名范式一般为：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//集合操作范式</span></span><br><span class="line">- (<span class="type">void</span>)addElement:(elementType)anObj;</span><br><span class="line">- (<span class="type">void</span>)removeElement:(elementType)anObj;</span><br><span class="line">- (<span class="built_in">NSArray</span> *)elements;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栗子</span></span><br><span class="line">- (<span class="type">void</span>)addLayoutManager:(<span class="built_in">NSLayoutManager</span> *)obj;</span><br><span class="line">- (<span class="type">void</span>)removeLayoutManager:(<span class="built_in">NSLayoutManager</span> *)obj;</span><br><span class="line">- (<span class="built_in">NSArray</span> *)layoutManagers;</span><br></pre></td></tr></table></figure>
<p>注意，如果返回的集合是无序的，使用 <code>NSSet</code> 来代替 <code>NSArray</code>。如果需要将元素插入到特定的位置，使用类似于这样的命名：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="type">void</span>)insertLayoutManager:(<span class="built_in">NSLayoutManager</span> *)obj atIndex:(<span class="type">int</span>)index;</span><br><span class="line">- (<span class="type">void</span>)removeLayoutManagerAtIndex:(<span class="type">int</span>)index;</span><br></pre></td></tr></table></figure>
<p>如果管理的集合元素中有指向管理对象的指针，要设置成 <code>weak</code> 类型以防止引用循环。<br>下面是 SDK 中 <code>NSWindow</code> 类的集合操作方法：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="type">void</span>)addChildWindow:(<span class="built_in">NSWindow</span> *)childWin ordered:(<span class="built_in">NSWindowOrderingMode</span>)place;</span><br><span class="line">- (<span class="type">void</span>)removeChildWindow:(<span class="built_in">NSWindow</span> *)childWin;</span><br><span class="line">- (<span class="built_in">NSArray</span> *)childWindows;</span><br><span class="line">- (<span class="built_in">NSWindow</span> *)parentWindow;</span><br><span class="line">- (<span class="type">void</span>)setParentWindow:(<span class="built_in">NSWindow</span> *)window;</span><br></pre></td></tr></table></figure>
<h3 id="命名属性和实例变量（Properties-amp-Instance-Variables）"><a href="#命名属性和实例变量（Properties-amp-Instance-Variables）" class="headerlink" title="命名属性和实例变量（Properties&amp;Instance Variables）"></a>命名属性和实例变量（Properties&amp;Instance Variables）</h3><p>属性和对象的存取方法相关联，属性的第一个字母小写，后续单词首字母大写，不必添加前缀。属性按功能命名成名词或者动词：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//名词属性</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>) <span class="built_in">NSString</span> *title;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动词属性</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>) <span class="type">BOOL</span> showsAlpha;</span><br></pre></td></tr></table></figure>
<p>属性也可以命名成形容词，这时候通常会指定一个带有 <code>is</code> 前缀的 get 方法来提高可读性：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">getter</span>=isEditable) <span class="type">BOOL</span> editable;</span><br><span class="line">复制代码命名实例变量，在变量名前加上_前缀（有些有历史的代码会将_放在后面），其它和命名属性一样：</span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="type">BOOL</span> _showsTitle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一般来说，类需要对使用者隐藏数据存储的细节，所以不要将实例方法定义成公共可访问的接口，可以使用 <code>@private</code>，<code>@protected</code> 前缀。<br>按苹果的说法，不建议在除了 <code>init</code> 和 <code>dealloc</code> 方法以外的地方直接访问实例变量，但很多人认为直接访问会让代码更加清晰可读，只在需要计算或者执行操作的时候才使用存取方法访问，我就是这种习惯，所以这里不作要求。</p>
<h3 id="命名常量（Constants）"><a href="#命名常量（Constants）" class="headerlink" title="命名常量（Constants）"></a>命名常量（Constants）</h3><p>如果要定义一组相关的常量，尽量使用枚举类型（enumerations），枚举类型的命名规则和函数的命名规则相同。<br>建议使用 <code>NS_ENUM</code> 和 <code>NS_OPTIONS</code> 宏来定义枚举类型，参见官方的 <code>Adopting Modern Objective-C</code> 一文：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个枚举</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">NSMatrixMode</span>) &#123;</span><br><span class="line">    <span class="built_in">NSRadioModeMatrix</span>,</span><br><span class="line">    <span class="built_in">NSHighlightModeMatrix</span>,</span><br><span class="line">    <span class="built_in">NSListModeMatrix</span>,</span><br><span class="line">    <span class="built_in">NSTrackModeMatrix</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>定义 bit map：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">NSWindowMask</span>) &#123;</span><br><span class="line">    <span class="built_in">NSBorderlessWindowMask</span>      = <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">NSTitledWindowMask</span>          = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">NSClosableWindowMask</span>        = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">    <span class="built_in">NSMiniaturizableWindowMask</span>  = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">    <span class="built_in">NSResizableWindowMask</span>       = <span class="number">1</span> &lt;&lt; <span class="number">3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>使用 <code>const</code> 定义浮点型或者单个的整数型常量，如果要定义一组相关的整数常量，应该优先使用枚举。常量的命名规范和函数相同：<br>&#96;&#96;objc<br>const float NSLightGray;</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">复制代码不要使用 `#define` 宏来定义常量，如果是整型常量，尽量使用枚举，浮点型常量，使用 `const` 定义。`#define` 通常用来给编译器决定是否编译某块代码，比如常用的：</span><br><span class="line">```objc</span><br><span class="line"><span class="meta">#ifdef DEBUG</span></span><br></pre></td></tr></table></figure>
<p>码注意到一般由编译器定义的宏会在前后都有一个<code>__</code>，比如 *<code>__MACH__</code>*。</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="文件注释"><a href="#文件注释" class="headerlink" title="文件注释"></a>文件注释</h3><p>每一个文件都 必须 写文件注释，文件注释最基本的应包含</p>
<ul>
<li>文件名称</li>
<li>作者信息(姓名、邮箱、Github等)</li>
<li>文件的描述，及其作用</li>
<li>版本信息</li>
</ul>
<p>最基础的文件注释栗子🌰</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    File name:     AppDelegate.h</span></span><br><span class="line"><span class="comment">    Author:        Ferryman (Li KaiLong)</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    Description:</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    History:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> ********************************************************************************/</span></span><br></pre></td></tr></table></figure>
<p>复制代码在 <strong>Xcode</strong> 里，创建的新文件都有默认的文件注释，可通过 Xcode 9 的 自定义文本宏 新特性统一添加我们的文件注释模块，保持整个工程统一的文件注释风格。 <strong>重要！很重要！！ 非常重要！！！</strong></p>
<h3 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释"></a>代码注释</h3><p>“自解释”（self-documenting）的代码是我们应该做到的，但仍然需要详细的注释来说明参数的意义、返回值、功能以及可能的副作用。<br>方法、类、协议、类别的定义都需要注释，推荐采用 Apple 的标准注释风格，好处是可以在引用的地方 <strong>option + 鼠标左键</strong> 自动弹出注释，非常方便。<br>生成注释格式的方法采用 <strong>Xcode</strong> 自带的注释快捷键功能</p>
<ul>
<li><p>单行注释：在需要注释的地方按 command + &#x2F;</p>
</li>
<li><p>标注：	在属性或者方法名的上面(空白) 的地方按 command + option + &#x2F;<br><img data-src="https://s2.ax1x.com/2019/10/31/KoJBg1.jpg"><br>特别注意：</p>
</li>
<li><p>协议、委托的注释要明确说明其被触发的条件</p>
</li>
<li><p>如果在注释中要引用参数名或者方法函数名，使用||将参数或者方法括起来以避免歧义：<br><strong>定义在头文件里的接口方法、属性必须要有注释！</strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>iOS</tag>
        <tag>Format</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS - Xcode 设置代码片段</title>
    <url>//ios-xcode-setup-code-snippet.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><em>为了提高编程的效率，有时候也要用上一些捷径。代码片段就是我们可以用上的捷径之一。</em></p>
<h2 id="一、创建代码片段"><a href="#一、创建代码片段" class="headerlink" title="一、创建代码片段"></a>一、创建代码片段</h2><p>以 <code>Strong</code> 为例：<br>1、在书写 <code>@property</code> 属性的地方写下如下语句：</p>
<figure class="highlight objc"><figcaption><span>Object-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) &lt;#Class#&gt; *&lt;<span class="meta">#object#&gt;;</span></span><br></pre></td></tr></table></figure>
<p>2、选中上述语句，右键点击弹窗中的“Create Code Snippet”<br><img data-src="https://s2.ax1x.com/2019/09/27/uKdXrt.jpg"><br>3、弹出代码片段编辑窗口，如下图所示：<br><img data-src="https://s2.ax1x.com/2019/09/27/uKdOKI.jpg"><br>图中从上到下的含义依次是：</p>
<ol>
<li>Title：标题</li>
<li>Summary：描述文字</li>
<li>代码块区域</li>
<li>Language：可以在哪些语言中使用该代码片段</li>
<li>Platform：可以使用代码片段的平台，有 All&#x2F;iOS&#x2F;macOS&#x2F;tvOS&#x2F;watchOS 五个选项</li>
<li>Completion：敲出代码片段的快捷方式，例：@ps</li>
<li>Availbability：可以在哪些文件中使用当前代码片段，比如全部位置，头文件中，.m文件中，声明位置，实现位置等，当然可以添加多个支持的位置。</li>
</ol>
<p>一切设置完成以后，点击该菜单右下角的Done按钮，新建工作结束。</p>
<h2 id="二、常用代码块"><a href="#二、常用代码块" class="headerlink" title="二、常用代码块"></a>二、常用代码块</h2><p>1、strong：</p>
<figure class="highlight objc"><figcaption><span>Object-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) &lt;#Class#&gt; *&lt;<span class="meta">#object#&gt;;</span></span><br></pre></td></tr></table></figure>
<p>2、weak：</p>
<figure class="highlight objc"><figcaption><span>Object-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) &lt;#Class#&gt; *&lt;<span class="meta">#object#&gt;;</span></span><br></pre></td></tr></table></figure>
<p>3、copy：</p>
<figure class="highlight objc"><figcaption><span>Object-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *&lt;<span class="meta">#string#&gt;;</span></span><br></pre></td></tr></table></figure>
<p>4、assign：</p>
<figure class="highlight objc"><figcaption><span>Object-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) &lt;#Class#&gt; &lt;<span class="meta">#property#&gt;;</span></span><br></pre></td></tr></table></figure>
<p>5、delegate：</p>
<figure class="highlight objc"><figcaption><span>Object-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="type">id</span>&lt;&lt;<span class="meta">#protocol#&gt;&gt; <span class="string">&lt;#delegate#&gt;;</span></span></span><br></pre></td></tr></table></figure>
<p>6、block：</p>
<figure class="highlight objc"><figcaption><span>Object-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) &lt;#Block#&gt; &lt;<span class="meta">#block#&gt;;</span></span><br></pre></td></tr></table></figure>
<p>7、mark：</p>
<figure class="highlight objc"><figcaption><span>Object-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - <span class="string">&lt;#mark#&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>8、ReUseCell：</p>
<figure class="highlight objc"><figcaption><span>Object-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> **cellID = &lt;#cellID#&gt;;</span><br><span class="line">&lt;#Class#&gt; *cell = [tableView dequeueReusableCellWithIdentifier:cellID];</span><br><span class="line"><span class="keyword">if</span>(cell == <span class="literal">nil</span>) &#123;</span><br><span class="line">cell = [[&lt;#Class#&gt; alloc] initWithStyle:<span class="built_in">UITableViewCellStyleDefault</span>      reuseIdentifier:cellID];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cell;</span><br></pre></td></tr></table></figure>
<p>9、button:</p>
<figure class="highlight objc"><figcaption><span>Object-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIButton</span> *btn = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</span><br><span class="line">btn.frame = <span class="built_in">CGRectMake</span>(&lt;##&gt;, &lt;##&gt;, &lt;##&gt;, &lt;##&gt;);</span><br><span class="line">btn.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</span><br><span class="line">[btn addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(clicked:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:btn];</span><br></pre></td></tr></table></figure>
<p>10、MainGCD：</p>
<figure class="highlight objc"><figcaption><span>Object-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">&lt;<span class="meta">#code#&gt;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>11、AfterGCD：</p>
<figure class="highlight objc"><figcaption><span>Object-C</span></figcaption><table><tr><td class="code"><pre><span class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(&lt;#delayInSeconds#&gt; * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">&lt;<span class="meta">#code to be executed after a specified delay#&gt;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>12、OnceGCD：</p>
<figure class="highlight objc"><figcaption><span>Object-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">&lt;<span class="meta">#code to be executed once#&gt;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>13、Screen Size</p>
<figure class="highlight objc"><figcaption><span>Object-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SCREEN_WIDTH        ([UIScreen mainScreen].bounds.size.width)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCREEN_HEIGHT       ([UIScreen mainScreen].bounds.size.height)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>iOS</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS - 使用 fastlane snapshot 自动化截图</title>
    <url>//ios-fastlane-snapshot.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="First-at-all"><a href="#First-at-all" class="headerlink" title="First at all"></a>First at all</h2><p>　　首先先介绍一下 fastlane 是干嘛用的：</p>
<blockquote>
<p>Fastlane 是一套使用 Ruby 写的自动化工具集，旨在简化 Android 和 iOS 的部署过程，自动化你的工作流。它可以简化一些乏味、单调、重复的工作，像截图、代码签名以及发布 App。</p>
</blockquote>
<p>　　然后这篇文章主要介绍的是 fastlane 里面其中一个工具——snapshot，我们可以用它来给应用进行自动化截图。</p>
<p>附上官方文档地址：<a href="https://docs.fastlane.tools/getting-started/ios/screenshots/">https://docs.fastlane.tools/getting-started/ios/screenshots/</a></p>
<h2 id="Just-to-try"><a href="#Just-to-try" class="headerlink" title="Just to try"></a>Just to try</h2><p>　　好了，接下来进入手把手教学阶段。这里的教学前提是你已经安装好了 fastlane 或者 snapshot。没安装好也没关系，打开终端输入以下代码进行安装：</p>
<figure class="highlight bash"><figcaption><span>Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">　　<span class="built_in">sudo</span> gem install snapshot</span><br></pre></td></tr></table></figure>
<p>如果遇到这个问题：</p>
<div class="note danger"><p>You don’t have write permissions for the &#x2F;usr&#x2F;bin directory.</p>
</div>
<p>可以尝试加上安装路径</p>
<figure class="highlight bash"><figcaption><span>Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">gem install -n /usr/local/bin fastlane</span><br></pre></td></tr></table></figure>
<p>成功安装完以后。以一个新工程为例子，首先我们需要给他增加一个 UI Testing Target</p>
<h3 id="1、增加-UI-Testing-Target"><a href="#1、增加-UI-Testing-Target" class="headerlink" title="1、增加 UI Testing Target"></a>1、增加 UI Testing Target</h3><p>选择 <strong>Xcode</strong> 顶部菜单栏中的 <strong>File</strong> –&gt; <strong>New</strong> –&gt; **Target…**，在弹出框中选择 <code>iOS UI Testing Target</code><br><img data-src="https://s2.ax1x.com/2019/09/16/nfAyWT.jpg"><br>名字随意，其他默认。然后点击工程，添加一个新的 <code>scheme</code><br><img data-src="https://s2.ax1x.com/2019/09/16/nfAROJ.jpg"><br>在弹出框中选择你新添加的 <code>Target</code><br><img data-src="https://s2.ax1x.com/2019/09/16/nfAcSU.jpg"></p>
<h3 id="2、编辑-UI-Testing-Target"><a href="#2、编辑-UI-Testing-Target" class="headerlink" title="2、编辑 UI Testing Target"></a>2、编辑 UI Testing Target</h3><p>注意勾选你的 <code>UI Testing Target</code>，然后点击 <code>Edit Scheme</code><br><img data-src="https://s2.ax1x.com/2019/09/16/nfA2y4.jpg"><br><strong>然后在弹出框中，勾选 <code>Build</code> 中的 <code>Run</code>和 <code>Shard</code></strong><br><img data-src="https://s2.ax1x.com/2019/09/16/nfAfm9.jpg"></p>
<h3 id="3、给工程加入-snapshot"><a href="#3、给工程加入-snapshot" class="headerlink" title="3、给工程加入 snapshot"></a>3、给工程加入 snapshot</h3><p>打开终端，切到工程目录底下，输入一下命令：</p>
<figure class="highlight bash"><figcaption><span>Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">fastlane snapshot init</span><br></pre></td></tr></table></figure>
<p>成功后工程目录会多出两个文件<br><img data-src="https://s2.ax1x.com/2019/09/16/nfA4T1.jpg"><br><code>SnapshotHelper.swift</code> 文件需要我们添加到项目中使用，注意选中的<code>Target</code> 是前面创建的 UITest Target。如果是 <code>OC</code> 项目，文件拖入时会自动提醒是否创建桥接文件，选择“YES”就行了。</p>
<p><code>Snapfile</code> 是截图配置文件，可以在里面设置需要截图的设备和语言。 </p>
<h3 id="4、在工程中使用-snapshot"><a href="#4、在工程中使用-snapshot" class="headerlink" title="4、在工程中使用 snapshot"></a>4、在工程中使用 snapshot</h3><p>当确认了 <code>UI Testing Target</code> 的设置没问题，<code>snapshot</code> 的引用文件在工程中，配置文件也没问题后，我们下一步就可以开始在工程中初始化 <code>snapshot</code> 和调用他的截图方法了。</p>
<p>首先，我们需要在 <code>setUp</code> 方法中初始化，值得一提的是官方文档和网上搜索到的技术博客中 OC 的初始化方法：<code>[Snapshot setupSnapshot:app];</code>，在 <code>snapshot</code> 中的源码好像已经找不到了，现在的初始化方法如下</p>
<figure class="highlight objc"><figcaption><span>Object-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">XCUIApplication</span> *app = [[<span class="built_in">XCUIApplication</span> alloc]init];</span><br><span class="line">[Snapshot setupSnapshot:app waitForAnimations:<span class="literal">YES</span>];</span><br><span class="line">[app launch];</span><br></pre></td></tr></table></figure>

<p>然后在 <code>testExample</code> 方法中实现截图方法</p>
<figure class="highlight objc"><figcaption><span>Object-C</span></figcaption><table><tr><td class="code"><pre><span class="line"> <span class="built_in">XCUIApplication</span> *app = [[<span class="built_in">XCUIApplication</span> alloc] init];</span><br><span class="line"></span><br><span class="line"><span class="comment">//截图 - 首頁</span></span><br><span class="line">[Snapshot snapshot:<span class="string">@&quot;0main&quot;</span> timeWaitingForIdle:<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//截图 - 点击方法</span></span><br><span class="line"><span class="built_in">XCUIElement</span> *openButton = app.buttons[<span class="string">@&quot;Open&quot;</span>];</span><br><span class="line">[openButton tap];</span><br><span class="line">[Snapshot snapshot:<span class="string">@&quot;1filter&quot;</span> timeWaitingForIdle:<span class="number">10</span>];  </span><br></pre></td></tr></table></figure>
<p>这里需要强调的一点是 <code>XCUIElement *openButton = app.buttons[@&quot;Open&quot;];</code> 这句里的 “Open”，是怎么来的，他是根据我们创建控件时所设置的 <code>accessibilityIdentifier</code> 的值来的。</p>
<figure class="highlight objc"><figcaption><span>Object-c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIButton</span> *btnOne = [[<span class="built_in">UIButton</span> alloc]initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">self</span>.view.frame.size.width / <span class="number">2</span>, <span class="keyword">self</span>.view.frame.size.width / <span class="number">2</span>)];</span><br><span class="line">[btnOne addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(jumpToAlibabba) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">[btnOne setAccessibilityIdentifier:<span class="string">@&quot;Open&quot;</span>];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:btnOne];</span><br></pre></td></tr></table></figure>
<p>完成这一步，剩下需要做的就不多了。</p>
<h3 id="5、获取自动化截图结果"><a href="#5、获取自动化截图结果" class="headerlink" title="5、获取自动化截图结果"></a>5、获取自动化截图结果</h3><p>同样打开终端，切到项目路径，运行</p>
<figure class="highlight bash"><figcaption><span>Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">fastlane snapshot</span><br></pre></td></tr></table></figure>
<p>然后会出现一连串的打印<br><img data-src="https://s2.ax1x.com/2019/09/16/nfAIFx.jpg"><br>运行结束以后，成功的话会生成了一个 html 文件和一组截图，html 页面会自己打开。<br><img data-src="https://s2.ax1x.com/2019/09/16/nfATfK.jpg"><br>不过显示的效果有点不太友好~<br>以上。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>iOS</tag>
        <tag>OC</tag>
      </tags>
  </entry>
  <entry>
    <title>每周总结 - 0831</title>
    <url>//weekly-summary-190831.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　上个礼拜又没抽出空写周记，一转眼本周就过去了一半，这篇周记我是星期三开始写的，不知道结束会在星期几，写一篇周记时间周期横跨大半个礼拜，虽然感觉很惫懒，但从时间跨度上看，又是名副其实的“周记”了。<br>　　这个礼拜买了个键盘——罗技 k380，尝试在几个设备之间切换，连接，都很迅速，但按键的手感不是很清脆，有点粘滞， 就像吃东西梗着喉咙的感觉，但离噎着又很远。可能是没习惯吧。不过对于平常在 iPad 上码字勉强够用了。<br>　　新开了两本书《超新星纪元》和《只是为了好玩》，一本科幻小说，一本 Linux 之父的自传。前者主要内容是讲由于行星运动导致地球上的成年人都死亡，只剩下十三岁以下的小孩，而在这群小孩的手上开启了地球上的新纪元。后者只看了个序，不过第一章开头着重讲了他本人的长相，说自己长的如何如何奇怪等等，让我不禁觉得是不是有点刻意，想拐弯抹角的往“奇人必有异相”里靠，不过也可以理解，但凡伟人都多少有些自恋，哪怕平凡如我，早起照镜子也照到出门时手忙脚乱。虽然两本书一个是靠想象力，一个是记叙，但他们里面都有提到一个共通的东西，《超新星纪元》里面说的是孩子社会发展的原动力是玩，《只是为了好玩》里林纳斯解释生活的意思提出了三个层级的诉求，生存，秩序，娱乐。似乎关于这方面的思考，发展进步，生物进化，最后的结果都是为了更好的玩。一边觉得他们的想法有趣，一边有些感概，优秀的人总是能想到一块去。我作为一个后生晚辈，也情不自禁的想举手发言，前辈们，我。。我也觉得玩是人类的最终极的最伟大的诉求。<br>　　工作内容日益增多，有的内容对我有积极影响，有的则不然。周六开会听闻产品助理离职的事，心里没起太多波澜，部门 leader 顺势而为的借这件事敲打包括我在内的几名开发人员，虽然有些话我觉得有失偏颇，但如果不计较这个，对于可以增进改善我的建议，我觉得还是比较客观的。所以心里也没起太多波澜。倒是因为之前和产品助理的针锋相对，让我想到了一些影视小说作品里会出现的桥段，一直针锋相对的两个敌人在最后永别——现实中我们应该也不会再见了的关键时候，忽然相逢一笑泯恩仇，并为之前所有的恩怨争论由其冲突产生的毛刺最终消融为理解，而在关系上以另一种方式达成非常规的相知相识。戏剧化演绎到这，我就打住，没继续在脑子里演绎下去，回过头来又觉得自己颇有些可笑，可笑的原因模糊以蔽之，大概是人间不值得吧。<br>　　每天早上通勤路上背英语单词，虽然现在错误率在下降，但是感觉效果还是不太明显，想下一个阶段配合英文原著阅读学习，但不知道自己能够控制时间，专升本的课进入复习阶段，数据库老师给了一份试卷让周一到周五内完成，结果一直没抽出空。包括这篇博客，写到这里的时候已经星期天晚上了，明天又要开始新的一轮忙碌了。<br>　　刷微博看到一句诗，“人生天地间，忽如远行客。”，有朦胧的孤独感从诗的意境里透出来，百度搜全文看到下一句，“斗酒相娱乐，聊厚不为薄。”好吧，不为薄就不为薄，及时行乐就好。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Live</tag>
        <tag>Study</tag>
        <tag>Work</tag>
      </tags>
  </entry>
  <entry>
    <title>关于“猜你喜欢”的思考</title>
    <url>//about-what-do-you-like.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　最近刷知乎的频率上升，刷的多了之后隐隐感觉到知乎在内容显示上有一些变化，我想可能是它的推荐算法有些不一样了。这种不一样让我想起抖音，我偶尔也会刷一下抖音，频率大概一个月一两次左右，主要目的是看看朋友们的近况，刚下抖音的时候也有过一阵上瘾期，有刷抖音的朋友都很明白他推荐算法的强大，一个视频十几秒，不占用时间，能无限往下翻，虽然一个视频很短，但不知不觉就让人耗费了一两个小时，有隐性的成瘾机制。后来也是因为这个，导致我戒断抖音的，因为太消耗时间了，而且事后心里总有一种不踏实的感觉，就好像放暑假愉快的玩了两个月，一回头发现一无所获，作业一大堆没写的感觉，也可以简单归纳为放纵后的空虚。最近的知乎也给我这种感觉。<br>　　其实除了这些资讯娱乐类的应用，还有很多应用都有这种推荐机制，比如购物应用，淘宝，你在搜索框搜索了某个产品后，接下来几天，他的顶部滚动条，和往下滑的猜你喜欢，一定会存在类似的产品，或者是和产品配套的周边产品，比如你搜 苹果手机，隔天可能就给你推荐苹果手机壳，更过分一点的就是你在某个搜索引擎上搜索，想了解产品相关的信息，然后打开购物应用，就发现里面已经开始推荐你搜索过的产品了。不过这是他们内部的交易，又是另一件事了。<br>　　猜你喜欢这种产品功能，应用极为广泛。包括不止互联网行业，很多传统行业，其实也有做类似的方式，最宽泛的例子，就是当某个行业要出一款新产品的时候，首先会做市场调查，然后确认目标受众，而这个目标受众的反向概念，其实就是为这个群体做一个猜他们喜欢的产品。<br>　　而猜你喜欢的好处也是显而易见的，对于企业来说，可以提升用户粘性，刺激用户消费，有利于开拓新用户等等。对于用户来说，看资讯买东西看到的都是自己感兴趣的东西，可以更好更快地找到自己想要的东西，省时省力。<br>　　但就像前面说的，猜你喜欢也存在着一些缺点。就像你可能在某个投资公司或者投资理财顾问留过号码，之后总有一阵子会频繁的收到好多金融公司的电话，问你杭州地铁口的公寓要不要了解一下。我之前因为学历提升的问题，在某个机构留了一个电话，还是几年前留的，后来每年九月三月学校开学的点，就总有教育机构打电话过来询问我有没有这方面的意向。这种打扰其实是很不好的，而在应用里这种打扰就表现成，很多时候你可能只是想了解一下某方面的信息，但之后就不断收到这类信息。<br>　　我之前因为买了 iPad，想知道有什么应用可以提高 iPad 的生产力，就在知乎上搜索相似问题，搜到了，最后也得到了满意结果。以为事情就此告一段落了。但没想到之后打开他还是给我推送相关内容，而且还是在我没关注这个问题的情况下。而我也因为总有答案是我没看过的，会点开看一遍，正中他们的下怀。但新出现的答案对我有没有帮助呢，答案是否定的。因为 iPad 上有用的应用就那么些，所以很多答案给我推荐的应用重复率很高。我只是看他们在一个结果上的不同解法而已，最终我没有得到新的东西，但时间和精力却被消耗掉了。<br>　　当然你可能会说，是自制力的问题。对于不想再看的东西不看就好喽，但如果真能做到这种地步，抖音这类的应用就不会红红火火的走到现在了，毕竟这个内容也确实是你自己感兴趣的，而且你能克制住自己不看这一类的信息，但还有另一类的信息在等着你，总有一个内容会抓住你的注意力。就像我的知乎上有 iPad 应用的答案推荐，也有“女生什么样的身材算是身材好？”这类的答案推荐，虽然看小姐姐很好，但是在看小姐姐的事上花太多时间就不是很好了。<br>　　当然你还可能会说，那就统统不看喽，把应用卸载掉。这个很好做到，但是结合实际看，其实也有一些问题，我们是社会性的生物，需要和人沟通，和人沟通的核心是信息交换，当我们主动接切断自己的信息来源，我们如何保持和人无代沟的沟通？哪怕你性格孤僻，你也总要生活，总要去了解社会上的各种信息，以掌握如何更好生活的方式，买东西对比不同产品，评测看不看？对比价格优惠，电商网站活动看不看？投资理财更不用说了。<br>　　信息推荐相似度高同质化严重，造成精力耗费是猜你喜欢的一个问题。还有另一个我想说的是，应用的推荐机制虽然给人推荐了很多信息，扩展知识面，但其实因为是按需分配，它在不断推荐的过程中，其实他也在用我们喜欢的信息给我们建造了一个坚硬的认知壁垒。<br>　　为什么这么说呢？我记得我刚开始使用知乎的时候，那时还没有现在的去中心化概念，我看到的内容都是我关注的大 V 们关注、点赞的内容和自己关注的问题内容，当我还在上高中的收，限于见识，我还只是想看看有没有什么好书推荐，有没有什么段子可以解闷，所以关注的都是那类的信息，忽然有一天我看到我关注的一个大 V 点赞了一个修建一个穿透地球的电梯会是怎样，点进去看，里面的答题人真的很认真在用物理知识和地理知识去解释这个问题，列公式上图片做图解，就好像身体力行的告诉我说天马行空的脑洞也可以用一板一眼的数学思维去解答，让我这个知乎萌新好像被反向的按了一下“F5”键，但现在的知乎却很少再给我这种感觉，乏善可称更多了一些。抖音的例子就不举了，情况也大致如此。<br>　　信息时代，我们每天接收的信息看似很多，但其实很多信息是垃圾信息，有些有很强的时效性，有些只是别人输出观点的变体，而更多的是重复信息。我们在享受信息时代的便利，也要警惕信息时代给我们的负面影响，不要让信息主宰我们。<br>　　忽然想起现在在生活里越来越被弱化的存在——电视，他也同样作为信息来源渠道，虽然可能有些东西在电视上是被美化杯筛选后的结果，但是我更喜欢他把各种各样的东西就放在那，放在不同的频道里，等你自己去切台的特点。还记得小学放假在家找电视台动画片看不小心点到 CCTV-10 探索频道，第一次看人文科学的节目被刷新三观的感觉，我觉得一个好的产品应该多给人带来这种感觉。在保留更多的选择权的情况下，加一点点猜你喜欢。</p>
]]></content>
      <categories>
        <category>杂论</category>
      </categories>
      <tags>
        <tag>产品思考</tag>
        <tag>用户需求</tag>
      </tags>
  </entry>
  <entry>
    <title>每周总结 - 0819</title>
    <url>//weekly-summary-190819.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　Yooo~今天终于挤出时间写周记了，上个礼拜落了一篇，就合在这里一块说了。<br>　　上上个礼拜看了徐浩峰的《刀背藏身》短篇集，很有古韵，他在后记里写：</p>
<blockquote>
<p>　　古人以减省来营造意境，说满、说显了，便无意境。营造意境是为了让人有更多体会，可惜今人拒绝体会，只求告知。</p>
</blockquote>
<p>　　回过头看，这又好像是对他这本书自己写作脉络的总结。之前看徐浩峰的电影《师傅》，里面廖凡对宋佳表白说：“自十五岁起，每日挥刀五百下，这个数字约束住了我，不会胡思乱想。从今日起，我以你为约束。”一板一眼，真切实在。在书里也有给我同样印象的话，就是一个八岁小孩收养了一个女婴，小孩和女婴都长大了，爷爷装糊涂，想成就他们的好事，当人点明事实时，当时的对话是：“沈飞雪默然，片刻找回话：‘鬼都知道你喜欢她。’孔鼎义：‘喜欢跟喜欢不一样。这辈子第一眼见她，她四岁。善举，要善始善终。’”<br>　　我想这又是另一种和同类武侠小说区别开来的特点，不止有减省，还有坚持。<br>　　上个礼拜追了一部番，《月色真美》，很单纯的初中生恋爱番，有很多感同身受的片段，想起以前念书时的恋爱，唉那真是<del>，算了，人生已是风雨，往事还是不用再提了。<br>　　上周一的时候和部门测试发生了一个正面冲突，虽然事前事后我都明白，我本可以不如此，但有时候被零零碎碎的小动作膈应的真让人火大，虽然我一直努力克制自己不发火，因为觉得发火面目可憎，另外是因为觉得自己不应该被这些事情分散注意力，目标是星辰大海，脚底下的几个石子是在不需要去计较，但又想想菩萨慈悲，也有金刚怒目，我怼她，和我要做个好人并不冲突。再者关系又不是什么很好，凭什么总是要我让步，争锋相对虽说是小孩气脾气，我偏要意气用事一回。<br>　　不过事后除了原本就觉得没必要，还觉得真的很没劲，争锋相对最后浪费的其实是我的时间。本来不去理她，多余的时间，说不定我的周记就不用拖到这个礼拜写了。唉</del>，keep down and carry on 啊。<br>　　周末都去图书馆学习功课了，数据关于 SQL 这一章可以说是我最近看的最认真的内容了。游泳好像到了瓶颈期，怎么游都是那几下，打算看一下游泳视频学习一下。<br>　　其他的想不到了。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Live</tag>
        <tag>Study</tag>
        <tag>Work</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS - Runtime 学习</title>
    <url>//ios-runtime-study.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　在维护一个项目时碰见一个问题，调用了一个方法后不起作用，这种问题一般有两个解决思路，一个是看方法有没有起作用，另一个是看是不是其他的方法打断了这个方法，比如设置 UIButton 的隐藏，但在另一个地方，又把它设置成显示了。这种问题在工程里通过调试代码一般都很好解决。<br>　　但是当它发生在我调用了一个 SDK 方法不起作用时，按照上文的思路，一查看是否是 SDK 方法的问题，这个除了向 SDK 提供人员反应没有其他更好的解决方法了，二是查看是否其他地方也调用了这个方法，使用了不同的参数导致本次的调用失效了。如果这个方法调用的少，可以全局搜索，然后注释掉方法，但是如果之前项目不是你开发的，你只是后期切入进来，同时代码结构一时半会还不能很好把握到，总之想快速利落的排除问题，这时你可以考虑用 Runtime 的特性，把 SDK 里的方法用自己写的替换掉。<br>　　先老调重弹一遍，什么是 Runtime？
　　</p>
<h2 id="二、概念"><a href="#二、概念" class="headerlink" title="二、概念"></a>二、概念</h2><p>　　Objective-C是动态语言，它将很多静态语言在编译和链接时做的事放到了运行时，这个运行时系统就是 Runtime。<br>Runtime 其实就是一个库，它基本上是用 C 和汇编写的一套 API，这个库使C语言有了面向对象的能力。<br>静态语言：在编译的时候会决定调用哪个函数。<br>动态语言（OC）：在运行的时候根据函数的名称找到对应的函数来调用。</p>
<p>　　然后还有一些需要了解的基本概念：</p>
<ul>
<li><strong>isa</strong>：OC 中，类和类的实例在本质上没有区别，都是对象，任何对象都有isa 指针，它指向类或元类。</li>
<li><strong>SEL</strong>：SEL（又叫选择器）是方法的 selector 的指针。方法的 selector 表示运行时方法的名字。OC在编译时，会依据每一个方法的名字、参数，生成一个唯一的整型标识(Int类型的地址)，这个标识就是 SEL。</li>
<li><strong>IMP</strong>：IMP 是一个函数指针，指向方法最终实现的首地址。SEL 就是为了查找方法的最终实现IMP。</li>
<li><strong>Method</strong>：用于表示类定义中的方法，它的结构体中包含一个 SEL 和 IMP，相当于在 SEL 和 IMP 之间作了一个映射。</li>
<li><strong>消息机制</strong>：任何方法的调用本质就是发送一个消息。编译器会将消息表达式[receiver message]转化为一个消息函数 objc_msgSend(receiver, selector)。</li>
<li><strong>Runtime 的使用</strong>：获取属性列表，获取成员变量列表，获得方法列表，获取协议列表，方法交换（黑魔法），动态的添加方法，调用私有方法，为分类添加属性。</li>
</ul>
<h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><ul>
<li>关联对象(Objective-C Associated Objects)给分类增加属性</li>
<li>方法交换 &#x2F; 黑魔法(Method Swizzling)</li>
<li>实现 NSCoding 的自动归档和自动解档</li>
<li>实现字典和模型的自动转换(MJExtension)</li>
</ul>
<p>　　这里介绍前两种。
　　</p>
<h3 id="1、关联对象-Objective-C-Associated-Objects-给分类增加属性"><a href="#1、关联对象-Objective-C-Associated-Objects-给分类增加属性" class="headerlink" title="1、关联对象(Objective-C Associated Objects)给分类增加属性"></a>1、关联对象(Objective-C Associated Objects)给分类增加属性</h3><p>我们都是知道分类是不能自定义属性和变量的。下面通过关联对象实现给分类添加属性。</p>
<p>关联对象 Runtime提 供了下面几个接口：</p>
<figure class="highlight objectivec"><figcaption><span>Objective-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关联对象</span></span><br><span class="line"><span class="type">void</span> objc_setAssociatedObject(<span class="type">id</span> object, <span class="keyword">const</span> <span class="type">void</span> *key, <span class="type">id</span> value, objc_AssociationPolicy policy)</span><br><span class="line"><span class="comment">// 获取关联的对象</span></span><br><span class="line"><span class="type">id</span> objc_getAssociatedObject(<span class="type">id</span> object, <span class="keyword">const</span> <span class="type">void</span> *key)</span><br><span class="line"><span class="comment">// 移除关联的对象</span></span><br><span class="line"><span class="type">void</span> objc_removeAssociatedObjects(<span class="type">id</span> object)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数解释</span></span><br><span class="line"><span class="comment">// id object：被关联的对象</span></span><br><span class="line"><span class="comment">// const void *key：关联的 key，要求唯一</span></span><br><span class="line"><span class="comment">// id value：关联的对象</span></span><br><span class="line"><span class="comment">// objc_AssociationPolicy policy：内存管理的策略</span></span><br></pre></td></tr></table></figure>

<p><strong>例子：</strong></p>
<figure class="highlight objectivec"><figcaption><span>Objective-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">///-----------------------</span></span><br><span class="line"><span class="comment">/// NSObject+BRModel.h</span></span><br><span class="line"><span class="comment">///-----------------------</span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> (<span class="title">BRModel</span>)</span></span><br><span class="line"><span class="comment">/** 1.获取类的属性列表数组 */</span></span><br><span class="line">+ (<span class="built_in">NSArray</span> *)br_objectProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 2.字典转模型：给定一个字典，返回 self 类对应的模型对象 */</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)br_objectWithDictionary:(<span class="built_in">NSDictionary</span> *)dict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///-----------------------</span></span><br><span class="line"><span class="comment">/// NSObject+BRModel.m</span></span><br><span class="line"><span class="comment">///-----------------------</span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;NSObject+BRModel.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="type">char</span> *kPropertyListKey = <span class="string">&quot;kPropertyListKey&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">BRModel</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 所有字典转模型框架的核心算法（这里只是实现简单的字典转模型。扩展：要考虑字典的嵌套）</span></span><br><span class="line"><span class="comment">/// 在字典转模型框架中，如果字典嵌套层次结构非常深，框架由于利用递归实现转换，内存消耗大，执行性能不好！</span></span><br><span class="line"><span class="comment">/// YYModel 因为功能简单（在功能上做了取舍，满足大多数情况下使用），所以速度快！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.动态（通过 Runtime 形式）获取类的属性列表</span></span><br><span class="line">+ (<span class="built_in">NSArray</span> *)br_objectProperties &#123;</span><br><span class="line">    <span class="comment">/// 1.利用“关联对象”获取属性的值，如果有，直接返回！(这里获取对象类似于懒加载，只不过分类里面不能创建属性，用“关联对象”来替代)</span></span><br><span class="line">    <span class="comment">/// 这里使用“关联对象”其目的是提高效率（懒加载思想）！</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  获取关联对象（相当于属性的 getter 方法）</span></span><br><span class="line"><span class="comment">     *  参数1：对象</span></span><br><span class="line"><span class="comment">     *  参数2：动态添加属性的 key（相当于属性名）</span></span><br><span class="line"><span class="comment">     *  返回值：动态添加的“属性值”</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">NSArray</span> *pList = objc_getAssociatedObject(<span class="keyword">self</span>, kPropertyListKey);</span><br><span class="line">    <span class="keyword">if</span> (pList != <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> pList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  调用运行时方法，获取类的属性列表</span></span><br><span class="line"><span class="comment">     *  class_copyPropertyList():   获取类的 属性 列表方法</span></span><br><span class="line"><span class="comment">     *  class_copyIvarList():       获取类的 成员变量 列表方法</span></span><br><span class="line"><span class="comment">     *  class_copyMethodList():     获取类的 方法 列表方法</span></span><br><span class="line"><span class="comment">     *  class_copyProtocolList():   获取类的 协议 列表方法</span></span><br><span class="line"><span class="comment">     *  参数1：要获取的类</span></span><br><span class="line"><span class="comment">     *  参数2：类属性的个数指针（&amp;属性个数）</span></span><br><span class="line"><span class="comment">     *  返回值：所有属性的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 获取属性数组（这里 objc_property_t 接收的是数组，需要带 *）</span></span><br><span class="line">    objc_property_t *properties = class_copyPropertyList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;count);</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *propertyNameArr = [[<span class="built_in">NSMutableArray</span> alloc]init];</span><br><span class="line">    <span class="comment">// 遍历属性数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="comment">// 1&gt; 获取属性(C 语言中的结构体指针，通常不需要带 *)</span></span><br><span class="line">        objc_property_t property = properties[i];</span><br><span class="line">        <span class="comment">// 2&gt; 从 property 中获取属性的名称（即C语言字符串）</span></span><br><span class="line">        <span class="keyword">const</span> <span class="type">char</span> *cName = property_getName(property);</span><br><span class="line">        <span class="comment">// 将C语言字符串转成 OC 字符串</span></span><br><span class="line">        <span class="built_in">NSString</span> *name = [<span class="built_in">NSString</span> stringWithCString:cName encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">        <span class="comment">// 3&gt; 添加 OC 属性名到数组</span></span><br><span class="line">        [propertyNameArr addObject:name];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 释放数组（C 语言中用到了包含 create/copy/...的方法，都需要释放内存）</span></span><br><span class="line">    free(properties);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  2.利用“关联对象”保存属性的值</span></span><br><span class="line"><span class="comment">     *  参数1：self 对象</span></span><br><span class="line"><span class="comment">     *  参数2：动态添加属性的 key（相当于属性名）</span></span><br><span class="line"><span class="comment">     *  参数3：动态添加属性的值</span></span><br><span class="line"><span class="comment">     *  参数4：对象的引用关系（类似于属性中的 nonatomic,assign/copy/retain）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, kPropertyListKey, [propertyNameArr <span class="keyword">copy</span>], OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [propertyNameArr <span class="keyword">copy</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.字典转模型：给定一个字典，返回 self 类对应的模型对象</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)br_objectWithDictionary:(<span class="built_in">NSDictionary</span> *)dict &#123;</span><br><span class="line">    <span class="type">id</span> object = [[<span class="keyword">self</span> alloc]init];</span><br><span class="line">    <span class="comment">// 获取当前对象的属性列表</span></span><br><span class="line">    <span class="comment">// 优化：使用关联对象 pList 的值保存起来，不用每次都去获取</span></span><br><span class="line">    <span class="built_in">NSArray</span> *pList = [<span class="keyword">self</span> br_objectProperties];</span><br><span class="line">    <span class="comment">// 1&gt; 遍历属性数组</span></span><br><span class="line">    [pList enumerateObjectsUsingBlock:^(<span class="type">id</span>  _Nonnull pName, <span class="built_in">NSUInteger</span> idx, <span class="type">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">        <span class="type">id</span> pValue = [dict objectForKey:pName];</span><br><span class="line">        <span class="comment">// 使用 KVC 给对象属性赋值</span></span><br><span class="line">        [object setValue:pValue forKey:pName];</span><br><span class="line">    &#125;];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    // 2&gt; 遍历字典</span></span><br><span class="line"><span class="comment">    [dict enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull value, BOOL * _Nonnull stop) &#123;</span></span><br><span class="line"><span class="comment">        if ([pList containsObject:key]) &#123;</span></span><br><span class="line"><span class="comment">            // 使用KVC给对象属性赋值</span></span><br><span class="line"><span class="comment">            [object setValue:value forKey:key];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;];</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h3 id="2、方法交换（黑魔法）"><a href="#2、方法交换（黑魔法）" class="headerlink" title="2、方法交换（黑魔法）"></a>2、方法交换（黑魔法）</h3><p>下面就是 runtime 的重头戏了，被称作黑魔法的方法交换 Swizzling。交换方法是在 method_exchangeImplementations 里发生的。</p>
<p>使用 Swizzling 的过程中要注意两个问题：</p>
<p>Swizzling 要在 +load 方法中执行</p>
<p>运行时会自动调用每个类的两个方法，+load 与 +initialize。</p>
<p>+load 会在 main 函数之前调用，并且一定会调用。</p>
<p>+initialize 是在第一次调用类方法或实例方法之前被调用，有可能一直不被调用。</p>
<p>一般使用 Swizzling 是为了影响全局，所以为了方法交换一定成功，Swizzling 要放在 +load 中执行。</p>
<p>Swizzling 要在 dispatch_once 中执行</p>
<p>Swzzling 是为了影响全局，所以只让它执行一次就可以了，所以要放在 dispatch_once 中。</p>
<p>例子：</p>
<figure class="highlight objectivec"><figcaption><span>Objective-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">///-----------------------</span></span><br><span class="line"><span class="comment">/// UIImageView+BRAdd.h</span></span><br><span class="line"><span class="comment">///-----------------------</span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIImageView</span> (<span class="title">BRAdd</span>)</span></span><br><span class="line">- (<span class="type">void</span>)br_setImage:(<span class="built_in">UIImage</span> *)image;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///-----------------------</span></span><br><span class="line"><span class="comment">/// UIImageView+BRAdd.m</span></span><br><span class="line"><span class="comment">///-----------------------</span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;UIImageView+BRAdd.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIImageView</span> (<span class="title">BRAdd</span>)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  load 方法 会在类第一次加载的时候（类被加载到运行时的时候）被调用</span></span><br><span class="line"><span class="comment"> *  调用的时间比较靠前，适合在这个方法里做方法交换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="type">void</span>)load &#123;</span><br><span class="line">    <span class="comment">// 方法交换应该被保证，在程序中只会执行一次</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        <span class="comment">// 1.获取 UIImageView 类的实例方法 setImage:</span></span><br><span class="line">        Method originalMethod = class_getInstanceMethod([<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(setImage:));</span><br><span class="line">        <span class="comment">// 2.获取 UIImageView 类的实例方法 br_setImage: （这个方法本身定义在分类中，所以能获取到）</span></span><br><span class="line">        Method swizzledMethod = class_getInstanceMethod([<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(br_setImage:));</span><br><span class="line">        <span class="comment">// 3.交换方法 setImage: 和 br_setImage:</span></span><br><span class="line">        method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当在其它位置调用 setImage: 方法时，就会自动调用 br_setImage: 方法</span></span><br><span class="line">- (<span class="type">void</span>)br_setImage:(<span class="built_in">UIImage</span> *)image &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%s&quot;</span>, __FUNCTION__);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里我们可以添加自己想添加的内容...</span></span><br><span class="line">    <span class="comment">// 调整图片大小：生成一张和 imageView 一样大的图片</span></span><br><span class="line">    <span class="built_in">UIImage</span> *newImage = [<span class="keyword">self</span> newImage:image size:<span class="keyword">self</span>.bounds.size];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用系统默认的 setImage:方法</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注意：交换了方法（互换身份），这时候调用自己，看起来像是死循环，但是其实自己的实现已经被替换了</span></span><br><span class="line"><span class="comment">     *  调用系统的 setImage:方法时，会执行 br_setImage:方法</span></span><br><span class="line"><span class="comment">     *  调用 br_setImage:方法时，会执行系统的 setImage:方法（要注意区分！）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    [<span class="keyword">self</span> br_setImage:newImage];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新生成指定大小的图片</span></span><br><span class="line">- (<span class="built_in">UIImage</span> *)newImage:(<span class="built_in">UIImage</span> *)image size:(<span class="built_in">CGSize</span>)size &#123;</span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(size, <span class="literal">YES</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 重新绘制图片</span></span><br><span class="line">    [image drawInRect:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, size.width, size.height)];</span><br><span class="line">    <span class="comment">// 取得结果</span></span><br><span class="line">    <span class="built_in">UIImage</span> *newImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="comment">// 关闭上下文</span></span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">    <span class="keyword">return</span> newImage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展：方法交换还有不少应用场景，比如记录页面被点开的次数：只要在 UIViewController 的分类的 +load 中交换 viewDidAppear 方法，在交换的方法中添加记录代码就可以了。</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>OC</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS - 如何把 Xcode 打印出来的 UTF-8 格式字符变成汉字？</title>
    <url>//ios-utf8-to-chinese.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　下午在测试一个语音 SDK 的时候，发现打印出来字典里的中文汉字都显示为 UTF-8 的字符，百度了一下解决办法，发现大都是用给 <code>NSArray</code> 和 <code>NSDictionary</code> 创建分类的方法解决的，但是很多文章可能是写的匆忙，或者是复制粘贴的，不够美观和一目了然。而且创建分类的方式，对比我以前用小码哥的一个类来说，多了一个 <code>.h</code> 文件，不够精简。所以就做个笔记，留作备用。<br>　　首先新建一个 OC 的 <code>.m</code> 文件，不知道怎么新建也可以直接，创建普通的 <code>UIVIew</code> 的类，把 <code>.h</code> 删除，把 <code>.m</code> 所有除注释以外代码删除，修改成如下文所示一致就好。
　　</p>
<figure class="highlight objectivec"><figcaption><span>Objective-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSDictionary</span> (<span class="title">Log</span>)</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)descriptionWithLocale:(<span class="type">id</span>)locale</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *string = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开头有个&#123;</span></span><br><span class="line">    [string appendString:<span class="string">@&quot;&#123;\n&quot;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历所有的键值对</span></span><br><span class="line">    [<span class="keyword">self</span> enumerateKeysAndObjectsUsingBlock:^(<span class="type">id</span> key, <span class="type">id</span> obj, <span class="type">BOOL</span> *stop) &#123;</span><br><span class="line">        [string appendFormat:<span class="string">@&quot;\t%@&quot;</span>, key];</span><br><span class="line">        [string appendString:<span class="string">@&quot; : &quot;</span>];</span><br><span class="line">        [string appendFormat:<span class="string">@&quot;%@,\n&quot;</span>, obj];</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 结尾有个&#125;</span></span><br><span class="line">    [string appendString:<span class="string">@&quot;&#125;&quot;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找最后一个逗号</span></span><br><span class="line">    <span class="built_in">NSRange</span> range = [string rangeOfString:<span class="string">@&quot;,&quot;</span> options:<span class="built_in">NSBackwardsSearch</span>];</span><br><span class="line">    <span class="keyword">if</span> (range.location != <span class="built_in">NSNotFound</span>)</span><br><span class="line">    [string deleteCharactersInRange:range];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> string;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSArray</span> (<span class="title">Log</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)descriptionWithLocale:(<span class="type">id</span>)locale</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *string = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开头有个[</span></span><br><span class="line">    [string appendString:<span class="string">@&quot;[\n&quot;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历所有的元素</span></span><br><span class="line">    [<span class="keyword">self</span> enumerateObjectsUsingBlock:^(<span class="type">id</span> obj, <span class="built_in">NSUInteger</span> idx, <span class="type">BOOL</span> *stop) &#123;</span><br><span class="line">        [string appendFormat:<span class="string">@&quot;\t%@,\n&quot;</span>, obj];</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 结尾有个]</span></span><br><span class="line">    [string appendString:<span class="string">@&quot;]&quot;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找最后一个逗号</span></span><br><span class="line">    <span class="built_in">NSRange</span> range = [string rangeOfString:<span class="string">@&quot;,&quot;</span> options:<span class="built_in">NSBackwardsSearch</span>];</span><br><span class="line">    <span class="keyword">if</span> (range.location != <span class="built_in">NSNotFound</span>)</span><br><span class="line">    [string deleteCharactersInRange:range];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>GitHub 地址：<a href="https://github.com/kaaaaai/Code-Fragmentation/blob/master/CodeFragmentation/CodeFragmentation/Other/Foundation%2BLog.m">NSDictionary+Log.m</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>OC</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>每周总结 - 0803</title>
    <url>//weekly-summary-190803.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　匆匆一周过去，回想起来，值得一提的也没有什么，有些做一天和尚撞一天钟的碌碌，但平静心情总结一下，虽然碌碌倒也不是无为。<br>　　先聊聊天气，本周阴天占比较多，可能是到了月末月初交接，股市大盘这几日也不断波动，阴晴不定。心情也时好时坏，说话的欲望被沉默吞并，鞋子在几场大雨里被反复浸成船，某天晚上下班，看见飞机穿过乌云，开着大灯，像吸尘器把乌云吸走，留下一块一块白色的光道，看起来就像 UFO 飞过。想起星空、宇宙和不明飞行物，心情似乎就好了一点。<br>　　上周工作量增多初见端倪，本周的端倪又多了一些，部门的项目慢慢多了起来，虽然总结工作内容也就是为了需求搭建功能和解决 bug，但量一多了，难免有些焦头烂额。想打个鸡蛋在额头上做荷包蛋——哈。<br>　　我有没有说过有时候想到一些东西，但最后总是发现别人早就已经有现成的理论学说在很早就已经出来了。如果没有，那我再说一遍，有时候我心血来潮想到一些我自以为特别的想法，比如成功学是用来淘汰社会上平庸但又野心勃勃的年轻人的。然后一翻书——忘记谁谁谁了，就说过差不多的话。除此以外，最近还发现，总是在一件事发生很久以后才想起来最好的应对方式——包括话语，态度，行为之类的应对。不过想想这可能是人类的通病，也可能是人们产生后悔的根源。也就释怀了一点点了。
　　
　　　　</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Live</tag>
        <tag>Study</tag>
        <tag>Work</tag>
      </tags>
  </entry>
  <entry>
    <title>每周总结 - 0729</title>
    <url>//weekly-summary-190729.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　小时候在酒桌上喝酒，总在大人们的撺掇向一些长辈敬酒，熟面孔多的时候也会童言无忌说上几句叔叔伯伯生意兴隆万事大吉，但生面孔多的时候心里也会有点害羞的不情愿，到了后来念书走上社会，面对学校老师职场前辈，起初也会有一些真心实意的感谢祝酒词。但是后来觥筹交错多了，渐渐习惯了这种场面，说不走心的祝福，妥协于气氛，绞尽脑汁，生编硬造一些词来祝酒，偶尔心里也会回忆起小时候被长辈逼迫下情不由衷的别扭。但时间长了，这种感觉也慢慢淡了。<br>　　<span id="more"></span><br>　　我想走上社会以后的变化，可能就是由这些劝服自己开口讲话、劝服自己相信自己说的话的一个又一个瞬间所构成的，向外界的诱惑，向自己的欲望低头的那些瞬间，就好像温水煮青蛙，但一点一点把温度加高的人却是自己。坚持做自己真的是一件很难的事，就像一个学轮滑的新手，要在不断的摇摆中稳定自己，视线所及，还要注意前方是否有危险。总是想起那句：</p>
<blockquote>
<p>　　世界上只有一种真正的英雄主义，就是认清了生活的真相后还依然热爱它。</p>
</blockquote>
<p>　　做自己很难，认清做自己很难之后还可以继续坚持做自己更是难上加难。可能这是当代年轻人的通病吧，能清除精确的把握到自己的局限，但又不知道往哪里使劲可以跳出这个局限。在脑袋上绑头带给自己加油鼓劲，买几斤心灵鸡汤的书给自己喘口气，但如果这些是治标又治本的方法，也就不至于再发出这些疑问了。<br>　　跳过这个问题。本周工作上接手了一个新的项目，里面有用到跨平台技术，native，不过没空仔细研究，我负责的部分仍然是传统的 <code>OC</code> 代码，但可能是因为用到了 native 技术，所以项目的结构也和以往有些不同，有一点挑战性，但深入看了整个项目的代码以后，发现其实也万变不离其宗，虽然他重写了 <code>Appdelegate</code> 类，导致我在前期不知道根控制器被设置成了哪个，但是搜索 <code>applicationDidEnterBackground</code> 方法就立马找到了这个重写的类，但是对于这个重写以后的类没有 <code>.h</code> 文件，还是有点迷惑，可能是和他这个项目机制有关系。<br>　　另外有个体会就是，可能是经手的项目多了，经验上来了，以前遇到比较麻烦，看不懂的代码，第一反应是焦灼烦闷，但现在平静多了，可以保持正常水平去看问题，有时也能超水平发挥，举一反三的看，把其他项目都放在眼底下对比各自不同和相同部分，用为什么在 A 项目不出现问题，但在 B 项目会出现问题的思路去解决问题。<br>　　周末部门团建去山庄玩了，心情和风景都很不错。不过团建虽说是缓和工作压力，缓解部门同事平常工作时的紧张气氛，增进感情。但效果不是很好，之前讨厌的人还是一样惹人讨厌，而且其他的同事似乎也有同样的感觉，甚至比我有过之而无不及，而在这种情况下我就更加心安理得保持我的讨厌，不会再试图反思是不是自己太小家子气。<img data-src="https://s2.ax1x.com/2019/07/31/eY3kmn.jpg"><img data-src="https://s2.ax1x.com/2019/07/31/eY3iOs.jpg"><img data-src="https://s2.ax1x.com/2019/07/31/eY3Pyj.jpg"><img data-src="https://s2.ax1x.com/2019/07/31/eY3ClQ.jpg"><br>　　这周还去看了哪吒，非常不错，虽然剧情人物刻画的较其他剧情片都很脸谱化，但对于哪吒闹海本身的故事来说，算是跳出了自己的框架，取消了自刎情节，父子之间变得温情脉脉，取消了屠龙情节，敖丙哪吒之间变得温情脉脉。似乎唯一真正的大反派就只有一个申公豹，申公豹太惨了，同情申公豹。<br>　　以上。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Live</tag>
        <tag>Study</tag>
        <tag>Work</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS - Xcode 自动生成注释文档</title>
    <url>//automatically-generates-annotation-documents.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>自动生成注释文档有三种方式:</p>
<ul>
<li><a href="http://www.stack.nl/~dimitri/doxygen/index.html">docxygen</a></li>
<li><a href="http://developer.apple.com/opensource/tools/headerdoc.html">headdoc</a></li>
<li><a href="http://gentlebytes.com/appledoc/">appledoc</a></li>
</ul>
<p><strong>docxygen</strong><br>docxygen 感觉是这 3 个工具中支持语言最多的，可以配置的地方也比较多。我大概看了一下文档，觉得还是比较复杂，而且默认生成的风格与苹果的风格不一致。就去看后面 2 个工具的介绍了。另外，它虽然是开源软件，但是没有将源码放到 github 上让我感觉这个工具的开发活跃度是不是不够。</p>
<p><strong>headerdoc</strong><br>headerdoc 是 xcode 自带的文档生成工具。在安装完 xcode 后，就可以用命令行：headdoc2html + 源文件名 来生成对应的文档。我个人试用了一下，还是比较方便的，不过headerdoc的注释生成规则比较特别，只生成以 &#x2F;*! *&#x2F; 的格式的注释。还有一个缺点是每个类文件对应一个注释文件，没有汇总的文件，这点感觉有点不爽。</p>
<p><strong>appledoc</strong><br>appledoc 是在 stackoverflow 上被大家推荐的一个注释工具。比起以上两个工具，他的优点有：<br>它默认生成的文档风格和苹果的官方文档是一致的，而 doxygen 需要另外配置。<br>appledoc 就是用 objective-c 生成的，必要的时候调试和改动也比较方便。<br>可以生成 docset，并且集成到 xcode 中。这一点是很赞的，相当于在源码中按住 option 再单击就可以调出相应方法的帮助。<br>appledoc 源码在 github 上，而 doxygen 在 svn 上。我个人比较偏激地认为比较活跃的开源项目都应该在 github 上。<br>相对于 headerdoc，它没有特殊的注释要求，可以用&#x2F;** <em>&#x2F; 的格式，也可以兼容&#x2F;</em>! *&#x2F;的格式的注释，并且生成的注释有汇总页面。</p>
<h2 id="appledoc-的安装"><a href="#appledoc-的安装" class="headerlink" title="appledoc 的安装"></a>appledoc 的安装</h2><p>那么简单介绍一下如何安装 appledoc，安装非常简单，只需要 2 步：</p>
<figure class="highlight bash"><figcaption><span>Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/tomaz/appledoc.git</span><br><span class="line"><span class="built_in">cd</span> appledoc</span><br><span class="line"><span class="built_in">sudo</span> sh install-appledoc.sh</span><br></pre></td></tr></table></figure>
<p>当出现 INSTALL SUCCEEDED 时说明成功了，你也可以用 appledoc –version 查看验证下。如果可以正常执行下面指令则证明安装成功，否则需要查看报错说明。</p>
<figure class="highlight bash"><figcaption><span>Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看版本号</span></span><br><span class="line">$ appledoc --version</span><br><span class="line"><span class="comment"># 查看更多文档信息</span></span><br><span class="line">$ appledoc --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<p><img data-src="https://s2.ax1x.com/2019/07/26/enQnXj.jpg"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>1、使用终端进入代码目录<br>直接拖拽我们的工程文件夹到终端，然后按回车键<br>或者使用 cd+”项目名字目录”，然后按回车键<br>以上两种方法都可以进入到我们的工程根目录<br>2、指令用法及参数说明</p>
<figure class="highlight bash"><figcaption><span>Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参考指令写法1(不生成docset文件)</span></span><br><span class="line">$ appledoc --no-create-docset --output ./doc --project-name <span class="string">&quot;QQ&quot;</span> --company-id <span class="string">&quot;com.tencent.QQ&quot;</span> --project-company <span class="string">&quot;Tencent Inc.&quot;</span> /Users/superdanny/Desktop/QQ-Project/QQ/Views</span><br><span class="line"><span class="comment"># 参考指令写法2(不生成docset文件，参数使用“=”等号写法)</span></span><br><span class="line">$ appledoc --no-create-docset --output=<span class="string">&quot;./doc&quot;</span> --project-name=<span class="string">&quot;QQ&quot;</span> --company-id=<span class="string">&quot;com.tencent.QQ&quot;</span> --project-company=<span class="string">&quot;Tencent Inc.&quot;</span> /Users/superdanny/Desktop/QQ-Project/QQ/Views</span><br><span class="line"><span class="comment"># 参考指令写法3(生成docset文件并指定生成路径)</span></span><br><span class="line">$ appledoc --output ./doc --project-name <span class="string">&quot;QQ&quot;</span> --company-id <span class="string">&quot;com.tencent.QQ&quot;</span> --project-company <span class="string">&quot;Tencent Inc.&quot;</span> /Users/superdanny/Desktop/QQ-Project/QQ/Views --docset-install-path ./doc</span><br><span class="line"><span class="comment"># 以上都是扫描指定目录下的文件，如果想扫描当前目录所有文件，只需要将指定目录换成&quot;.&quot;即可</span></span><br><span class="line">$ appledoc --no-create-docset --output=<span class="string">&quot;./doc&quot;</span> --project-name=<span class="string">&quot;QQ&quot;</span> --company-id=<span class="string">&quot;com.tencent.QQ&quot;</span> --project-company=<span class="string">&quot;Tencent Inc.&quot;</span> .</span><br></pre></td></tr></table></figure>
<p><strong>参数说明</strong></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">–no-create-docset</td>
<td align="center">(选填参数)只生成html，不生成docset文件。如果需要生成，则去掉该参数即可</td>
</tr>
<tr>
<td align="center">–output</td>
<td align="center">(必填参数)生成结果输出路径，如“.&#x2F;doc”，会在工程目录下创建一个doc文件夹存放生成的文档。当然你可以指定一个完整的目录路径存放生成的文档</td>
</tr>
<tr>
<td align="center">–project-name</td>
<td align="center">(必填参数)工程名字，如“QQ”</td>
</tr>
<tr>
<td align="center">–project-company</td>
<td align="center">(必填参数)公司名字，如“Tencent Inc.”</td>
</tr>
<tr>
<td align="center">–company-id</td>
<td align="center">(选填参数)公司ID，如“com.tencent.QQ”，会生成文件名为companyID.projectName.docset的docset文件。如果不设置，则文件名为com.companyname.projectname.projectName.docset</td>
</tr>
<tr>
<td align="center">–docset-install-path</td>
<td align="center">(选填参数)生成docset文件的目录。如果此目录不设置，默认会在~&#x2F;Library&#x2F;Developer&#x2F;Shared&#x2F;Documentation&#x2F;DocSets&#x2F;目录生成</td>
</tr>
<tr>
<td align="center">&#x2F;Users&#x2F;superdanny&#x2F;Desktop&#x2F;QQ-Project&#x2F;QQ&#x2F;Views</td>
<td align="center">扫描对应路径下的类，如果想扫描当前目录所有文件，则将此路径换成.即可</td>
</tr>
</tbody></table>
<p>如果是生成 docset 文件，则 <code>--output</code> 参数对应的目录会生成一个 docset-installed.txt 文件，里面记录 docset 存放的目录。<br>如果是不生成 docset 文件，则 <code>--output</code> 参数对应的目录会生成html文件。直接打开 index.html 文件即可查看。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>iOS</tag>
        <tag>Swift</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>每周总结 - 0722</title>
    <url>//weekly-summary-190722.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　上周六因为一个项目的迭代，所以写周记的时间就被冲到这个礼拜周一写了。其实项目本身更新的功能很容易解决，但是更多的时间是在解决之前开发人员所产生的 bug，解决 bug 的过程比较麻烦和消耗时间，但是当一个 bug 解决以后，往往能获得一点新的知识。比如通过侧滑手势的增加，在手势结束后时间 layerAnimation 的缩放动画，可以让整个侧滑过程看上去更生动。还有手势操作在继承关系中的响应问题，其他的问题不太具有普遍性，只会在单个项目中出现，所以略过不提。<br>　　周二的时候换了办公场所，是之前提到的兄弟公司，据说之后我们部门也可能整体搬迁过来，只不过现在算是临时支援。兄弟公司，离住的地方近了一些，人也多了一下，周围的环境也比较悠闲，早上傍晚都有老头老太或者妈妈带小朋友在遛弯，虽然他们在遛弯的时候，我在上班，但我觉得他们背着手优哉游哉的样子，在一定程度上缓解了我紧绷的情绪。<br>　　周六和同事去游泳，算上这次，是我第二次正经去泳池学习游泳了，进度不谦虚的讲，可以说是一日千里。第一次下水，克服了在水里的恐惧，可以在泳池中直立起来，第二次下水，虽然还不会换气，但是已经可以一口气用蛙泳的姿势游十来米了。按照这个速度，再来几次，不日将可以参加国家队~哈哈。<br>　　继续看陈丹青的《笑谈大先生》，看陈从鲁迅的朋友，鲁迅的死亡各个角度写，写的很好，我没什么想说的。<br>　　一个礼拜都没怎么学习，没怎么画画，周末去图书馆看了两章数据库的内容，觉得很充实，我想我已经从上个礼拜的懈怠情绪出来了。下个礼拜希望可以表现得更好。
　　</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Live</tag>
        <tag>Study</tag>
        <tag>Work</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS - Xcode Plugin 调研和使用</title>
    <url>//xcode-plugin-research.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　Xcode 升级到 8.x 以上版本后为了提升安全性, 防止 <code>XcodeGhost</code> 事件的发生, 添加了代码签名机制, 所以以往我们那些用的很顺手的 Xcode 插件一下子统统都被打入冷宫。这种情况下，我们想要重新使用插件，我们应该怎么做呢？<br>　　首先我们要使用插件第一步是给 Xcode 重新签名, 在签名前建议备份一个纯净 Xcode 做 App 打包发布用(应用程序目录下复制一个即可)。</p>
<h3 id="一、Xcode-重签名以使用插件"><a href="#一、Xcode-重签名以使用插件" class="headerlink" title="一、Xcode 重签名以使用插件"></a>一、Xcode 重签名以使用插件</h3><p>　　打开 Keychain Access 之后如图操作，选中 钥匙串访问-&gt;证书助理-&gt;创建证书:<br><img data-src="https://s2.ax1x.com/2019/07/17/Zqz7RI.jpg"><br><img data-src="https://s2.ax1x.com/2019/07/17/Zqz5IH.jpg"></p>
<p>　　之后打开 终端&#x2F;Terminal，输入：</p>
<figure class="highlight bash"><figcaption><span>Terminal</span></figcaption><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> codesigner -f -s XcodeSigner /Applications/Xcode.app</span><br></pre></td></tr></table></figure>
<p>　　其中 <code>codesigner</code> 是上一步创建证书的名称，随后是要重签名使用插件的 Xcode 目录。</p>
<p>　　经过一段漫长等待后, 重启 Xcode, 选择 LoadBundle。Xcode 已经可以使用插件啦。</p>
<h3 id="二、插件使用总结"><a href="#二、插件使用总结" class="headerlink" title="二、插件使用总结"></a>二、插件使用总结</h3><p>　　随着 Xcode 的迭代，一部分插件实现的功能已经被 集成进 Xcode 里面了，比如很有名的注释插件 VVDocumenter，和一些代码补全插件等等。另一部分由于缺少维护和 Xcode 本身的机制，而导致插件使用不太方便，造成使用插件的投入成本大大增加。之前在为了给一个马甲包增加垃圾代码，我用上一段的方法成功安装使用过插件 <code>Alcatraz</code>，作为一个插件管理工具，它内部指向的其他插件已经很多不太兼容新版的 Xcode 了，而他本身最新的更新节点也停留在两年前的状态。而在重启 Xcode 后，安装的 <code>Alcatraz</code>，也消失不见了。而在最新的 Xcode10 上用上面那个方法尝试安装代码格式化插件 —— <a href="https://github.com/V5zhou/ZZXcodeFormat">ZZXcodeFormat</a>，虽然重启应用后，也跳出了 <code>Load Bundle</code> 的提示框，也点击确定加载，但打开 Xcode 后却没在相应的位置找到插件使用项目。不确定是不是新版 Xcode 所影响导致的。但可以看到，在官方不支持的情况下，使用插件是一个耗时又耗力的事。<br>　　而在调研的过程中，我发现了一个使用苹果官方提供的插件机制（Xcode Source Editor Extension）编写的插件——<a href="https://github.com/SSBun/FlyCoding">FlyCoding</a>，这个插件的主要功能是，通过特殊语法来快速的生成你想要的 Swfit &#x2F; Objective-C 代码，比如这句代码：</p>
<figure class="highlight swift"><figcaption><span>Swift</span></figcaption><table><tr><td class="code"><pre><span class="line">pv.<span class="type">UIImageView</span></span><br></pre></td></tr></table></figure>
<p>通过插件功能会变成这样的代码：</p>
<figure class="highlight swift"><figcaption><span>Swift</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> <span class="operator">&lt;</span>#name#<span class="operator">&gt;</span>: <span class="type">UIImageView</span></span><br></pre></td></tr></table></figure>
<p>　　实际体验了一下，觉得有点鸡肋，虽然他可以提供一种便捷的方式解决需要重复编写大量 UI 空间和约束的代码的问题，但是使用它却需要记住另一种语法，而且这种语法只能对照 GitHub 仓库来实现，插件本身并不提供自动补全功能。<br>　　虽然这个插件不怎么实用，但通过这个插件让我了解到了苹果官方插件机制（Xcode Source Editor Extension）所能提供的功能，具体有以下：</p>
<ul>
<li>获取 Xcode 正在编辑的文本</li>
<li>获取所有的选中区域</li>
<li>替换 Xcode 正在编辑的文本</li>
<li>选中 Xcode 正在编辑的文本</li>
<li>在 Xcode 的 Editor 菜单里面给你的插件生成一个子菜单，用于调用插件</li>
<li>可以在 Xcode 的 Key Binding 里面给插件分配一个快捷键</li>
</ul>
<h3 id="三、使用苹果官方所允许的插件"><a href="#三、使用苹果官方所允许的插件" class="headerlink" title="三、使用苹果官方所允许的插件"></a>三、使用苹果官方所允许的插件</h3><p>　　使用苹果官方所允许的插件主要有两种方式，一种是在苹果应用商店下载，Xcode 里有快捷入口<br><img data-src="https://s2.ax1x.com/2019/07/17/ZqzTJA.jpg"><br>　　点击可以直接进入。</p>
<p>　　另一种方式是下载 GitHub 上别人分享的插件，举个例子，比如我现在安装一个代码格式化插件：<a href="https://github.com/mapbox/XcodeClangFormat">XcodeClangFormat</a>。</p>
<p>1、下载源码运行，或 dmg 安装包。<br>2、到 系统设置-&gt;插件 中打开。<br><img data-src="https://s2.ax1x.com/2019/07/17/Zqzoid.jpg"><br><img data-src="https://s2.ax1x.com/2019/07/17/Zqz4de.jpg"><br>3、然后进入 Xcode，你就可以看到插件了。<br><img data-src="https://s2.ax1x.com/2019/07/17/ZqzHzt.jpg"></p>
<p><strong>推荐两个插件：</strong></p>
<p><a href="https://github.com/qfish/XAlign">XAlign</a>：代码对齐插件，主要用于宏定义、属性群、代码内等号对齐三种代码对齐。<br><a href="https://github.com/mapbox/XcodeClangFormat">XcodeClangFormat</a>：代码格式化插件，支持定义代码格式。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>iOS</tag>
        <tag>Swift</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>每周总结 - 0713</title>
    <url>//weekly-summary-190713.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　周记这个 flag 立了已有三个月了，体验一般，虽然每个礼拜确实有回顾和反思，但实际起到的作用大概还是走马观花多一些，而且营养也不是很大，不过孰好孰坏现在也说不清，就像之前写了几年的日记，后来骤然放下，对我的影响也微乎其微。但当时留下来的日记在时间过去许久以后的现在发挥的作用其实远大于在当时所发挥的作用。所以我想周记在我还没颓废还可以写的时候，能写一些就写一些吧。<br>　　上周有一点点懈怠，预计好的学习计划都 GG 了，整理了一下所有课程还没看到部分总共还有三百多页，上个礼拜本来想至少也要看完三分之一的，但发现注意力很容易被分散，周末上课也是，老师讲着讲着，忽然我就想到其他事情去，然后思绪转回来想我不应该这样，有没有什么软件可以帮人集中注意力，记得有一个叫 forest，然后就拿出手机搜索，一点一点开起小差来。我想大概是学习步入正轨已经很长一段时间了，刚开始的热情有点消退，学习又是一个很难在短期内能收到回馈的一件苦差，所以难免心生懈怠。想到这，不由恨从心起，学习真是个王八蛋。不过即使这样他再王八蛋，也是个可以提升我的好王八蛋。所以下个礼拜目标继续把教材啃完。<br>　　本周看了一部电影《摇摆狂潮》，恶，很烂不讲。周三的时候忽然心血来潮看起了陈丹青的《笑谈大先生：七讲鲁迅》，还不错，如果看做是一本鲁迅研究的书，切入点很别树一格，然后发现陈丹青的叙事语气和木心的叙事语气很像，不过对一点不意外因为之前知道他们的师徒关系，但看到更多的是，陈丹青好像真的很推崇他的老师。<br>　　工作上的事本周都比较平，都是一些难度不是很高的任务，还有一些要和人沟通推进的事，但对我来说也不在话下，之前可能会因为对方不配合或敷衍的态度可能会心里不通畅，但现在已经好多了，大都以公事公办的态度切入对话。不过也在心里叹一口气，诶，我也慢慢变成了一个不动声色的大人了。否则按照归来仍是少年的逻辑，这会我应该跨马横刀，头昂昂气扬扬送他一句去你妈的。<br>　　公司给我提薪的事总要有了阶段性的结果，不过具体还要下个礼拜确定，过程有些一波三折，甚至让我觉得是不是某种形式的敲打，甚至不抱很大希望了，不过就当好事多磨吧，中间琐碎就跳过不讲好了。
　　</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Live</tag>
        <tag>Study</tag>
        <tag>Work</tag>
      </tags>
  </entry>
  <entry>
    <title>每周总结 - 0706</title>
    <url>//weekly-summary-190706.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　每次有一些模棱两可想法的时候，都会在互联网上看到别人已经成体系的理论。这让我觉得虽然沙雕网友遍地走，睿智网友也不少。<br>　　本周依旧，忙碌的部分集中在头部，后半段的时候主要的都是一些琐碎的事，不过周四的时候针对当前项目的一个 bug，重写了部分逻辑。让我对加载 h5 页面的控件多了一些认识，还有手势响应链的理解，比如当前页面如果同时有侧滑返回手势和页面右滑手势时，两者在响应的优先级上，侧滑手势作为更底层的方法会先响应，当返回 <code>false</code> 时，页面右滑手势才会开始响应。虽然是个小知识点，但对于我理解系统继承类和系统代理实现有了更直观的认识，虽然一直有系统的类，和我们自己生成的类其实没什么差别的概念，只不过系统是封装起来，然后有很多父类方法，可以用在某些场景中解决问题。但是开发的时候有时也会有盲点，对于一些顽固，或者需要捆绑修改才能生效的地方总有黔驴技穷的心塞。<br>　　极客时间停在了项目开发的任务划分，也似乎因为停留太久，每次从头看都很难有一鼓作气看完的气力，也许也和我的拖延症有一些关系，因为画画认识一个网友，约好说互相鼓励，学习画画。最近几个礼拜互相交流进度，他佩服我自制力强，作息规律。但如人饮水，冷暖自知，我自制力强吗？不强，刚出新手村吧。这个礼拜线条练了两天，新的手绘课程算正式开始了，第一节课老师教人物描形，画草图，看着简单，但实际联系的时候也有些问题，用四边形概括人物轮廓，问题不到，但是画草图时，虽然老师也说不用太在意画的想不想，只要大致样子就行，但是在我刻意的临摹人物五官，想复原神态的时候总是画虎不成反类犬，而且画完总觉得整体看上去不够大气。<br>　　抽空看了一下最近很火的《长安十二时辰》，有马伯庸老师作品改编垫底，加上制作讲究，人物也都智商在线，确实不错。不过就是优酷的广告太过恶劣，每次看都要先看两分钟广告，中间还要穿插剧中人物的广告，而且发现现在网贷和网络理财的广告出现频率很高，想着一边是二十多岁花龄少女欠下巨额网贷无法偿还自杀身亡额新网，另一边这种网贷公司仍然没有管制的野蛮生长，越演越烈。不过除了心里嗤笑，也于事无补。还看了一部电影《恶人传》，警匪合作缉拿连环凶手的创意不错，但原本预期以为看《恶人传》的名字，以为故事里有价值观的分歧是会产生在黑帮老大和连环杀手身上，一种是因其为实现目的而表现成恶，另一种纯粹的恶，觉得应该会很有看头，所以剧情后面的发展虽然好看但是心里觉得有点不尽人意。而且连环凶手除了家庭合照在他的住处一闪而逝以外——也只是为了推进剧情确认身份，觉得他这个人物不是很饱满，甚至作为一个变态杀手，都有些脸谱化，被抓被打被判罪，都保持一种邪恶的狞笑，符合人们对变态杀手的直观印象，但没有跳出来。就像一个从其他地方摘录过来的人物剪贴。<br>　　周末照旧去上了课，信息资源管理已经上完了，然后发现有一门课，因为周六上午都没上课的原因，我自己才看了十几页书，嗯，下周要把重心放在学习上了。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Live</tag>
        <tag>Study</tag>
        <tag>Work</tag>
      </tags>
  </entry>
  <entry>
    <title>每周总结 - 0629</title>
    <url>//weekly-summary-190629.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　忽然觉得当咸鱼既容易又困难，只要找到某种自洽，并能说服自己。和朋友聊天问近况，他说頽了，放弃了。原因是看见未来无望，贫富阶级固定，咸鱼再难翻身。我想起另外一个朋友当咸鱼的理由是得过且过，活在当下，当前的快乐最重要。他们立足于现在和未来都给自己当咸鱼找到了理论支撑，这样没有心理压力的做咸鱼是容易的，但这些理由一点也都说服不了我，而在尝试做咸鱼失败之后我甚至可以立马找到理由开导自己，不一定每个人都有天赋做咸鱼，找到适合自己的方式生活就好。<br>　　所以事情陷入僵局，但回到起点看，问题倒不是要不要做咸鱼，又或者是怎么才能做咸鱼的问题。而是如何心无旁骛的在自己选择的路上走，不再三心二意的左右顾盼，不再对自己没得到的东西报有念念不忘的遗憾。之前在微博上看到一句，大概意思是人要是没有回忆，就可以像一台完美的机器一样一直合理运作。总是在空闲的时候，在脑子里猝尔闪烁，仔细想想，或许可以。但如果真是那样，彼时的我可能也不会有此时这种想法。<br>　　新开了一本书《迁徙的间隙》，作者只比我大一岁，文字很有灵气，对事物的描写所选择切入的视角也很有意思，前卫，故事的内核有点晦涩，有些地方也有一些流于雕琢的痕迹，但即便这样，也让我很羡慕，书里的那种文字，是我一直在尝试但却一直没写出来的东西。不过我也不是很气馁，因为想写的东西还有很多很多，作者也让我看到了一个可能性，就是坚持写，不断耕耘，总会有开花结果的一天。<br>　　素描课已经学到三棱体的画法了，透视打调子越来越熟练，但是图形线条好像越画越不直了，所以接下来的重心是回过头继续练基本功。英语单词的第一轮复习大概这周末可以结束，极客时间上的课有些懈怠，本周只看了一两节，中午本来预计拿来刷题的时间也被我用来看小说，所以下周要加油了~<br>　　工作上重头内容都在星期一一口气解决了，其他几天做的事除了修改 bug，都是一些重复性很强的事，所以本周比较清闲，值得记录的是，我用 UITextField 写登录界面的输入框，设置 right view 分别是下拉的箭头和隐藏显示密码的按钮，有个问题就是他们的位置都显示在 textfield 的边缘，显得很怪异。然后我试了 UITextField 的拓展，试把 right view 的 UIButton 改用 UIiamgeview，试了改变 left view，content view，right view 的边距来改变 right view 的位置，都没有起作用。最后起作用的是，改变 right view 的大小，使设置 right view 的 button 内部图片居中，起到位置移动的效果。<br>　　另外一个问题是用 swiftScan 现成的轮子生成二维码图片，用他自带的方法在中心位置添加 logo，会导致 logo 图片模糊，然后我就手动修改了添加 logo 的方法，解决。
　　
　　</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Live</tag>
        <tag>Study</tag>
        <tag>Work</tag>
      </tags>
  </entry>
  <entry>
    <title>每周总结 - 0622</title>
    <url>//weekly-summary-190622.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　上周博客落了一篇，说起来其实上周还没有本周忙，上周主要是测试兄弟公司开发的语音库，和针对新项目给出一个开发周期的预估，虽然一周都不是很忙，但是最后一天因为很久之前的老项目出了问题，需要维护，所以就没有抽出时间来写博客了。<br>　　本周主要在弄一个儿童绘本读物的 App，因为主要的几个页面，需求里都是用现成的内容 <code>SDK</code> 和 <code>h5</code> 实现，所以我的工作还是比较轻松的，因为这个原因也让我有空对自己的知识进行一个归纳整理，包括对一些模棱两可的知识点的提炼。<br>　　比如在新项目里的内容 <code>SDK</code> 的调用，他初始化之后，可以获取到一个控制器，在我的项目中使用，我是直接封装进 <code>tabbar</code> 中，类似于这样使用：</p>
<figure class="highlight swift"><figcaption><span>Swift</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> v1 <span class="operator">=</span> <span class="type">XYSDK</span>.obtainRootNavigationRootViewController() <span class="comment">//SDK 获取到的控制器</span></span><br><span class="line">v2.tabBarItem <span class="operator">=</span> <span class="type">ESTabBarItem</span>.<span class="keyword">init</span>(<span class="type">XYBasicContentView</span>(),title: <span class="string">&quot;听听&quot;</span>, image: <span class="type">UIImage</span>(named: <span class="string">&quot;icon_gang&quot;</span>), selectedImage: <span class="type">UIImage</span>(named: <span class="string">&quot;&quot;</span>)) <span class="comment">//定义 tabbarItem 显示文字和图片</span></span><br><span class="line"><span class="keyword">let</span> n1 <span class="operator">=</span> <span class="type">UINavigationController</span>.<span class="keyword">init</span>(rootViewController: v1)</span><br><span class="line"><span class="keyword">let</span> v2 <span class="operator">=</span> <span class="type">UIViewController</span>()</span><br><span class="line"><span class="keyword">let</span> n2 <span class="operator">=</span> <span class="type">UINavigationController</span>.<span class="keyword">init</span>(rootViewController: v2)</span><br><span class="line"><span class="operator">.....</span></span><br><span class="line"><span class="keyword">let</span> n5 <span class="operator">=</span> <span class="type">UINavigationController</span>.<span class="keyword">init</span>(rootViewController: v4)</span><br><span class="line">tabBarController.viewControllers <span class="operator">=</span> [n1, n2, n3, n4]</span><br></pre></td></tr></table></figure>
<p>　　但是有个问题就是 <code>tabbar</code> 的文字不显示为我设置的“看看”，而是显示为 SDK 内部自定义 “推荐”，放在之前我可能会抓耳挠腮的在 <code>tabbar</code> 的显示问题是不断尝试，但是基于对控制器的层级理解，我创建了一个集成于 <code>UIViewController</code> 的控制器界面，并在 <code>viewDidLoad</code> 中写入一下代码：</p>
<figure class="highlight swift"><figcaption><span>Swift</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> musicVC <span class="operator">=</span> <span class="type">XYDMSDK</span>.obtainRootNavigationRootViewController()</span><br><span class="line"><span class="keyword">self</span>.addChild(musicVC<span class="operator">!</span>)</span><br><span class="line"><span class="keyword">self</span>.view.addSubview(musicVC<span class="operator">!</span>.view)</span><br></pre></td></tr></table></figure>
<p>　　这段代码的含义也就是把一个控制器包装到另一个控制器内部，然后 <code>SDK</code> 获取到的控制器就不会对 <code>tabbar</code> 造成什么影响了。<br>　　除了对问题有了更灵活的解决以外，在新的项目中也尝试使用新的技术，和之前没用到的东西，比如 <code>autolayout</code> 布局，和 <code>UIStackView</code>，<code>Swift</code>中 <code>autolayout</code> 布局我是用现成的框架 <code>Snap</code> 实现的，简单易上手。上下左右的约束设置也很好理解，按 X 轴 Y 轴，从左到右，从上到下，为正，当使用 <code>make.right.equalToSuperview()</code> 时，如果想设置，离父视图的右边距为 27，那么按照刚才的理解也就是，父视图的边缘位置往回（左）走 27 个小格，也就是：<code>make.right.equalToSuperview().offset(-27)</code>，如果写成 <code>.offset(27)</code>，那此时 <code>make</code> 的这个视图右边缘是处在父视图再往右 27 个小格的位置。这是基本使用。有一点值得注意的是，当使用 <code>autolayout</code> 布局时，你要获取到视图的 <code>frame</code>，需要在获取之前调用<code>self.view.layoutIfNeeded()</code>去强制更新下布局才可以获取到不为空的布局参数。<br>　　关于 <code>stackView</code> 的使用，这几天使用的感受是他就像一个内部封装了 autolayout 布局的视图，只要我们给好约束，内部视图就会按照比例显示，这种特性可以应用在当页面有很多重复性的布局，但用 <code>UIcollectionview</code> 或 <code>UItableview</code> 解决的效果又不是很理想的情况下使用。<br>　　关于技术的学习，还有就是在看业内大佬戴铭老师在极客时间上的课了。除了引导语，本周就看了两篇，第一篇讲整体框架，提到一个 iOS 开发的知识体系，并给出了思维导图：<br>　　<img data-src="https://s2.ax1x.com/2019/06/22/Zpg42t.jpg"><br>　　对于我来说大概可以起到一个查缺补漏的作用，因为之前都是面向工作内容开发，不明白哪里补哪里，杂食性的学习习惯导致知识体系臃肿但并不健壮。这个导图很直观的列出了各个部分需要了解的内容，也在这个基础上给出了深入学习的分支。虽说尽信书不如无书，但在这个阶段的我还是需要多信信书的。而且戴铭老师在文章里的有个观点我觉得很好，大概是说现在互联网时代，新技术层出不穷的冒出来，但其实技术的本质都是殊途同归的，就像从天津去北京，选择坐车还是坐飞机，目的都是一致的。只要能在一门技术上深耕，学的明白透彻，那再去学其他的技术，就很容易触类旁通，举一反三的拿下了。<br>　　另外一篇是讲怎么优化 app 启动时间的。概不累述<br>　　接下来可以解释本周为什么很忙了，除了业内的学习，业外时间我报的专升本课程上个礼拜去上课，发现落了几节课之后老师都快把书讲完了，数据库老师布置课堂习题做的时候，我心里不断被黑人问号脸刷左心室左心房右心室右心房。所以这个礼拜就把重点稍稍往自己的学习上倾斜了一点，早上背单词，中午午休前刷题，晚上回去除了一两天的健身跑步以外，继续我之前的素描课程，618 剁手买了个 iPad，也就顺便再加了一个手绘教程。最近也小有成果~<br>　　<img data-src="https://s2.ax1x.com/2019/06/22/ZpRQXV.jpg"><img data-src="https://s2.ax1x.com/2019/06/22/ZpRM60.jpg"><img data-src="https://s2.ax1x.com/2019/06/22/ZpWAjx.png"><br>　　算起来工作以后我似乎比在学校里勤勉很多，但这种改变的本质并不是那种以前我没得选，现在我想做个好人的洗心革面，而是更多的是出来工作后的焦虑所导致我不得不去做一点什么来抵抗这种焦虑，或者说让自己忙起来而不去焦虑。或许我下一个学习内容可以尝试看心理学领域~　　
　　
　　</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Live</tag>
        <tag>Study</tag>
        <tag>Work</tag>
      </tags>
  </entry>
  <entry>
    <title>每周总结 - 0601</title>
    <url>//weekly-summary-190601.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　上周去旅游，就没空写周记，旅游的心情和工作的心情全然不同，虽然一直在走马观花，但回想起来也有些琐碎的事情可以摘出来谈一下。<br>　　<span id="more"></span><br>　　跟着旅行团去了大皇宫，去了玉佛寺，去最高大楼吃了自助餐，去看了成人表演，去了海边，去了天上，去体验了互相泼水的风俗活动，热闹好玩有意思。美中不足的是，行程太满，让人疲惫，旅游路线几乎和其他好多团重叠，几乎每个景区入目满眼的都是中国人，甚至在一些景区，除了我们一行人以外，其他的都是六十岁起步的大叔大妈。想象中的异域情调几乎都只在 711 便利店里体验到。<br><img data-src="https://s2.ax1x.com/2019/05/31/VlQir9.jpg"><img data-src="https://s2.ax1x.com/2019/05/31/VlQFbR.jpg"><img data-src="https://s2.ax1x.com/2019/05/31/VlQAV1.jpg"><br><img data-src="https://s2.ax1x.com/2019/05/31/VlQEUx.jpg"><img data-src="https://s2.ax1x.com/2019/05/31/VlQPKJ.jpg"><img data-src="https://s2.ax1x.com/2019/05/31/VlQV56.jpg"></p>
<p>　　所以在旅游的间隙我总是想，有时候去另一个城市或者国家旅游，其实并不需要去很多的景点，拍很多照片，买很多纪念品，只需要找一间不那么破烂的房子，每天日出晚归，体验一下他们的日常就行了。<br>　　<br>　　对于这种流水线式的旅游模式，我在玉佛寺出来碰到的一个穿着鲜艳，气势咄咄的老太太大概可以上一个声情并茂的最好注脚，她在一只脚踏出寺庙门口的时候，回头看了一眼，脸上说不清是愤愤不平还是埋怨，说了句，这都是走马观花。整个旅游过程中最让我感到不适的是观看成人表演到高潮部分，我从不标榜自己是个正人君子，甚至为了防止被人指为面冷心热的闷骚，我在互动环节选择单刀直入，稍稍落于我一个同伴在第二个上了台，在她白花花的胸脯上摸了一把并合照，在后来另一个人下台强硬坐在我身上并合照的行为我也表现出十分配合的态度，但最后许多人上台密密麻麻的围成一个圈，中间宽敞的地方空出来由表演者挑人出来和他们互动，互动内容基本往下三路靠，眼看着我平时的熟人尖叫甩动着手臂进入一种狂热的状态，我忽然产生了一点生理上的不适。于是我就从舞台上退了下来。<br>　　<br>　　当时从舞台上下来，我脑子里想到的是王小波先生书里的一句：一切都无可救药的走向庸俗。当精神鸦片猛嘬了两口，感觉自己不再有同流合污的丑陋。但转而立马回头想到，当我试图用一种鄙弃的态度以保持我精神上的超然物外时，这时的我是不是表现出了另一种丑陋。如果不是，那是解释成既做婊子又立牌坊的不要脸，还是只是像旧时士大夫在出淤泥而不染的路上偶尔没能把持住自己但最终悬崖勒马的庆幸。我不能对自己狠下心来评判，也不想无谓抬高自己，最终没得到答案，但经过这一轮思辨之后，我状态明显好了很多。后来坐在位置上，台上穿着暴露的人再来想拉我上去，我也只是摆摆手，你们玩吧，我上去见识过了。——说这句话的时候，我忽然觉得在刚两种极端自我认知里，这句话的态度倒可以当做中肯的平均值。<br>　　<br>　　虽然说旅行是个认识自己认识别人的过程，但除了隐约知道自己能接受和不能接受的事物在某方面的边界在哪，在旅途中对其他人的旧有印象并没有任何改变。回来后一连几天都提不起精神，但是班还是要上，这几天发现心灵鸡汤也是有些用处的，就像上班的时候精神不好影响到心情也不好，但中间没由来想到某些成功人士分享的经验：每天给自己一个傻笑，早上刷牙的时候就冲着镜子里一脸颓废的自己笑了一下，心情竟也出奇的好了一些。不过这也说明了人受外部因素影响比在内部自我调节要见效更快，再怎么哄自己知足常乐，平凡挺好也没有立马中五百万大奖狂喜后的平静更有质感。穿一件新衣服远比睡一个懒觉更显得有精神。<br>　　<br>　　本周回来后的工作都比较轻松，但技术上碰到了一个难点，用 <code>runloop</code> 机制检测 app 卡顿。虽然看了很多网上的教程，心里也有了一个模棱两可的概念，但是深入理解总有一些隔靴挠痒的感觉，<code>runloop</code> 的运行周期不像 <code>viewcontroller</code> 的生命周期那么容易理解，不是按顺序来的，而是在激活后达到某个调节又会折回去开始另一个流程，当我最终把整个流程不加理解的硬记下来，落实到具体的代码时又让我一脸懵逼，中间又有工作上的事打断扰乱思绪，所以最后都没有展开深入的理解完。另外的工作都算是基本操作，整合新的语音 <code>SDK</code> 到原来应用，修复 app <code>bug</code>，和人配合制定蓝牙设备命令，额外的就是中移动的项目，有时需要回答当前负责人的一些问题，幸运的是之前注释写的比较细，他找到问题代码的位置，基本可以根据注释推进，但也有一个问题就是，我发现——可能是人的共性，当我回答问题响应的比较快和回答内容比较详细，多次之后，他会有一种问问题的惯性，甚至在一些简单的问题上不做思考就把问题丢给我。在这个礼拜最后一次的问题中我有和他说这个问题。<br>　　<br>　　这个礼拜也终于把《邻人之妻》看完了，新开一本《繁花》，是因为听说王家卫要拍以这本书为剧本的电影才看的，现在大概看了一章，特点是通篇都用沪语对话，你做什么事体，你有什么事体，从文字就可以想象到书里人说上海话的氛围。从初见端倪的剧情看，大概想到王家卫为什么会选这本书拍电影了，基本上感觉和《花样年华》是一个调调，饮食男女，你侬我侬的。虽然《花样年华》好看，但再来一部差不多口味的，却没有太多新鲜劲了。希望墨镜王可以在自己的基础上推陈出新，再接再厉，再创高峰。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Live</tag>
        <tag>Study</tag>
        <tag>Work</tag>
      </tags>
  </entry>
  <entry>
    <title>每周总结 - 0511</title>
    <url>//weekly-summary-190511.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 　　项目最后的交接工作，我被派到了中移动总部进行封闭开发，暂时作为 iOS 方面的项目管理和推进，就之前来说，这个礼拜我负责的内容多了一些，除了我本身的代码维护以外，对外要处理项目的交接工作，对内要分配测试人员测试出的 bug，和一些缺失内容，优化内容的推进。一个礼拜下来，有一些收获。<br> 　　之前看知乎上一个问题，是有什么是当上管理层才会想的事？虽然我还没有到那个地步，但是管理项目给我的一些体验让我觉得似乎可以把握到一些管理层的想法，比如很多时候我们觉得领导只看结果不问过程有点不可理喻，但是从另一方面来看这其实只是因为需要对接的内容太多，不问过程只看结果，可以最大程度的排除其他因素的干扰。另一个是就是个人的主观动能性，这阵子做项目管理的时候，我总是会因为分配下去的任务而收到关于很多任务的疑问，比如新增一项需求的时候，开发人员会询问关于这个功能在不同场景下需要表现成怎样，在一些无法实现的地方又应该怎样规避。在管理角度看，这些当然是合理的，但提问的时机太零碎了，容易被分散注意力，另一个是有些场景虽然没有给出标准，但其实可以横向参考其他类似的功能来实现需求，这时候提问并不是必要的，所缺乏的只是一点主动去思考，或者说是虽然想到了第一步，即会产生这个问题，但可能是某种局限导致开发人员没有往下一步怎么解决这个问题，我之前也存在过类似问题。切成开发人员角度，规避这些问题，一个是整理问题，统一解决，另一个是解决问题的方法，虽然可以思考怎么解决，但是如果解决方法最终没有通过产品的审核，那之前针对问题的解决也都白费劲，所以最好的应对方法是，发现问题，可以附上一条或两条解决方案，一并提交。我想这些经验对于以后我做个人开发或者管理都会有帮助。<br> 　　这个礼拜接触到的新技术是使用 OC&#x2F;Swift 自动生成文档的轮子：</p>
<blockquote>
<p> 　　OC 自动生成代码文档：<a href="https://blog.csdn.net/u011374880/article/details/82143782">appledoc</a><br> 　　swift 自动生成代码文档：<a href="https://www.jianshu.com/p/b0d77877bafe">jazzy</a></p>
</blockquote>
<p> 　　虽然轮子里的描述一致，只要做了注释就可以生成文档，但仍然有些局限性，比如 appledoc 不支持 swift 工程，jazay 不支持 oc、swift 混编工程，生成的文档虽然有按着注释来的规范，但是也非常呆板，比如设定 public 的权限，就只会读取一些公开的类，但如果把读取的权限范围扩大，又会有不加筛选统统记录进文档，这个情况还不如读取源码来的快。<br> 　　手上的《邻人之妻》，看了一个月没看完，现在看到的部分是讲一个色情读物出版商在美国最高法院出了对“淫秽”的新定义以后，他出版了这个新定义的插图版，插图都是限制级图片，并解释说这些插图的目的在于让人们知道越界的图片具体是怎样的。不出意料，这看起来就很像挑衅的行为，出版商被捕了，他上述后又败诉，最后上诉到了最高法院，这次的上述结果不止是意味着对他的罚款和监禁判决是否还能成立，另一方面也是依据此次判决中最高法院的态度，来决定美国色情出版物未来的存活方向。<br> 　　新闻纪实体的叙述让人有一口气读到底的舒服，每次一个新人物切入的点也都有承前启后的关系，故事走向像走直行道，但一路看下来也隐隐能看到整个美国性解放时期的社会面貌，从社会关系，文化，政治方方面面，当前进度有一句格申·莱格曼对当时美国伦理做的评论，我觉得很有意思：“谋杀是罪。描写谋杀不是。性不是罪。但是描写它是。”<br> 　　虽然这本书是围绕性解放展开写的，但在体制和人们的对抗里，隐隐可以看出人们对自由的捍卫，这也让我思考，比如上述我发现在工作中实行某种规范可以让工作效率提高，但另一方面我是否该警惕沉浸在这些弯弯绕绕的规则中，是对我自由散漫本性的扼杀？</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Live</tag>
        <tag>Study</tag>
        <tag>Work</tag>
      </tags>
  </entry>
  <entry>
    <title>每周总结 - 0518</title>
    <url>//weekly-summary-190518.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　本周买了画板，画纸和一大堆铅笔，打算就着 B 站的素描入门视频学习画画，练习了一两天线条，小臂和胳膊的肌肉持续酸痛，一个现在已经不联系的朋友之前回答我如何不费劲的练肌肉，说学画画。之前以为他是开玩笑，现在看果然如此。<br>　　周一花了半天结束交接了上个项目，本周主要工作是封装兄弟公司的语音 SDK 到原来我们集成了腾讯，百度，讯飞，阿里语音的 SDK 中，新的语音 SDK 从逻辑可以看到封装者的思路，基本上是想把我们需要做的都做了，只暴露出实现功能需要调用的接口，虽然使用时清晰直观，但对于我需要二次分装不算友好，比如各个阶段的状态返回，开始录音结束录音，开始识别语音，和语音回馈，我只好作比较粗糙的处理，比如在调用开始录音方法时，主动调开始录音状态的回调，因为监听不到停止，但在他返回的一个枚举方法里有开始识别的状态，我就在这里放了停止录音的回调。<br>　　虽然这个方法可以让我二次封装正常进行，但是在实际体验上，仍可以预估到可能发生的问题，比如本地音乐在播放的时候，启用录音，语音助手在播报时，播放本地音乐等等，一些场景交错下的体验问题。这让我反过来想封装一个框架，我们真正应该思考的是什么？简单便捷，还是复杂详细但面面俱到，参考官方暴露出来的框架和回想过往开发，我想这个问题应该是没有标准答案的，不同的产品有不同的需求，因为哪怕官方的框架，我也遇到过需要用 oc 运行时态的特点来替换系统方法来实现需求的问题。所以没有十全十美的框架，好的框架需要的是与时俱进，不断迭代和维护。另一方面也可以从这点上看出开源的优势。<br>　　另外还有关于这方面的内容就是发现了一个这个仓库：<a href="https://github.com/SunshineBrother/JHBlog">iOS开发：我的初级到中级的晋级之路</a>。里面介绍底层的相关知识很详细，还有完整的工程源码，我打算每天看一篇有关底层的文章。在掘金上看了一篇关于大佬面试的文章，里面针对三年经验的一些技术问题，有些我知其然而不知其所以然，算下看我做 iOS 开发也接近三年，但前期没太注意技术累积——虽然也有一部分是中间分心去弄安卓开发，导致现在每次提升一个方向的知识，总要从底层一步一步看上来，很麻烦，而且也因为这点导致在工作岗位上的处境也有些尴尬。<br>　　以上。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Live</tag>
        <tag>Study</tag>
        <tag>Work</tag>
      </tags>
  </entry>
  <entry>
    <title>地久天长</title>
    <url>//forever-and-solongmyson.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　前段时间去看了王小帅的电影《地久天长》，还不错，但低于期待值。本以为剧情片既然有剪成三小时时长的底气，也应该用有可能输于但不输很多同样时长像《牯岭街少年杀人事件》、《美国往事》等电影的精彩，但很显然电影只具备和他们同样的长度，并没有同样的深度。</p>
<span id="more"></span>
<p>　　电影前半段的起手很好，包括互文的叙事中出现两次抱着溺水的儿子冲向医院，堕胎争议时王景春被推靠在贴着红色主题壁画墙上无力的垂下身子，或隐晦或明显的在表达导演的一些小心思，有意思也可以从这些细节看出一个导演的基本素养。在这种铺垫下，剧情最后三分之一的绝症死亡，旧友重逢，游子归来的桥段就有些落于俗套，强行追求大团圆结局，给人有一种他像在迎合什么，虽然压中了符合普罗大众价值观的主题，却没有很好的压中符合自己本身的主题。<br>　　就这点而言，韩寒的新片《飞驰人生》，虽然有整场都在强行幽默，以及沈腾老师上蹿下跳费老大劲也没把他这个角色人物圆回来的尴尬，但在结局选择让车冲出悬崖这段，还是有些不落于熟套的让人眼前一亮。可能就像他写的书，短小精悍，总能在点题的时候给人记忆的点。<br>　　而那个小孩送他们夫妇两回去在老房子道歉时，插入的回放是早已原谅的剧情，从逻辑上很难与王景春夫妇背井离乡，和朋友断绝来往这段自洽起来，就好像口是心非，你说你已经原谅我们儿子了，还叫我们不要在他面前提这事，可是为什么又要离开我们，去那么远，而且再也没有音信。<br>　　综上，大概给个三点五分，情真意切是不错，但最后又有些耍小聪明似得把本来突出的特点给平衡回去了。<br>　　看完电影又过了几天，恰好看好王小波也有一本书叫做《地久天长》，是他早期的短篇小说集，说是集子，也就两个故事，还有一篇是他的朋友回忆他的，因为感觉他朋友回忆时态度不那么诚恳，略过不提。主要讲《绿毛水怪》和《地久天长》。<br>　　比起很早之前看《黄金时代》觉得晦涩难懂，看这本的时候，很容易就因为里面的情节产生共鸣，心潮涌动，《绿毛水怪》讲的是“我”和青梅竹马的女孩的故事，虽然剧情放在今天看可能只是一个男女主角因缘巧合彼此错过抱憾一生的烂俗故事。但不同的是，这个故事他是借着书中人的口述说了，可能这种处理本身就是对预期的质疑的回应。除此之外在剧情的设置上，结尾女主角变成了绿毛水怪，等候男主角，男主角未履约，以此结局。也为故事增添玄奇色彩。而《地久天长》，毋庸置疑的，他是比《绿毛水怪》更出色的故事，故事里我、大许和小红三人像友情又像爱情的关系，真挚浪漫到近乎乌托邦，虽然美好到不真实，但我愿意相信，这世上存在着这样一种关系，超越肉体和性，没有占有欲和嫉妒存在，单只是纯粹的爱。<br>　　《地久天长》的最后，小红死了。我想小波先生这样安排故事结局的目的，应该不仅仅是为了让故事有个结局，可能还以此想说一点其他的，比如美好总是短暂易碎的，比如悲剧将人生的有价值的东西毁灭给人看。他安排了小红的死亡，看上去像是一种对美好的扼杀，但我更愿意理解成是一种保存。这种保存不会因为来日方长而变质，还会因为日子渐渐过去在回忆里耀耀生辉。另外藉由小红的死，我又想起王朔的《空中小姐》，里面的女主人公最后也死了，也同样也在女主角爱到最真挚纯粹的时刻死去。他们的这种一致，让我觉得似乎对于英雄易老，美人迟暮的担忧存在于所有同阶段的年轻人心中。当然也不排除这只是一种普遍的戏剧技巧，就像欧里庇得斯戏剧中的解围之神，功夫里的如来神掌，天龙八部里的扫地僧。<br>　　最后放一段《地久天长》里我印象深刻的描述：</p>
<blockquote>
<p>　　人可以在那么年轻时就那么美，那么成熟，那么可爱。她常说她喜欢一切好人。她还说她根本分不清友谊和爱的界限在哪里。我回想起来，她绝对温存，绝对可爱，生机勃勃，全无畏惧而且自信。我从她身上感到一种永存的精神，超过平庸生活里的一切。 你不管叫别人做什么事，不光是为了他好，还要让他乐意。这是爱的艺术。</p>
</blockquote>
]]></content>
      <categories>
        <category>旁白</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>电影</tag>
        <tag>观后感</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>每周总结 - 0428</title>
    <url>//weekly-summary-190428.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　本周工作方面的基本告一段落，但是随之而来的也是比较棘手的一个项目，需要用到蓝牙 ota 技术，由于对接公司人手的缺失，对方只提供了安卓的 SDK，iOS 这方面需要我们对照着安卓的代码转译成 OC，幸运的是之前也有学习安卓，大体的逻辑都能看的明白，但涉及到一行一行的翻译过来，就比较吃力。所以这个礼拜所做的努力简单来说，就是用水磨功夫反复看细节处的代码，等待灵机一动的时刻。好吧，我得承认这个方法，耗时费力又没有效率，但用 Stack Overflow 里提问者经常回应的一句话说：it’s worked！<br>　　不过在反复解读的过程中也稍微掌握了一些提高效率的方法，整理如下：<br>　　第一、遇到不懂的代码，直接谷歌。善用搜索这虽然是老生常谈的事，但是对我来说有必要强调一下，因为学习过安卓的缘故，所以让我有些思维盲区，平时解决问题的时候都会直接用搜索引擎，但这次在解读安卓源码的前期阶段我都一直没想到用搜索引擎来解读代码。所以强调善用搜索，另一方面也是提醒自己不要因为接触不擅长的事的压力而导致总是钻入某个牛角尖。<br>　　第二、不能举一反三，就举三推一。这个方法是我通过从某个牛角尖刚钻出时的经验教训总结出来的。但我得到 ota 升级前发送第一次握手校验命令返回的消息时，我试图弄明白这些这个消息代表了什么含义，而且这个消息，和之后每次 ota 包分段发送后的返回消息有什么区别，打印之后发现第一次的长度和之后的长度都不一致，这让我很迷惑。又有兄弟公司的安卓工程师帮忙解读的文档里提到另一个透传通道，前缀说明里写很重要，影响到 ota 是否成功，然后我就思考这个通道和返回的验证消息是否有联系，在源码中搜索发现也确实用到了这个通道——这个后来发现到虽然这个通道进行了赋值和调用一次，除此之外再没有用到。但当时这些信息有点把我搞糊涂了，所以就在重复打印和对比安卓和iOS ota 的返回消息，以及希望在源码中解读出透传通道究竟起了什么作用。因为长时间没取得较好的进展，就颇有些自暴自弃的想把其他简单但不是很重要的命令先转成 oc，然后发现他 ota 线程中循环判断里的条件参数，和回调读取的值是有一定联系的，只是像 oc 把数据处理写成了一个单例形式，又用一层东西封装了一下，导致写入和读取不太像一个来源，造成了视觉盲点，但点进去就比较一目了然，虽然还有底层的东西需要用谷歌解读，但是关于处理返回验证消息就可以按着这个方法来校验了。以上就是我整个问题的思考过程，其实很多时候真正的问题也不是知识量的积累不够，而是主观上受情绪影响，思考的不太全面，所以以后这方面的问题需要多多注意。<br>　　说点轻松的，本周《妇联4》上映，没赶首映，周日放假时去看的，看的过程中几度红眼，因为剧情本身，也因为剧情以外 22 部漫威电影所累积下的情感积淀。也是我第一次在电影院等到片尾所有字幕放完，影院的清洁人员拿着扫把畚斗进来打扫。片尾曲放在最后出现的是钢铁侠，首尾呼应，而且，又是一个情绪的爆发点。我想我平抒直叙的方式实难写出我心里所感受的十分之一，所以就此打住。<br>　　英语这个礼拜开始复习，每天五十个，目标不是很大，早上坐车的时候就可以轻松完成。抽了一天看了下书，《信息资源管理》，最进新开课因为有事还没来得及去上。另外还有一些琐碎的思绪因为发散琐碎没来得及去记，就像云一样飘走了。<br>　　以上。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Live</tag>
        <tag>Study</tag>
        <tag>Work</tag>
      </tags>
  </entry>
  <entry>
    <title>每周工作学习总结 - 0418</title>
    <url>//weekly-summary-190418.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　立个 flag，每周写一篇周记，内容包括但不限于工作和学习上的总结反思。之所以会有这个想法，一方面是对自己的拖延症和惰性有客观的认知，另一方面是希望通过每个礼拜的总结反思，可以发现一些不足的地方，希望可以通过阶段性的反思推动自己往前走，提高执行力。<br>　　本周工作上的项目基本接近收尾，但是越到这个时候，开发过程中没有发现的问题，也都暴露了出来。我负责的音视频功能，原先作为一个用户来看，除了视频流和音频流的传输，在交互上，感觉简单的不能再简单，但是实际开发上，也发现有不少需要注意的点，比如当正在通话中，其他用户请求通话的场景；当应用处于后台，接到来电的场景等，花费时间较多的就是应用处于后台时，接到来电的 BUG，具体表现为接收到第一次电话以后，第二次就无法接收到，多次测试以后基本可以定位原因，大概是后台保活，由于项目中集成了环信的 SDK，所以当应用处于后台时也能保持活动，附带的让音视频 SDK 也不会被挂起，而是继续响应来电。至于第二次无法接收到，则是 SDK 封装的内部逻辑导致。这个问题让我对 iOS 应用退到后台机制又有了一点新的认识。<br>　　此外，除了问题本身，在关于问题的沟通推进上，比如在对方有些明显懈怠的情况下，如何推进问题解决以达到预期效果，也有了一些心得体会，归纳起来也其实就是老生常谈的那几句话，首要的就是保持主观动能性，需要自己先去找的问题根源，再让对方跟进解决，其次是最大程度的排除其他发生问题可能性，以避免问题归因的模糊而导致问题被踢来踢去，拉长处理问题周期。<br>　　还有一些另外因为需求修改而进行的工作因为简单和重复，概不累述。<br>　　上周周末两天时间，去参加了四场考试，专升本的第一次试手考，除了主观放弃的经济管理学，其他感觉还行，英语相对简单，历史稍有疏忽，有几道简答题和论述题不会，就干脆的空白放在那里，没有按照考试约定俗成的规矩——乱写都要写满，前天把百词斩 App 上背四级单词的计划完成了。接下来，学校等着开新课，单词开始下一轮的复习计划，生辞旧往，刚好这个礼拜给自己一个借口可以修生养息。也刚好最近视力下降的厉害，可以不用每天那么过度用眼了。<br>　　最近有些闲钱，又开始关注投资理财的事，发现周围许多朋友有的每年买巨额理财型的保险，有的在看理财类的书，有的没的都在为人生做长线规划。可能忧患意识是我们这代年轻人的共性，养生，理财，终身学习，最终目的也只是为了能和这个糟糕的世界刚久一点。言归正传，之前大学的时候就有投过基金，不过没挣多少，堪堪跑赢余额宝，去年了解到定投这种投资形式，试了一下，但恰好碰上去年整体经济不理想，下半年定投的基金估值指数下降，那会也犯了个新手都会犯的错误——怂，投了五六期就停了，钱就放在那里，今年稍微回升了一些就全部卖掉，没成想之后大盘会一路攀升，算算要是我之前没抛大概也能赚个四五百，有点可惜。不过也没有很可惜，毕竟现阶段对自己定位明确，学习投资为主，投资挣钱为辅。今年新学到的理财知识给我的启发是，首先明确两点，一、投资的类型，二、投资的方式。第一个问题在我心里没有争议的仍旧是基金，股票对我来说风险太大，理财型保险的回报周期太长，对我这种年轻气盛的小伙子来说也太过磨人。第二个问题经过去年的尝试，可以确定定投的方式优于一次性大量买入，又结合新学到的知识，把定期定额变成定期不定额投入，根据涨跌动态调整投资金额。其他还有需要细化的问题就是，开始定投的时间点，和买哪个基金。当然这两个我都没能得到很好地答案，毕竟这也都属于投资里的终极问题了，所以今年的额外学习目标是希望对整个市场能有更清楚的把握和认识。<br>　　以上。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Live</tag>
        <tag>Study</tag>
        <tag>Work</tag>
      </tags>
  </entry>
  <entry>
    <title>开发的阶段性反思</title>
    <url>//development_stage_reflection.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　最近感觉到开发的技术提升缓慢，意识到自己可能进入了一个不上不下的瓶颈期。虽然在公司内部也一直有技术学习小组，但切实落于自身的总好像隔靴挠痒，不能很精确发现自己的不足，和如何针对这种不足去改正。为了下一阶段的继续提升，我觉得有必要总结一下自己学习到的内容，和规划一下未来的技术提升方向。<br>　　<br>　　工作上主要使用的 Swift 和 OC，已经基本掌握的很熟练了，各种布局、控件和数据处理的基本使用都没问题，也可以根据这些知识基础按自己的想法实现一些捷径式的小操作。<br>　　但是还有一些不足，比如最近很多人用的 auto layout，用着就很别扭，还不太熟练，音频，视频传输和编码的处理，没有深入了解过，还有代码的整洁度，和代码的结构，大局观比较差。OC 一阵子没用，也有些生涩的感觉，OC 和 Swift 的混编，在数据传输上的方法上还可以进一步学习一下。<br>　　Android 方便，因为很久没使用了，水平可能还是停在给上一家开发应用，可以读懂代码，可以按产品效果图实现一个 App，但是完成度可能不太让人满意，Android 新兴的语言 Kotlin 也都一直还没接触过。<br>　　Python 的学习很早就停下了，过了那么久，模糊的只记得一些函数表达式写法，和类型属性这些流于表面的概念性的东西。不具备独立开发的能力。<br>　　<br>　　以上就是我现阶段学习和使用过的语言总结，在开发的过程中，我越来越发现一个扎实基础的重要性，一言以蔽之，对底层的理解程度基本可以决定你现在所处的高度。因为之前技术的突破都是为了需求赶鸭子上架现学现卖，在过程中就容易错过很多细节，虽然在后续的开发里，自己也会不断回推梳理，但很难得到一个系统性的结论，反而是在找工作背面试题，不断过一些概念理论的时候，和自己过往开发印证，觉得收获很多。<br>　　所以，下一阶段的第一个目标我想是重新对我所学的语言，那些基础知识复习一遍，梳理巩固一下。<br>　　还有一个就是对 OC&#x2F;Swift 多线程的理解和掌握，虽然现在对 OC 的运行时态和多线程理解和使用都没有问题，但我注意到，很多大项目，对线程管理都有一定规范性的东西穿插在整个项目里，这一点是我所不足的。有同样问题的是网络请求方面，TCP、UDP、HTTP之前也都掌握的不是很好，需要重新梳理。<br>　　格外的目标是想把这两本书：《Effective Objective-C 2.0 编写高质量 iOS 与 OS X 代码的 52 个有效方法》、《Objective-C高级编程：iOS与OS X多线程和内存管理》，在最近的学习告一段落之后看完。<br>　　<br>　　除了实际的目标和计划以外，我觉得我最近对技术的态度也处在一个低谷期，可能是因为从新手期出来很久，以前敲一段代码看到效果的成就反馈对我影响很小了，也可能是技术处于一个停滞的阶段，所以对敲代码缺少以前的积极性了。所以我希望可以通过学习新的东西来重新回到之前对编程热情洋溢的阶段。<br>　　最近看《爱，死亡和机器人》，有一集《齐马的作品》，我很喜欢，开篇就讲一个大师的艺术探索，从人物肖像，到绘画出正中心带纯蓝色几何图形的浩瀚宇宙，结尾是他探索终极，发现自己的由来是一台清洁机器人，就回归自我，变成清洁机器人。所以他终极的答案是找一件简单的事做。其实举一反三来看，编程这件事，和他的艺术探索也是一回事，高屋建瓴太遥远，那就从简单的事情开始做。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>iOS</tag>
        <tag>Development</tag>
      </tags>
  </entry>
  <entry>
    <title>在路上</title>
    <url>//on-the-road.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　行百里者半九十，新年过来就一头扎进工作，晕头转向直到现在，让我这才走了十里路的人看着剩下的九十里，都有了些望洋兴叹的惆怅。所以趁现在有空，休息一下，回顾一下。<br>　　<br>　　过年照旧仍去上山烧香拜了佛，不同的是，今年没抽到上上签，而是中上签。不过也说不清是好是坏，表哥去年抽到中下签，我和表弟抽的是上上签和上中签，但去年反倒是他订婚成了家先。因为这个今年过年在外游荡的人就剩我和表弟两了。眼看过去吃了饭就撒手啥也不管变成一个抢着洗碗做家务事的人，我和表弟某个晚上吃了夜宵在大街上忽然感慨，以后就剩我们两相依为命啦。<br>　　<br>　　凡事都说物是人非太不客观，就好像我表哥变了一些，而我们上山烧香拜佛，山也并非一成不变。上山变得更容易了，可以坐改装成游览车的金杯到山脚，再从山脚坐缆车到山顶。我们选择在坐缆车前走一小段路，路不是去年的那条，而是换成一条有些曲折，两边拨地而起了不少新建仿古建筑的坎坷小路，前两天下过雨，路上有些积水。一个拐角之后，迎面看到一个牌子，小吃街。穿过小街随便抬头看了各个店铺贴在门上墙上的菜单，个个都是 5A 级景区的价格，到了街尾，表弟拿着手机对着一个菜单拍了个照，说下次要和别人炫耀下我们这消费也是相当高的。<br>　　<img data-src="https://s2.ax1x.com/2019/03/14/AAj9un.md.jpg" alt="售票大厅里的陌生人们">　<br>　　我们买了票就坐缆车上山了，点香抽签解签，一如故往。庙里的变化是，今年对香客们的香做了限制，每人都只能拿三支香拜，所以不会再出现点香的时候把香点着整把香丢掉的事，庙里也不会总是烟雾缭绕的熏人眼睛。<br>　　<br>　　整座庙的前半部分由两栋相连的屋子组成，中间有一个小阶梯，下去是条小巷，巷里紧紧贴着一个小卖铺，外面卖着零食小吃，里面卖的都是宗教用品，开过光的手串护身符，问了一下价格，略显粗糙的开光手串一百五，粗糙的开光手串一百，还没确定要不要图个吉利买一串就已经先生怯意，表弟说外面也就卖个二三十，我说要不然怎么说宗教是门大生意。Jesus is a big business。我在心里补充，来了个饶舌。回去的时候因为有点晚，路程又远，就和姨姨他们去了她婆婆家吃饭，吃饭的时候姨夫说让我喝点酒，整个新年的所有饭局我对喝酒都抱着一种可喝可不喝的态度，但总是看长辈各种推辞，觉得即社会又好笑。就学着印象里的神情，一半严肃一半玩笑的向姨夫摆手，摆手：“不喝不喝，待会还要开车。”姨夫冷不丁的懵了一会，随后恍然大笑，你哪开了车啊。<br>　　<br>　　上香的事告一段落，新年另一件事就是和以前朋友见面，往年没约上的朋友，今年照旧因为各种琐事没有约上，见上的朋友也都是往年见过面的，也算是一期一会。小插曲是，和朋友见面的时候，看见了一个很久没联系的女性朋友，当初没联系，起因是她，结果是我赌气，到现在三四年没说过几句话，也一直没见过面。许久不见，样子似乎变了一些，成熟盖过稚气，穿过人群和她对视了一眼，我看到她眼里似乎有些久别重逢的惊喜，我不知道我当时的表情是怎样的，似乎是客气又克制的点头、抿嘴示意，然后没有寒暄，就扭头走了。现在回头看，好像在她面前，我又表现得有点小家子气，一如往昔。<br>　　<br>　　后来和朋友们看完电影出来，又看到了她。我想既然老天爷都想让我和她冰释前嫌，那我也就不坚持了。但她又好像是报复似的，只是和我朋友寒暄了几句，等我走近，朝我点了点头就走了。<br>　　<br>　　再后来回去，想了想，用“看你有没有换号码”的蹩脚理由给她打了个电话，聊了很久，总算是奠定了中美关系走向正常化的基础。<br>　　<br>　　除了这些以外，有印象的还有，叔叔表哥说要给我介绍女朋友，一个拿着对方姐姐的照片说让我先看看，另一个在 KTV 的时候直接让我和他旁边的女孩视频了，放着我在这头，不管不顾的和那人对起话来，看看我这侄子帅吧。感觉有点胖。胖啊，不会，他就这个脸型。除了觉得颇有喜感，也被我两个亲人过于耿直的方式给唬得无可奈何。叔叔今年倒是没有给我上中国传统美德普及课了，不过去外公家时，今年瘦了两大圈的姐夫在晚饭后和我们这些年轻人上心灵鸡汤课，一脸朝气逢勃的和我们说自己老了，让我们努力，说年轻人不要怕失败，年轻人最不应该害怕的就是失败。我在心里想，年轻人不怕失败固然是可以轻易做到的，不过是一头热血，不管不顾找个方向往前使劲罢了。但失败的后果，却往往需要年轻人的家人一起承担，这样的后果，一个年轻人最多可以承受几次呢？<br>　　<br>　　忽然想不到说什么结尾了，觉得这段比较应景。</p>
<blockquote>
<p>　　那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。</p>
</blockquote>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>扯谈</tag>
        <tag>季度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS - Swift 开发规范</title>
    <url>//swift-style-guide.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><em><strong>规范文档翻译自 <a href="https://github.com/raywenderlich/swift-style-guide">raywenderlich.com 的编码规范</a></strong></em></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#correctness">正确性</a></li>
<li><a href="#naming">命名</a></li>
<li><a href="#prose">文章</a></li>
<li><a href="#class_prefixes">类前缀</a></li>
<li><a href="#delegates">代理</a></li>
<li><a href="#use_type_inferred_context">使用上下文推断的类型</a></li>
<li><a href="#generics">一般的</a></li>
<li><a href="#langage">语言</a></li>
<li><a href="#code_organization">代码组织</a></li>
<li><a href="#protocol_conformance">协议遵循</a> </li>
<li><a href="#unused_code">无用代码</a></li>
<li><a href="#minimal_imports">最小引用</a></li>
<li><a href="#spacing">空格</a></li>
<li><a href="#comments">注释</a></li>
<li><a href="#classes_and_structures">类和结构体</a></li>
<li><a href="#use_of_self">Self 的用法</a></li>
<li><a href="#computed_properties">计算属性</a></li>
<li><a href="#final">Final</a></li>
<li><a href="#function_declarations">函数声明</a></li>
<li><a href="#function_calls">函数调用</a></li>
<li><a href="#closure_expressions">闭包表达式</a></li>
<li><a href="#types">类型</a></li>
<li><a href="#constants">常量</a></li>
<li><a href="#static_methods_and_variable_type_properties">静态方法和可变类型属性</a></li>
<li><a href="#optionals">可选类型</a></li>
<li><a href="#lazy_initialization">延迟初始化</a></li>
<li><a href="#type_inference">类型推断</a></li>
<li><a href="#syntactic_sugar">语法糖</a></li>
<li><a href="#functions_vs_methods">函数 vs 方法</a></li>
<li><a href="#memory_management">内存管理</a></li>
<li><a href="#extending_lifetime">延长对象的生命周期</a></li>
<li><a href="#access_control">访问控制</a></li>
<li><a href="#control_flow">控制流</a></li>
<li><a href="#golden_path">黄金路径</a></li>
<li><a href="#failing_guards">失败防护</a></li>
<li><a href="#semicolons">分号</a></li>
<li><a href="#parentheses">括号</a></li>
<li><a href="#organization_and_bundle_indentifier">组织和包 ID</a></li>
<li><a href="#references">参考文献</a></li>
</ul>
<p><b id="correctness"></b></p>
<h2 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h2><p>努力让你的代码在没有警告的情况下编译。 这条规则决定了许多风格决策，比如使用 #selector 类型而不是字符串字面量。(更多请阅读 <a href="https://link.jianshu.com/?t=https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md">Swift 3 为什么推荐使用 #selector</a>)。 </p>
<p><b id="naming"></b></p>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>描述性和一致性的命名让软件更易于阅读和理解。使用 <a href="https://swift.org/documentation/api-design-guidelines/">API 设计规范</a> 中描述的 Swift 命名规范。 一些关键点包括如下：</p>
<ul>
<li>尽量让调用的地方更加简明</li>
<li>简明性优先而不是简洁性</li>
<li>使用驼峰命名法（而不是蛇形命名法）</li>
<li>针对类型（和协议）使用首字母大写，其它都是首字母小写</li>
<li>包含所有需要的单词，同时省略不必要的单词</li>
<li>基于角色的命名，而不是类型</li>
<li>有时候要针对弱引用类型信息进行补充</li>
<li>尽量保持流畅的用法</li>
<li>工厂方法以 make 开头</li>
<li>命名方法的副作用</li>
<li>不可变版本的动词方法要遵循后接 -ed, -ing 的规则</li>
<li>可变版本的名词方法要遵循 formX 的规则</li>
<li>布尔类型应该像断言一样读取</li>
<li>描述 <em>这是什么</em> 的协议应该读作名词</li>
<li>描述 <em>一种能力</em> 的协议应该以 -able 或者 -ible 结尾</li>
<li>使用不会让专家惊讶或让初学者迷惑的术语</li>
<li>通常要避免缩写</li>
<li>使用名称的先例</li>
<li>首选方法和属性而不是自由函数</li>
<li>统一向上或向下包装首字母缩略词和首字母</li>
<li>为相同含义的方法提供相同的基本名称</li>
<li>避免返回类型的重载</li>
<li>选择用于文档的好的参数名</li>
<li>为闭包和元组参数设置标签</li>
<li>利用默认参数的优势</li>
</ul>
<p><b id="prose"></b></p>
<h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><p>在文章中引用方法时，含义明确是至关重要的。尽可能用最简单的形式引用方法。</p>
<ol>
<li>写一个不带参数的方法。 举例： 下一步，你需要调用方法 <code>addTarget</code>。</li>
<li>写一个带参数标签的方法。 举例： 下一步，你需要调用方法 <code>addTarget(_:action:)</code>。</li>
<li>写一个带参数标签和类型的完整方法。 举例： 下一步, 你需要调用方法 <code>addTarget(_: Any?, action: Selector?)</code>。</li>
</ol>
<p>用上面的例子使用 <code>UIGestureRecognizer</code>, 1 是明确的，也是首选的。</p>
<p>专家提示： 你可以用 Xcode 的跳转栏来查看带有参数标签的方法。<br><img data-src="https://gitee.com/woailvkai/Kaaaaai.tool.oss/raw/uPic/uPic/9lFrRn-2020%2007%2020.jpg" alt="9lFrRn-20200720"></p>
<p><b id="class_prefixes"></b></p>
<h3 id="类前缀"><a href="#类前缀" class="headerlink" title="类前缀"></a>类前缀</h3><p>Swift 的类自动被包含在模块分配的命名空间中。不应该再添加类似于 RW 的类前缀。如果不同模块的两个命名冲突，可以在类名前添加模块名来消除歧义。无论如何，仅在少数可能引起混淆的情况下指明模块名。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SomeModule</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myClass <span class="operator">=</span> <span class="type">MyModule</span>.<span class="type">UsefulClass</span>()</span><br></pre></td></tr></table></figure>

<p><b id="delegates"></b></p>
<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>当创建自定义代理方法的时候，未命名的第一个参数应该是代理源。 （ UIKit 包含很多这样的例子。）</p>
<p><strong>推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">namePickerView</span>(<span class="keyword">_</span> <span class="params">namePickerView</span>: <span class="type">NamePickerView</span>, <span class="params">didSelectName</span> <span class="params">name</span>: <span class="type">String</span>)</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">namePickerViewShouldReload</span>(<span class="keyword">_</span> <span class="params">namePickerView</span>: <span class="type">NamePickerView</span>) -&gt; <span class="type">Bool</span></span><br></pre></td></tr></table></figure>

<p><strong>不推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">didSelectName</span>(<span class="params">namePicker</span>: <span class="type">NamePickerViewController</span>, <span class="params">name</span>: <span class="type">String</span>)</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">namePickerShouldReload</span>() -&gt; <span class="type">Bool</span></span><br></pre></td></tr></table></figure>

<p><b id="use_type_inferred_context"></b></p>
<h3 id="使用上下文推断的类型"><a href="#使用上下文推断的类型" class="headerlink" title="使用上下文推断的类型"></a>使用上下文推断的类型</h3><p>使用上下文推断编译器书写更短更明确的代码。（你也可以阅读 类型推断。)</p>
<p>推荐：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> selector <span class="operator">=</span> <span class="keyword">#selector</span>(viewDidLoad)</span><br><span class="line">view.backgroundColor <span class="operator">=</span> .red</span><br><span class="line"><span class="keyword">let</span> toView <span class="operator">=</span> context.view(forKey: .to)</span><br><span class="line"><span class="keyword">let</span> view <span class="operator">=</span> <span class="type">UIView</span>(frame: .zero)</span><br></pre></td></tr></table></figure>

<p>不推荐：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> selector <span class="operator">=</span> <span class="keyword">#selector</span>(<span class="type">ViewController</span>.viewDidLoad)</span><br><span class="line">view.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.red</span><br><span class="line"><span class="keyword">let</span> toView <span class="operator">=</span> context.view(forKey: <span class="type">UITransitionContextViewKey</span>.to)</span><br><span class="line"><span class="keyword">let</span> view <span class="operator">=</span> <span class="type">UIView</span>(frame: <span class="type">CGRect</span>.zero)</span><br></pre></td></tr></table></figure>

<p><b id="generics"></b></p>
<h3 id="一般的"><a href="#一般的" class="headerlink" title="一般的"></a>一般的</h3><p>一般的类型参数应该是描述性的、大写驼峰法命名。当类名没有富有含义的关系或角色时，使用传统的单个大写字母来命名，例如 <code>T</code> 、 <code>U</code> 或 <code>V</code>。</p>
<p>推荐：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Stack</span>&lt;<span class="type">Element</span>&gt; &#123; <span class="operator">...</span> &#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">write</span>&lt;<span class="type">Target</span>: <span class="type">OutputStream</span>&gt;(<span class="params">to</span> <span class="params">target</span>: <span class="keyword">inout</span> <span class="type">Target</span>)</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">swap</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">_</span> <span class="params">a</span>: <span class="keyword">inout</span> <span class="type">T</span>, <span class="keyword">_</span> <span class="params">b</span>: <span class="keyword">inout</span> <span class="type">T</span>)</span><br></pre></td></tr></table></figure>

<p>不推荐：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Stack</span>&lt;<span class="type">T</span>&gt; &#123; <span class="operator">...</span> &#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">write</span>&lt;target: <span class="type">OutputStream</span>&gt;(<span class="params">to</span> <span class="params">target</span>: <span class="keyword">inout</span> target)</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">swap</span>&lt;<span class="type">Thing</span>&gt;(<span class="keyword">_</span> <span class="params">a</span>: <span class="keyword">inout</span> <span class="type">Thing</span>, <span class="keyword">_</span> <span class="params">b</span>: <span class="keyword">inout</span> <span class="type">Thing</span>)</span><br></pre></td></tr></table></figure>

<p><b id="langage"></b></p>
<h3 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h3><p>使用美式英语拼写来匹配 Apple 的 API。</p>
<p>推荐：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> color <span class="operator">=</span> <span class="string">&quot;red&quot;</span></span><br></pre></td></tr></table></figure>

<p>不推荐：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colour <span class="operator">=</span> <span class="string">&quot;red&quot;</span></span><br></pre></td></tr></table></figure>

<p><b id="code_organization"></b></p>
<h2 id="代码组织"><a href="#代码组织" class="headerlink" title="代码组织"></a>代码组织</h2><p>用扩展将代码组织为功能逻辑块。每个扩展都应该添加 &#x2F;&#x2F; MARK: - 注释，以保证代码的结构清晰。</p>
<p><b id="protocol_conformance"></b></p>
<h3 id="协议遵循"><a href="#协议遵循" class="headerlink" title="协议遵循"></a>协议遵循</h3><p>推荐为协议方法加一个单独的扩展，尤其是为一个模型加入协议遵循的时候。这可以让有关联的协议方法被分组在一起，也可以简化用类关联方法向这个类添加协议的指令。</p>
<p>推荐：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyViewController</span>: <span class="title class_ inherited__">UIViewController</span> &#123;</span><br><span class="line">  <span class="comment">// 类填充在这</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - UITableViewDataSource</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">MyViewController</span>: <span class="title class_ inherited__">UITableViewDataSource</span> &#123;</span><br><span class="line">  <span class="comment">// table view 的数据源方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - UIScrollViewDelegate</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">MyViewController</span>: <span class="title class_ inherited__">UIScrollViewDelegate</span> &#123;</span><br><span class="line">  <span class="comment">// scroll view 的代理方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不推荐：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyViewController</span>: <span class="title class_ inherited__">UIViewController</span>, <span class="title class_ inherited__">UITableViewDataSource</span>, <span class="title class_ inherited__">UIScrollViewDelegate</span> &#123;</span><br><span class="line">  <span class="comment">// 所有方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为编译器不允许在派生类中重新声明协议遵循，所以并不总是需要复制基类的扩展组。如果派生类是一个终端类，并且只有少数方法会被覆盖，那么这个原则尤为正确。应由作者自行决定何时保留扩展组- 。</p>
<p>对于 UIKit 中的视图控制器，可考虑将生命周期、自定义存取器和 IBAction 分组在单独的类扩展中。</p>
<p><b id="unused_code"></b></p>
<h3 id="无用代码"><a href="#无用代码" class="headerlink" title="无用代码"></a>无用代码</h3><p>无用代码（僵尸代码），包括 Xcode 模板代码和占位注释，应该被移除掉。教程或书籍中教用户使用的注释代码除外。</p>
<p>仅实现简单调用父类，但与教程无直接关联的方法应该被移除。这里包括任何为空的或无用的 UIApplicationDelegate 方法。</p>
<p>推荐：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">numberOfRowsInSection</span> <span class="params">section</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">Database</span>.contacts.count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不推荐：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">didReceiveMemoryWarning</span>() &#123;</span><br><span class="line">  <span class="keyword">super</span>.didReceiveMemoryWarning()</span><br><span class="line">  <span class="comment">// 任何可以重建资源的处理。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">numberOfSections</span>(<span class="params">in</span> <span class="params">tableView</span>: <span class="type">UITableView</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="comment">// #warning 未完成的实现，返回节数。</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">numberOfRowsInSection</span> <span class="params">section</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="comment">// #warning 未完成的实现，返回行数。</span></span><br><span class="line">  <span class="keyword">return</span> <span class="type">Database</span>.contacts.count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><b id="minimal_imports"></b></p>
<h3 id="最小引用"><a href="#最小引用" class="headerlink" title="最小引用"></a>最小引用</h3><p>引用最小化。举个例子，引用 <code>Foundation</code> 就足够的情况下不要再引用 <code>UIKit</code> 。</p>
<p><b id="spacing"></b></p>
<h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><ul>
<li><p>用两个字符缩进比用制表符缩进更节省空间，同时能防止换行。务必在 Xcode 和项目中设置这个偏好，如下所示：<br><img data-src="https://gitee.com/woailvkai/Kaaaaai.tool.oss/raw/uPic/uPic/hxFLPw-2020%2007%2020.jpg" alt="hxFLPw-20200720"></p>
</li>
<li><p>方法大括号和其他大括号（ <code>if</code> &#x2F; <code>else</code> &#x2F; <code>switch</code> &#x2F; <code>while</code> 等）总是在和语句相同的行写左括号，而在新行写右括号。</p>
</li>
<li><p>提示：你可以通过选中一些代码（或按 ⌘A 选中全部）然后按 Control-I （或在目录中选择编辑器 -&gt; 结构 -&gt; 重新缩进）的方式来重新缩进代码。一些 Xcode 模板代码会使用 4 个空格的制表符硬编码，这就是一个修正它的好方法。<br>推荐：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> user.isHappy &#123;</span><br><span class="line"><span class="comment">// 做一件事</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 做另一件事</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>不推荐：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> user.isHappy</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 做一件事</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 做另一件事</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>方法之间应该只有一个空行，这样有助于视觉清晰和组织。方法中的空白应该按功能分隔代码，但在一个方法中有很多段意味着你应该将它们封装进不同的方法。</li>
<li>冒号总是在左边没有空格而右边有空格。比较特殊的是三元运算符 <code>? :</code>、空字典 <code>[:]</code> 和带有未命名参数 <code>(_:)</code> 的 <code>#selector</code> 语法 .<br>推荐：<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestDatabase</span>: <span class="title class_ inherited__">Database</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> data: [<span class="type">String</span>: <span class="type">CGFloat</span>] <span class="operator">=</span> [<span class="string">&quot;A&quot;</span>: <span class="number">1.2</span>, <span class="string">&quot;B&quot;</span>: <span class="number">3.2</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>不推荐：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestDatabase</span> : <span class="title class_ inherited__">Database</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> data :[<span class="type">String</span>:<span class="type">CGFloat</span>] <span class="operator">=</span> [<span class="string">&quot;A&quot;</span> : <span class="number">1.2</span>, <span class="string">&quot;B&quot;</span>:<span class="number">3.2</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>长行应该在 70 个字符左右被换行（这里并非硬性限制，可自行调整）。<br>避免在行结尾的地方附上空白。<br>在每个文件的结尾处增加一个单独的换行符。</p>
<p><b id="comments"></b></p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>需要的时候，用注释来解释一个特定的代码片段 <strong>为什么</strong> 做某件事。注释应保持要么是最新的，要么就被删除。</p>
<p>为了避免块注释和代码内联，代码应该尽可能自文档化。 例外：这不含那些注释被用于生成文档的情况 。</p>
<p><b id="classes_and_structures"></b></p>
<h2 id="类和结构体"><a href="#类和结构体" class="headerlink" title="类和结构体"></a>类和结构体</h2><h3 id="使用哪个？"><a href="#使用哪个？" class="headerlink" title="使用哪个？"></a>使用哪个？</h3><p>请记住，结构体有 <a href="https://developer.apple.com/library/mac/documentation/Swift/Conceptual/Swift_Programming_Language/ClassesAndStructures.html#//apple_ref/doc/uid/TP40014097-CH13-XID_144">值语义</a>。对没有标识的事物应用结构体。一个包含 [a, b, c] 的数组和另一个包含 [a, b, c] 的数组是完全一样的。他们是可以完全互换的。使用第一个数组还是第二个数组都无所谓，因为他们代表着完全相同的事物。这就是为什么数组是结构体。</p>
<p>类有 <a href="https://developer.apple.com/library/mac/documentation/Swift/Conceptual/Swift_Programming_Language/ClassesAndStructures.html#//apple_ref/doc/uid/TP40014097-CH13-XID_145">引用语义</a>。对有标识或有具体生命周期的事物应用类。你需要将人建模为一个类，因为不同两个人对象是两个不同的事物。只是因为两个人拥有相同的名字和生日不意味着他们是同一个人。但是人的生日应该是一个结构体，因为 1950 年 3 月 3 日和任何其它的 1950 年 3 月 3 日日期对象是相同的。日期本身没有标识。</p>
<p>有时，事物应该是结构体但需要遵循 <code>AnyObject</code>，或在历史上已经被建模为类 （<code>NSDate</code> 、 <code>NSSet</code>）。尽可能尝试遵循这些原则。</p>
<h3 id="定义的举例"><a href="#定义的举例" class="headerlink" title="定义的举例"></a>定义的举例</h3><p>这是一个风格良好的类定义例子：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>: <span class="title class_ inherited__">Shape</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> x: <span class="type">Int</span>, y: <span class="type">Int</span></span><br><span class="line">  <span class="keyword">var</span> radius: <span class="type">Double</span></span><br><span class="line">  <span class="keyword">var</span> diameter: <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> radius <span class="operator">*</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123;</span><br><span class="line">      radius <span class="operator">=</span> newValue <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>(<span class="params">x</span>: <span class="type">Int</span>, <span class="params">y</span>: <span class="type">Int</span>, <span class="params">radius</span>: <span class="type">Double</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.x <span class="operator">=</span> x</span><br><span class="line">    <span class="keyword">self</span>.y <span class="operator">=</span> y</span><br><span class="line">    <span class="keyword">self</span>.radius <span class="operator">=</span> radius</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">convenience</span> <span class="keyword">init</span>(<span class="params">x</span>: <span class="type">Int</span>, <span class="params">y</span>: <span class="type">Int</span>, <span class="params">diameter</span>: <span class="type">Double</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.<span class="keyword">init</span>(x: x, y: y, radius: diameter <span class="operator">/</span> <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">area</span>() -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Double</span>.pi <span class="operator">*</span> radius <span class="operator">*</span> radius</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Circle</span>: <span class="title class_ inherited__">CustomStringConvertible</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;center = <span class="subst">\(centerString)</span> area = <span class="subst">\(area())</span>&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> centerString: <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;(<span class="subst">\(x)</span>,<span class="subst">\(y)</span>)&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的例子遵循了以下风格规范：</p>
<ul>
<li>用后面有空格而前面没有空格的冒号，为属性、变量、常量、参数声明和其它语句指定类型，例如：x: Int 和 Circle: Shape。</li>
<li>如果多个变量和结构体共享一个共同的目的 &#x2F; 上下文，则可以在同一行中定义。</li>
<li>缩进 getter、setter 的定义和属性观察器。</li>
<li>不要再添加如 internal 的默认修饰符。类似的，当重写一个方法时，不要再重复添加访问修饰符。</li>
<li>在扩展中组织额外功能（例如打印）。</li>
<li>隐藏非共享的实现细节，例如 centerString 在扩展中使用 private 访问控制。</li>
</ul>
<p><b id="use_of_self"></b></p>
<h3 id="Self-的使用"><a href="#Self-的使用" class="headerlink" title="Self 的使用"></a>Self 的使用</h3><p>为了简洁，请避免使用 self 关键词，Swift 不需要用它来访问一个对象属性或调用它的方法。</p>
<p>仅在编译器需要时（在 @escaping 闭包或初始化函数中，消除参数与属性的歧义）才使用 self。换句话说，如果不需要 self 就能编译通过，则可以忽略它。</p>
<p><b id="computed_properties"></b></p>
<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>为了简洁，如果一个计算属性是只读的，则可以忽略 get 子句。仅在提供了 set 子句的情况下才需要 get 子句。</p>
<p><strong>推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> diameter: <span class="type">Double</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> radius <span class="operator">*</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>不推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> diameter: <span class="type">Double</span> &#123;</span><br><span class="line">  <span class="keyword">get</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> radius <span class="operator">*</span> <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><b id="final"></b></p>
<h3 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h3><p>在教程中将类或成员标记为 <code>final</code> 会从主题分散注意力，而且也没必要。 尽管如此，<code>final</code> 的使用有时可以表明你的意图，且值得你这样做。在下面的例子中，<code>Box</code> 有特定的目的，且并不打算在派生类中自定义它。标记为 <code>final</code> 可以使它更清晰。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用这个 Box 类将任何一般类型转换为引用类型。</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Box</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> value: <span class="type">T</span></span><br><span class="line">  <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">value</span>: <span class="type">T</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.value <span class="operator">=</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><b id="function_declarations"></b></p>
<h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><p>在一行中保持较短的方法声明，包括左括号：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">reticulateSplines</span>(<span class="params">spline</span>: [<span class="type">Double</span>]) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">  <span class="comment">// 在这里写网格代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于签名较长的函数，则需在合适的位置换行，然后在后续的行中加一个额外的换行：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">reticulateSplines</span>(<span class="params">spline</span>: [<span class="type">Double</span>], <span class="params">adjustmentFactor</span>: <span class="type">Double</span>,</span><br><span class="line">    <span class="params">translateConstant</span>: <span class="type">Int</span>, <span class="params">comment</span>: <span class="type">String</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">  <span class="comment">// 在这里写网络代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><b id="function_calls"></b></p>
<h2 id="函数使用"><a href="#函数使用" class="headerlink" title="函数使用"></a>函数使用</h2><p>在一行中保持较短的函数使用，像这样：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> success <span class="operator">=</span> reticulateSplines(splines)</span><br></pre></td></tr></table></figure>

<p>如果是包装调用，则需在合适的位置换行，然后在后续的行中加一个额外的换行：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> success <span class="operator">=</span> reticulateSplines(</span><br><span class="line">  spline: splines,</span><br><span class="line">  adjustmentFactor: <span class="number">1.3</span>,</span><br><span class="line">  translateConstant: <span class="number">2</span>,</span><br><span class="line">  comment: <span class="string">&quot;normalize the display&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><b id="closure_expressions"></b></p>
<h2 id="闭包表达式"><a href="#闭包表达式" class="headerlink" title="闭包表达式"></a>闭包表达式</h2><p>仅在参数列表最后有个单独的闭包表达式参数时，使用尾随闭包语法。给闭包参数定义一个描述性的命名。</p>
<p><strong>推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">1.0</span>) &#123;</span><br><span class="line">  <span class="keyword">self</span>.myView.alpha <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">1.0</span>, animations: &#123;</span><br><span class="line">  <span class="keyword">self</span>.myView.alpha <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">&#125;, completion: &#123; finished <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">self</span>.myView.removeFromSuperview()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>不推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">1.0</span>, animations: &#123;</span><br><span class="line">  <span class="keyword">self</span>.myView.alpha <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">1.0</span>, animations: &#123;</span><br><span class="line">  <span class="keyword">self</span>.myView.alpha <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">&#125;) &#123; f <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">self</span>.myView.removeFromSuperview()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于上下文清晰的单独表达式闭包，使用隐式返回：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">attendeeList.sort &#123; a, b <span class="keyword">in</span></span><br><span class="line">  a <span class="operator">&gt;</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用尾随闭包的链式方法应该清晰且在上下文中易读。作者将自行抉择空格、换行、命名与匿名参数的使用。举例：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> value <span class="operator">=</span> numbers.map &#123; <span class="variable">$0</span> <span class="operator">*</span> <span class="number">2</span> &#125;.filter &#123; <span class="variable">$0</span> <span class="operator">%</span> <span class="number">3</span> <span class="operator">==</span> <span class="number">0</span> &#125;.index(of: <span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> value <span class="operator">=</span> numbers</span><br><span class="line">  .map &#123;<span class="variable">$0</span> <span class="operator">*</span> <span class="number">2</span>&#125;</span><br><span class="line">  .filter &#123;<span class="variable">$0</span> <span class="operator">&gt;</span> <span class="number">50</span>&#125;</span><br><span class="line">  .map &#123;<span class="variable">$0</span> <span class="operator">+</span> <span class="number">10</span>&#125;</span><br></pre></td></tr></table></figure>

<p><b id="types"></b></p>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>请尽可能多的使用 Swift 原生类型。 Swift 提供了 Objective-C 桥接，所以当你需要的时候你仍然可以使用全套方法。</p>
<p><strong>推荐:</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> width <span class="operator">=</span> <span class="number">120.0</span>                                    <span class="comment">// Double</span></span><br><span class="line"><span class="keyword">let</span> widthString <span class="operator">=</span> (width <span class="keyword">as</span> <span class="type">NSNumber</span>).stringValue    <span class="comment">// String</span></span><br></pre></td></tr></table></figure>

<p><strong>不推荐:</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> width: <span class="type">NSNumber</span> <span class="operator">=</span> <span class="number">120.0</span>                          <span class="comment">// NSNumber</span></span><br><span class="line"><span class="keyword">let</span> widthString: <span class="type">NSString</span> <span class="operator">=</span> width.stringValue        <span class="comment">// NSString</span></span><br></pre></td></tr></table></figure>
<p>在 Sprite Kit 代码中，使用 <code>CGFloat</code> 可以让你的代码避免太多转换，从而让你的代码更加简洁。</p>
<p><b id="constants"></b></p>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>使用 <code>let</code> 关键字来定义常量，使用 <code>var</code> 关键字来定义变量。如果变量的值不会改变，则要使用 <code>let</code> 来代替 <code>var</code> 。</p>
<p><strong>提示:</strong> 一个比较好的技巧就是定义所有的东西都使用 <code>let</code> , 当编译器警告的时候再改为 <code>var</code> 。</p>
<p>你可以在一个类型里面去定义常量而不是在类型的实例变量中去使用类型属性。使用 <code>static let</code> 去声明一个类型属性作为常量。用这种方式声明类型属性比声明全局变量更推荐，因为这种方式更能和实例属性区分开。举例：</p>
<p><strong>推荐:</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Math</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">let</span> e <span class="operator">=</span> <span class="number">2.718281828459045235360287</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">let</span> root2 <span class="operator">=</span> <span class="number">1.41421356237309504880168872</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hypotenuse <span class="operator">=</span> side <span class="operator">*</span> <span class="type">Math</span>.root2</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong> 使用无大小写枚举的优势，就是它不会被意外的实例化，而只是单纯的作为一个命名空间。</p>
<p><strong>不推荐:</strong></p>
<p>let e &#x3D; 2.718281828459045235360287  &#x2F;&#x2F; 污染全局命名空间<br>let root2 &#x3D; 1.41421356237309504880168872</p>
<p>let hypotenuse &#x3D; side * root2 &#x2F;&#x2F; 什么 root2?</p>
<p><b id="static_methods_and_variable_type_properties"></b></p>
<h3 id="静态方法和可变类型属性"><a href="#静态方法和可变类型属性" class="headerlink" title="静态方法和可变类型属性"></a>静态方法和可变类型属性</h3><p>静态方法和类型属性跟全局函数和全局变量的工作原理类似，应当谨慎使用。当功能的作用域是一个特定类型或需要与 Objective-C 交互时，它们非常有用。</p>
<p><b id="optionals"></b></p>
<h3 id="可选类型"><a href="#可选类型" class="headerlink" title="可选类型"></a>可选类型</h3><p>在可接受 nil 值的情况下，使用 <code>?</code> 声明变量和函数返回类型为可选类型。</p>
<p>用 <code>!</code> 声明的隐式解包类型，仅用于稍后在使用前初始化的实例变量，比如将在 <code>viewDidLoad</code> 中创建子视图。</p>
<p>当访问一个可选值时，如果值仅被访问一次或在链中有许多可选项时，使用可选链：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.textContainer<span class="operator">?</span>.textLabel<span class="operator">?</span>.setNeedsDisplay()</span><br></pre></td></tr></table></figure>
<p>当一次性解包和执行多个操作更方便时，使用可选绑定：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> textContainer <span class="operator">=</span> <span class="keyword">self</span>.textContainer &#123;</span><br><span class="line">  <span class="comment">// 用 textContainer 做很多事情</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在命名可选变量和属性时，需避免类似 <code>optionalString</code> 或 <code>maybeView</code> 这样的命名，因为他们的可选性已经体现在类型声明中了。</p>
<p>对于可选绑定，适当时使用原始名称，而不是使用像 <code>unwrappedView</code> 或 <code>actualLabel</code> 这样的名称。</p>
<p><strong>推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> subview: <span class="type">UIView</span>?</span><br><span class="line"><span class="keyword">var</span> volume: <span class="type">Double</span>?</span><br><span class="line"></span><br><span class="line"><span class="comment">// later on...</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> subview <span class="operator">=</span> subview, <span class="keyword">let</span> volume <span class="operator">=</span> volume &#123;</span><br><span class="line">  <span class="comment">// 使用展开的 subview 和 volume 做某件事</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>不推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> optionalSubview: <span class="type">UIView</span>?</span><br><span class="line"><span class="keyword">var</span> volume: <span class="type">Double</span>?</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> unwrappedSubview <span class="operator">=</span> optionalSubview &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> realVolume <span class="operator">=</span> volume &#123;</span><br><span class="line">    <span class="comment">// 使用 unwrappedSubview 和 volume 做某件事</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><b id="lazy_initialization"></b></p>
<h3 id="延迟初始化"><a href="#延迟初始化" class="headerlink" title="延迟初始化"></a>延迟初始化</h3><p>在更细粒度地控制对象声明周期时考虑使用延迟初始化。 对于 <code>UIViewController</code> ，延迟初始化视图是非常正确的。你也可以直接调用 <code>&#123; &#125;()</code> 的闭包或调用私有工厂方法。例如：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lazy</span> <span class="keyword">var</span> locationManager: <span class="type">CLLocationManager</span> <span class="operator">=</span> <span class="keyword">self</span>.makeLocationManager()</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">makeLocationManager</span>() -&gt; <span class="type">CLLocationManager</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> manager <span class="operator">=</span> <span class="type">CLLocationManager</span>()</span><br><span class="line">  manager.desiredAccuracy <span class="operator">=</span> kCLLocationAccuracyBest</span><br><span class="line">  manager.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">  manager.requestAlwaysAuthorization()</span><br><span class="line">  <span class="keyword">return</span> manager</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<ul>
<li>因为没有发生循环引用，所以这里不需要 <code>[unowned self]</code>。</li>
<li>位置管理器对弹出 UI 向用户申请权限有副作用，所以细颗粒地控制在这里是有意义的。</li>
</ul>
<p><b id="type_inference"></b></p>
<h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><p>优先选择简洁紧凑的代码，让编译器为单个实例的常量或变量推断类型。类型推断也适合于小（非空）的数组和字典。需要时，请指明特定类型，如 <code>CGFloat</code> 或 <code>Int16</code>。</p>
<p><strong>推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message <span class="operator">=</span> <span class="string">&quot;Click the button&quot;</span></span><br><span class="line"><span class="keyword">let</span> currentBounds <span class="operator">=</span> computeViewBounds()</span><br><span class="line"><span class="keyword">var</span> names <span class="operator">=</span> [<span class="string">&quot;Mic&quot;</span>, <span class="string">&quot;Sam&quot;</span>, <span class="string">&quot;Christine&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> maximumWidth: <span class="type">CGFloat</span> <span class="operator">=</span> <span class="number">106.5</span></span><br></pre></td></tr></table></figure>
<p><strong>不推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;Click the button&quot;</span></span><br><span class="line"><span class="keyword">let</span> currentBounds: <span class="type">CGRect</span> <span class="operator">=</span> computeViewBounds()</span><br><span class="line"><span class="keyword">let</span> names <span class="operator">=</span> [<span class="type">String</span>]()</span><br></pre></td></tr></table></figure>
<h4 id="空数组和空字典的类型注释"><a href="#空数组和空字典的类型注释" class="headerlink" title="空数组和空字典的类型注释"></a>空数组和空字典的类型注释</h4><p>为空数组和空字典使用类型注释。（对于分配给大型、多行文字的数组和字典，使用类型注释。）</p>
<p><strong>推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names: [<span class="type">String</span>] <span class="operator">=</span> []</span><br><span class="line"><span class="keyword">var</span> lookup: [<span class="type">String</span>: <span class="type">Int</span>] <span class="operator">=</span> [:]</span><br></pre></td></tr></table></figure>
<p><strong>不推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names <span class="operator">=</span> [<span class="type">String</span>]()</span><br><span class="line"><span class="keyword">var</span> lookup <span class="operator">=</span> [<span class="type">String</span>: <span class="type">Int</span>]()</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>遵循此原则意味着选择描述性命名比之前更重要。</p>
<p><b id="syntactic_sugar"></b></p>
<h3 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h3><p>推荐使用类型声明简短的版本，而不是完整的泛型语法。</p>
<p><strong>推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> deviceModels: [<span class="type">String</span>]</span><br><span class="line"><span class="keyword">var</span> employees: [<span class="type">Int</span>: <span class="type">String</span>]</span><br><span class="line"><span class="keyword">var</span> faxNumber: <span class="type">Int</span>?</span><br></pre></td></tr></table></figure>
<p><strong>不推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> deviceModels: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;</span><br><span class="line"><span class="keyword">var</span> employees: <span class="type">Dictionary</span>&lt;<span class="type">Int</span>, <span class="type">String</span>&gt;</span><br><span class="line"><span class="keyword">var</span> faxNumber: <span class="type">Optional</span>&lt;<span class="type">Int</span>&gt;</span><br></pre></td></tr></table></figure>

<p><b id="functions_vs_methods"></b></p>
<h2 id="函数-vs-方法"><a href="#函数-vs-方法" class="headerlink" title="函数 vs 方法"></a>函数 vs 方法</h2><p>不附属于类或类型的自有函数应该被谨慎使用。可能的话，首选方法而不是自由函数。这有助于可读性和易领悟性。</p>
<p>自由函数最适用于它们与任何特定类或实例无关的情况。</p>
<p><strong>推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sorted <span class="operator">=</span> items.mergeSorted()  <span class="comment">// 容易领悟的</span></span><br><span class="line">rocket.launch()  <span class="comment">// 模型的行为</span></span><br></pre></td></tr></table></figure>
<p><strong>不推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sorted <span class="operator">=</span> mergeSort(items)  <span class="comment">// 难以领悟的</span></span><br><span class="line">launch(<span class="operator">&amp;</span>rocket)</span><br><span class="line">自由函数异常</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tuples <span class="operator">=</span> <span class="built_in">zip</span>(a, b)  <span class="comment">// 作为自由函数感到自然（对称）</span></span><br><span class="line"><span class="keyword">let</span> value <span class="operator">=</span> <span class="built_in">max</span>(x, y, z)  <span class="comment">// 另一个感到自然的自由函数</span></span><br></pre></td></tr></table></figure>

<p><b id="memory_management"></b></p>
<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>代码 （甚至非生产环境、教程演示的代码）都不应该出现循环引用。分析你的对象图并用 <code>weak</code> 和 <code>unowned</code> 来防止强循环引用。或者，使用值类型（ <code>struct</code>、<code>enum</code> ）来彻底防止循环引用。</p>
<p><b id="extending_lifetime"></b></p>
<h3 id="延长对象的生命周期"><a href="#延长对象的生命周期" class="headerlink" title="延长对象的生命周期"></a>延长对象的生命周期</h3><p>使用惯用语法 <code>[weak self]</code> 和 <code>guard let strongSelf = self else &#123; return &#125; </code>来延长对象的生命周期。 在 <code>self</code> 超出闭包生命周期不明显的地方，<code>[weak self]</code> 更优于 <code>[unowned self]</code>。 明确地延长生命周期优于可选解包。</p>
<p><strong>推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">resource.request().onComplete &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] response <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> strongSelf <span class="operator">=</span> <span class="keyword">self</span> <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> model <span class="operator">=</span> strongSelf.updateModel(response)</span><br><span class="line">  strongSelf.updateUI(model)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>不推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果在响应返回前 self 被释放，则可能导致崩溃</span></span><br><span class="line">resource.request().onComplete &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] response <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">let</span> model <span class="operator">=</span> <span class="keyword">self</span>.updateModel(response)</span><br><span class="line">  <span class="keyword">self</span>.updateUI(model)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>不推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内存回收可以发生在更新模型和更新 UI 之间</span></span><br><span class="line">resource.request().onComplete &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] response <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">let</span> model <span class="operator">=</span> <span class="keyword">self</span><span class="operator">?</span>.updateModel(response)</span><br><span class="line">  <span class="keyword">self</span><span class="operator">?</span>.updateUI(model)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><b id="access_control"></b></p>
<h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><p>在教程中，完整的访问控制注释会分散主题且是不必要的。然而，适时地使用 <code>private</code> 和 <code>fileprivate</code> 会使代码更加清晰，也会有助于封装。 在合理情况下，<code>private</code> 要优于 <code>fileprivate</code>。 使用扩展可能会要求你使用 <code>fileprivate</code>。</p>
<p>只有需要完整的访问控制规范时，才显式地使用 <code>open</code> 、 <code>public</code> 和 <code>internal</code>。</p>
<p>将访问控制用作前置属性说明符。仅有 <code>static</code> 说明符或诸如 <code>@IBAction</code> 、 <code>@IBOutlet</code> 和 <code>@discardableResult</code> 的属性应该放在访问控制前面。</p>
<p><strong>推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">let</span> message <span class="operator">=</span> <span class="string">&quot;Great Scott!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TimeMachine</span> &#123;  </span><br><span class="line">  <span class="keyword">fileprivate</span> <span class="keyword">dynamic</span> <span class="keyword">lazy</span> <span class="keyword">var</span> fluxCapacitor <span class="operator">=</span> <span class="type">FluxCapacitor</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>不推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">let</span> message <span class="operator">=</span> <span class="string">&quot;Great Scott!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TimeMachine</span> &#123;  </span><br><span class="line">  <span class="keyword">lazy</span> <span class="keyword">dynamic</span> <span class="keyword">fileprivate</span> <span class="keyword">var</span> fluxCapacitor <span class="operator">=</span> <span class="type">FluxCapacitor</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><b id="control_flow"></b></p>
<h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><p>优先选择 <code>for</code> 循环的 <code>for-in</code> 格式而不是 <code>while-condition-increment</code> 格式。</p>
<p><strong>推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">3</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Hello three times&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (index, person) <span class="keyword">in</span> attendeeList.enumerated() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(person)</span> is at position #<span class="subst">\(index)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">0</span>, to: items.count, by: <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="built_in">print</span>(index)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> (<span class="number">0</span><span class="operator">...</span><span class="number">3</span>).reversed() &#123;</span><br><span class="line">  <span class="built_in">print</span>(index)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>不推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i <span class="operator">&lt;</span> <span class="number">3</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Hello three times&quot;</span>)</span><br><span class="line">  i <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i <span class="operator">&lt;</span> attendeeList.count &#123;</span><br><span class="line">  <span class="keyword">let</span> person <span class="operator">=</span> attendeeList[i]</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(person)</span> is at position #<span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">  i <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><b id="golden_path"></b></p>
<h2 id="黄金路径"><a href="#黄金路径" class="headerlink" title="黄金路径"></a>黄金路径</h2><p>当使用条件语句编码时，代码的左边距应该是 「黄金」或「快乐」的路径。就是不要嵌套 if 语句。多个返回语句是可以的。<code>guard</code> 语句就是因为这个创建的。</p>
<p><strong>推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">computeFFT</span>(<span class="params">context</span>: <span class="type">Context</span>?, <span class="params">inputData</span>: <span class="type">InputData</span>?) <span class="keyword">throws</span> -&gt; <span class="type">Frequencies</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> context <span class="operator">=</span> context <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="type">FFTError</span>.noContext</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> inputData <span class="operator">=</span> inputData <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="type">FFTError</span>.noInputData</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用上下文和输入计算频率</span></span><br><span class="line">  <span class="keyword">return</span> frequencies</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>不推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">computeFFT</span>(<span class="params">context</span>: <span class="type">Context</span>?, <span class="params">inputData</span>: <span class="type">InputData</span>?) <span class="keyword">throws</span> -&gt; <span class="type">Frequencies</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> context <span class="operator">=</span> context &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> inputData <span class="operator">=</span> inputData &#123;</span><br><span class="line">      <span class="comment">// 用上下文和输入计算频率</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> frequencies</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="type">FFTError</span>.noInputData</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="type">FFTError</span>.noContext</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当用 <code>guard</code> 或 <code>if let</code> 解包多个可选值时，在可能的情况下使用最下化复合版本嵌套。举例：</p>
<p><strong>推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> number1 <span class="operator">=</span> number1,</span><br><span class="line">      <span class="keyword">let</span> number2 <span class="operator">=</span> number2,</span><br><span class="line">      <span class="keyword">let</span> number3 <span class="operator">=</span> number3 <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">fatalError</span>(<span class="string">&quot;impossible&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用数字做某事</span></span><br></pre></td></tr></table></figure>
<p><strong>不推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> number1 <span class="operator">=</span> number1 &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> number2 <span class="operator">=</span> number2 &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> number3 <span class="operator">=</span> number3 &#123;</span><br><span class="line">      <span class="comment">// 用数字做某事</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">fatalError</span>(<span class="string">&quot;impossible&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">fatalError</span>(<span class="string">&quot;impossible&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">fatalError</span>(<span class="string">&quot;impossible&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><b id="failing_guards"></b></p>
<h3 id="失败防护"><a href="#失败防护" class="headerlink" title="失败防护"></a>失败防护</h3><p>对于用某些方法退出，防护语句是必要的。一般地，它应该是一行简洁的语句，比如： <code>return</code> 、 <code>throw</code> 、 <code>break</code> 、 <code>continue</code> 和 <code>fatalError()</code>。应该避免大的代码块。如果清理代码被用在多个退出点，则可以考虑用 <code>defer</code> 块来避免清理代码的重复。</p>
<p><b id="semicolons"></b></p>
<h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><p>在 <code>Swift</code> 中，每条代码语句后面都不需要加分号。只有在你希望在一行中结合多条语句，才需要加分号。</p>
<p>不要在用分号分隔的单行中写多条语句。</p>
<p>推荐：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> swift <span class="operator">=</span> <span class="string">&quot;not a scripting language&quot;</span></span><br></pre></td></tr></table></figure>
<p>不推荐：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> swift <span class="operator">=</span> <span class="string">&quot;not a scripting language&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>注：Swift 非常不同于 JavaScript。在 JavaScript 中忽略分号 <a href="http://stackoverflow.com/questions/444080/do-you-recommend-using-semicolons-after-every-statement-in-javascript">一般被认为不安全</a>。</p>
<p><b id="parentheses"></b></p>
<h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p>条件周围的括号是不必要的，应该被忽略。</p>
<p><strong>推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> name <span class="operator">==</span> <span class="string">&quot;Hello&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;World&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="不推荐："><a href="#不推荐：" class="headerlink" title="不推荐："></a>不推荐：</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (name <span class="operator">==</span> <span class="string">&quot;Hello&quot;</span>) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;World&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在更大的表达式中，可选括号有时可以让代码读起来更清晰。</p>
<p><strong>推荐：</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> playerMark <span class="operator">=</span> (player <span class="operator">==</span> current <span class="operator">?</span> <span class="string">&quot;X&quot;</span> : <span class="string">&quot;O&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><b id="organization_and_bundle_indentifier"></b></p>
<h2 id="组织和包-ID"><a href="#组织和包-ID" class="headerlink" title="组织和包 ID"></a>组织和包 ID</h2><p>涉及到 Xcode 项目的地方，组织应该被设置为 <code>Ray Wenderlich</code> 并且包 ID 应该被设置为 <code>com.razeware.TutorialName</code> ，其中 <code>TutorialName</code> 是教程项目的名字。<br><img data-src="https://gitee.com/woailvkai/Kaaaaai.tool.oss/raw/uPic/uPic/zlcCZh-2020%2007%2020.jpg" alt="zlcCZh-20200720"></p>
<p><b id="references"></b></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://swift.org/documentation/api-design-guidelines/">Swift API 设计规范</a></li>
<li><a href="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/index.html">Swift 编程语言</a></li>
<li><a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html">Swift 与 Cocoa 和 Objective-C 一起使用</a></li>
<li><a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Reference/SwiftStandardLibraryReference/index.html">Swift 标准库参考</a></li>
</ul>
<p>Aufree</p>
<blockquote>
<p>原文地址：<a href="https://github.com/raywenderlich/swift-style-guide#memory-management">https://github.com/raywenderlich/swift-s...</a></p>
</blockquote>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>喘口气上来</title>
    <url>//happy-new-year-2019.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　问朋友今年用什么字总结，他说，一。意思大概是一年都在原地踏步，年头年尾的状态没什么区别。我没有回他。<br>　　<span id="more"></span><br>　　今年换了一份新的工作，状况比去年的好上很多，去年没来得及和朋友说的展望词，今年恰好可以作为总结——“木”：总算是从原来的处境脱身出来，另外也存了一些小钱。比起工作和休息，我反倒喜欢找工作，坐着公交地铁在城市里穿来穿去的感觉，固然傍晚回家会有点风尘仆仆的疲惫，甚至某天面试很糟糕的时候，看着车水马龙的城市，想到万家灯火，何处有我那盏，会有点泄气。但那时候觉得很自由，而且目的是为了找工作，并不是漫无目的的奔波，自由，且自由得很踏实。<br>　　和一个女性朋友说起我找工作就当观光的事，她说我很乐观。我收下了她的称赞，也很乐意把我好的一面给她看，她离我很远，那会找工作，蓦然间看到一个很像她的人，便和她说了一声， 还说了电影里看到和她气质很像的人，后来我们有一阵子联系很频繁，说了很多琐事，互相交换了烦恼，我忘记，我们说了那么多，我有没有告诉她我很想她。再后来就没有联系了。<br>　　疏于和旧日朋友联系这大概是我今年不好的变化吧。到现在我也还没问我那位朋友 2019 年的展望词是什么。另一位朋友常打电话过来聊天，我也大部分时间都以一种不耐烦，拒绝配合的态度应付，当然一部分也有他太啰嗦的缘故，但我想按着我去年心态好的时候，大概会以一种朋友在胡闹，我除了原谅还能有什么办法的态度和他愉快的聊下去。和他有一段以最近书店里出的新书都没法看，老书才是经典的观点开始的对话，后面我说他是不是有些焦虑，对自己或者出来以后有很多怀才不遇的感慨，他犹豫着点头说是。现在回过头去看，他变得啰嗦是因为焦虑的缘故，我对人对事的不耐烦又何尝不是。<br>　　找到工作后生活就规律了很多，新公司的同事们都很友好，也在去年的基础上学了点新的东西。和公司旅游的时候惊讶的发现上司是个塞尔达粉，后来我们就交换游戏机玩，n3ds 和 ps4 让我废寝忘食。上半年的学习计划到了下半年流产也大半是因为这个原因。夏天的时候去学了游泳，从在心里说服自己克服恐惧，到在水里站起来还能游一个来回，整个过程让我感觉很有成就感。<br>　　今年看的书没有去年多，去电影院倒是比去年多多了，《江湖儿女》里有个地方让我印象深刻，斌哥还是出租车公司老总的时候，走路上被小年轻用钢管敲断了小腿，疼半天只是冲车子消失的地方喊了句，不至于吧。但后面中风偏瘫的时候却因为小弟的小弟先上主食后上菜说他没有规矩而大发雷霆把桌子翻了。境遇让人的心态变好又变坏，之前有些悲观，把自己个性签名写，心由境生。现在看起来像个黑色幽默——不由得想起我对自己其他的悲观的预见性结论了。<br>　　今年作为从去年的困境脱离的过渡期，好和不好都有一些，勉强给自己的表现打个及格分。来年的展望词是林，希望明年可以存更多的钱，多吃蔬菜，减轻体重，可以有“阵阵晚风吹动着松涛，只有青山藏在白云间”的心态，可以境由心生。
　
　　
　</p>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>年终总结</tag>
        <tag>江湖体验报告</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS - Objective-C 开发规范</title>
    <url>//objective-c-style-guide.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><em><strong>规范文档翻译自 <a href="https://github.com/raywenderlich/objective-c-style-guide">raywenderlich.com 的编码规范</a></strong></em></p>
<h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>应该使用US英语.</p>
<p><strong>应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIColor</span> *myColor = [<span class="built_in">UIColor</span> whiteColor];</span><br></pre></td></tr></table></figure>

<p><strong>不应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIColor</span> *myColour = [<span class="built_in">UIColor</span> whiteColor];</span><br></pre></td></tr></table></figure>

<h2 id="代码组织"><a href="#代码组织" class="headerlink" title="代码组织"></a>代码组织</h2><p>在函数分组和protocol&#x2F;delegate实现中使用<code>#pragma mark -</code>来分类方法，要遵循以下一般结构：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - Lifecycle</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;&#125;</span><br><span class="line">- (<span class="type">void</span>)dealloc &#123;&#125;</span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;&#125;</span><br><span class="line">- (<span class="type">void</span>)viewWillAppear:(<span class="type">BOOL</span>)animated &#123;&#125;</span><br><span class="line">- (<span class="type">void</span>)didReceiveMemoryWarning &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - Custom Accessors</span></span><br><span class="line">- (<span class="type">void</span>)setCustomProperty:(<span class="type">id</span>)value &#123;&#125;</span><br><span class="line">- (<span class="type">id</span>)customProperty &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - IBActions/Event Response</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)submitData:(<span class="type">id</span>)sender &#123;&#125;</span><br><span class="line">- (<span class="type">void</span>)someButtonDidPressed:(<span class="built_in">UIButton</span>*)button</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - Protocol conformance</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - UITextFieldDelegate</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - UITableViewDataSource</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - UITableViewDelegate</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - Public</span></span><br><span class="line">- (<span class="type">void</span>)publicMethod &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - Private</span></span><br><span class="line">- (<span class="type">void</span>)privateMethod &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - NSCopying</span></span><br><span class="line">- (<span class="type">id</span>)copyWithZone:(<span class="built_in">NSZone</span> *)zone &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark - NSObject</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)description &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><ul>
<li>缩进使用<strong>4</strong>个空格，确保在Xcode偏好设置来设置。(raywenderlich.com使用<strong>2</strong>个空格)</li>
<li>方法大括号和其他大括号(<code>if</code>&#x2F;<code>else</code>&#x2F;<code>switch</code>&#x2F;<code>while</code> 等.)总是在同一行语句打开但在新行中关闭。</li>
</ul>
<p><strong>应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (user.isHappy) &#123;</span><br><span class="line">    <span class="comment">//Do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//Do something else</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>不应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (user.isHappy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//Do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//Do something else</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在方法之间应该有且只有一行，这样有利于在视觉上更清晰和更易于组织。在方法内的空白应该分离功能，但通常都抽离出来成为一个新方法。</li>
<li>优先使用auto-synthesis。但如果有必要，<code>@synthesize</code> 和 <code>@dynamic</code>应该在实现中每个都声明新的一行。</li>
<li>应该避免以冒号对齐的方式来调用方法。因为有时方法签名可能有3个以上的冒号和冒号对齐会使代码更加易读。请<strong>不要</strong>这样做，尽管冒号对齐的方法包含代码块，因为Xcode的对齐方式令它难以辨认。</li>
</ul>
<p><strong>应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// blocks are easily readable</span></span><br><span class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">1.0</span> animations:^&#123;</span><br><span class="line">  <span class="comment">// something</span></span><br><span class="line">&#125; completion:^(<span class="type">BOOL</span> finished) &#123;</span><br><span class="line">  <span class="comment">// something</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p><strong>不应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// colon-aligning makes the block indentation hard to read</span></span><br><span class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">1.0</span></span><br><span class="line">                 animations:^&#123;</span><br><span class="line">                     <span class="comment">// something</span></span><br><span class="line">                 &#125;</span><br><span class="line">                 completion:^(<span class="type">BOOL</span> finished) &#123;</span><br><span class="line">                     <span class="comment">// something</span></span><br><span class="line">                 &#125;];</span><br></pre></td></tr></table></figure>

<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>当需要注释时，注释应该用来解释这段特殊代码<strong>为什么</strong>要这样做。任何被使用的注释都必须保持最新或被删除。</p>
<p>一般都避免使用块注释，因为代码尽可能做到自解释，只有当断断续续或几行代码时才需要注释。<em>例外：这不应用在生成文档的注释</em></p>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>Apple命名规则尽可能坚持，特别是与这些相关的<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html">memory management rules</a> (<a href="http://stackoverflow.com/a/2865194/340508">NARC</a>)。</p>
<p>长的，描述性的方法和变量命名是好的。</p>
<p><strong>应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIButton</span> *settingsButton;</span><br></pre></td></tr></table></figure>

<p><strong>不应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIButton</span> *setBut;</span><br></pre></td></tr></table></figure>

<p>三个字符前缀应该经常用在类和常量命名，但在Core Data的实体名中应被忽略。对于官方的raywenderlich.com书、初学者工具包或教程，前缀’RWT’应该被使用。</p>
<p>常量应该使用驼峰式命名规则，所有的单词首字母大写和加上与类名有关的前缀。</p>
<p><strong>应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSTimeInterval</span> <span class="keyword">const</span> RWTTutorialViewControllerNavigationFadeAnimationDuration = <span class="number">0.3</span>;</span><br></pre></td></tr></table></figure>

<p><strong>不应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSTimeInterval</span> <span class="keyword">const</span> fadetime = <span class="number">1.7</span>;</span><br></pre></td></tr></table></figure>

<p>属性也是使用驼峰式，但首单词的首字母小写。对属性使用auto-synthesis，而不是手动编写@ synthesize语句，除非你有一个好的理由。</p>
<p><strong>应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *descriptiveVariableName;</span><br></pre></td></tr></table></figure>

<p><strong>不应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="type">id</span> varnm;</span><br></pre></td></tr></table></figure>

<h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>当使用属性时，实例变量应该使用<code>self.</code>来访问和改变。这就意味着所有属性将会视觉效果不同，因为它们前面都有<code>self.</code>。</p>
<p>但有一个特例：在初始化方法里，实例变量(例如，_variableName)应该直接被使用来避免getters&#x2F;setters潜在的副作用。</p>
<p>局部变量不应该包含下划线。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>在方法签名中，应该在方法类型(-&#x2F;+ 符号)之后有一个空格。在方法各个段之间应该也有一个空格(符合Apple的风格)。在参数之前应该包含一个具有描述性的关键字来描述参数。</p>
<p>“and”这个词的用法应该保留。它不应该用于多个参数来说明，就像<code>initWithWidth:height</code>以下这个例子：</p>
<p><strong>应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="type">void</span>)setExampleText:(<span class="built_in">NSString</span> *)text image:(<span class="built_in">UIImage</span> *)image;</span><br><span class="line">- (<span class="type">void</span>)sendAction:(SEL)aSelector to:(<span class="type">id</span>)anObject forAllCells:(<span class="type">BOOL</span>)flag;</span><br><span class="line">- (<span class="type">id</span>)viewWithTag:(<span class="built_in">NSInteger</span>)tag;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithWidth:(<span class="built_in">CGFloat</span>)width height:(<span class="built_in">CGFloat</span>)height;</span><br></pre></td></tr></table></figure>

<p><strong>不应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">-(<span class="type">void</span>)setT:(<span class="built_in">NSString</span> *)text i:(<span class="built_in">UIImage</span> *)image;</span><br><span class="line">- (<span class="type">void</span>)sendAction:(SEL)aSelector :(<span class="type">id</span>)anObject :(<span class="type">BOOL</span>)flag;</span><br><span class="line">- (<span class="type">id</span>)taggedView:(<span class="built_in">NSInteger</span>)tag;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithWidth:(<span class="built_in">CGFloat</span>)width andHeight:(<span class="built_in">CGFloat</span>)height;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWith:(<span class="type">int</span>)width and:(<span class="type">int</span>)height;  <span class="comment">// Never do this.</span></span><br></pre></td></tr></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量尽量以描述性的方式来命名。单个字符的变量命名应该尽量避免，除了在<code>for()</code>循环。</p>
<p>星号表示变量是指针。例如， <code>NSString *text</code> 既不是 <code>NSString* text</code> 也不是 <code>NSString * text</code>，除了一些特殊情况下常量。</p>
<p><a href="#private-properties">私有变量</a> 应该尽可能代替实例变量的使用。尽管使用实例变量是一种有效的方式，但更偏向于使用属性来保持代码一致性。</p>
<p>通过使用’back’属性(_variable，变量名前面有下划线)直接访问实例变量应该尽量避免，除了在初始化方法(<code>init</code>, <code>initWithCoder:</code>, 等…)，<code>dealloc</code> 方法和自定义的setters和getters。想了解关于如何在初始化方法和dealloc直接使用Accessor方法的更多信息，查看<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmPractical.html#//apple_ref/doc/uid/TP40004447-SW6">这里</a></p>
<p><strong>应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RWTTutorial</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *tutorialName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p><strong>不应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RWTTutorial</span> : <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">  <span class="built_in">NSString</span> *tutorialName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="属性特性"><a href="#属性特性" class="headerlink" title="属性特性"></a>属性特性</h2><p>所有属性特性应该显式地列出来，有助于新手阅读代码。属性特性的顺序应该是storage、atomicity，与在Interface Builder连接UI元素时自动生成代码一致。</p>
<p><strong>应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIView</span> *containerView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *tutorialName;</span><br></pre></td></tr></table></figure>

<p><strong>不应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIView</span> *containerView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *tutorialName;</span><br></pre></td></tr></table></figure>

<p>NSString应该使用<code>copy</code> 而不是 <code>strong</code>的属性特性。</p>
<p>为什么？即使你声明一个<code>NSString</code>的属性，有人可能传入一个<code>NSMutableString</code>的实例，然后在你没有注意的情况下修改它。 </p>
<p><strong>应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *tutorialName;</span><br></pre></td></tr></table></figure>

<p><strong>不应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *tutorialName;</span><br></pre></td></tr></table></figure>

<h2 id="点符号语法"><a href="#点符号语法" class="headerlink" title="点符号语法"></a>点符号语法</h2><p>点语法是一种很方便封装访问方法调用的方式。当你使用点语法时，通过使用getter或setter方法，属性仍然被访问或修改。想了解更多，阅读<a href="https://developer.apple.com/library/ios/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html">这里</a></p>
<p>点语法应该<strong>总是</strong>被用来访问和修改属性，因为它使代码更加简洁。[]符号更偏向于用在其他例子。</p>
<p><strong>应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSInteger</span> arrayCount = [<span class="keyword">self</span>.array count];</span><br><span class="line">view.backgroundColor = [<span class="built_in">UIColor</span> orangeColor];</span><br><span class="line">[<span class="built_in">UIApplication</span> sharedApplication].delegate;</span><br></pre></td></tr></table></figure>

<p><strong>不应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSInteger</span> arrayCount = <span class="keyword">self</span>.array.count;</span><br><span class="line">[view setBackgroundColor:[<span class="built_in">UIColor</span> orangeColor]];</span><br><span class="line"><span class="built_in">UIApplication</span>.sharedApplication.delegate;</span><br></pre></td></tr></table></figure>

<h2 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h2><p><code>NSString</code>, <code>NSDictionary</code>, <code>NSArray</code>, 和 <code>NSNumber</code>的字面值应该在创建这些类的不可变实例时被使用。请特别注意<code>nil</code>值不能传入<code>NSArray</code>和<code>NSDictionary</code>字面值，因为这样会导致crash。</p>
<p><strong>应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *names = @[<span class="string">@&quot;Brian&quot;</span>, <span class="string">@&quot;Matt&quot;</span>, <span class="string">@&quot;Chris&quot;</span>, <span class="string">@&quot;Alex&quot;</span>, <span class="string">@&quot;Steve&quot;</span>, <span class="string">@&quot;Paul&quot;</span>];</span><br><span class="line"><span class="built_in">NSDictionary</span> *productManagers = @&#123;<span class="string">@&quot;iPhone&quot;</span>: <span class="string">@&quot;Kate&quot;</span>, <span class="string">@&quot;iPad&quot;</span>: <span class="string">@&quot;Kamal&quot;</span>, <span class="string">@&quot;Mobile Web&quot;</span>: <span class="string">@&quot;Bill&quot;</span>&#125;;</span><br><span class="line"><span class="built_in">NSNumber</span> *shouldUseLiterals = @YES;</span><br><span class="line"><span class="built_in">NSNumber</span> *buildingStreetNumber = @<span class="number">10018</span>;</span><br></pre></td></tr></table></figure>

<p><strong>不应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *names = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@&quot;Brian&quot;</span>, <span class="string">@&quot;Matt&quot;</span>, <span class="string">@&quot;Chris&quot;</span>, <span class="string">@&quot;Alex&quot;</span>, <span class="string">@&quot;Steve&quot;</span>, <span class="string">@&quot;Paul&quot;</span>, <span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSDictionary</span> *productManagers = [<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys: <span class="string">@&quot;Kate&quot;</span>, <span class="string">@&quot;iPhone&quot;</span>, <span class="string">@&quot;Kamal&quot;</span>, <span class="string">@&quot;iPad&quot;</span>, <span class="string">@&quot;Bill&quot;</span>, <span class="string">@&quot;Mobile Web&quot;</span>, <span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSNumber</span> *shouldUseLiterals = [<span class="built_in">NSNumber</span> numberWithBool:<span class="literal">YES</span>];</span><br><span class="line"><span class="built_in">NSNumber</span> *buildingStreetNumber = [<span class="built_in">NSNumber</span> numberWithInteger:<span class="number">10018</span>];</span><br></pre></td></tr></table></figure>

<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量是容易重复被使用和无需通过查找和代替就能快速修改值。常量应该使用<code>static</code>来声明而不是使用<code>#define</code>，除非显式地使用宏。</p>
<p><strong>应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> RWTAboutViewControllerCompanyName = <span class="string">@&quot;RayWenderlich.com&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> <span class="keyword">const</span> RWTImageThumbnailHeight = <span class="number">50.0</span>;</span><br></pre></td></tr></table></figure>

<p><strong>不应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CompanyName @<span class="string">&quot;RayWenderlich.com&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> thumbnailHeight 2</span></span><br></pre></td></tr></table></figure>

<h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>当使用<code>enum</code>时，推荐使用新的固定基本类型规格，因为它有更强的类型检查和代码补全。现在SDK有一个宏<code>NS_ENUM()</code>来帮助和鼓励你使用固定的基本类型。</p>
<p><strong>例如:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, RWTLeftMenuTopItemType) &#123;</span><br><span class="line">  RWTLeftMenuTopItemMain,</span><br><span class="line">  RWTLeftMenuTopItemShows,</span><br><span class="line">  RWTLeftMenuTopItemSchedule</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>你也可以显式地赋值(展示旧的k-style常量定义)：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, RWTGlobalConstants) &#123;</span><br><span class="line">  RWTPinSizeMin = <span class="number">1</span>,</span><br><span class="line">  RWTPinSizeMax = <span class="number">5</span>,</span><br><span class="line">  RWTPinCountMin = <span class="number">100</span>,</span><br><span class="line">  RWTPinCountMax = <span class="number">500</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>旧的k-style常量定义应该<strong>避免</strong>除非编写Core Foundation C的代码。</p>
<p><strong>不应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> GlobalConstants &#123;</span><br><span class="line">  kMaxPinSize = <span class="number">5</span>,</span><br><span class="line">  kMaxPinCount = <span class="number">500</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Case语句"><a href="#Case语句" class="headerlink" title="Case语句"></a>Case语句</h2><p>大括号在case语句中并不是必须的，除非编译器强制要求。当一个case语句包含多行代码时，大括号应该加上。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (condition) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// Multi-line example using braces</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>: </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>有很多次，当相同代码被多个cases使用时，一个fall-through应该被使用。一个fall-through就是在case最后移除’break’语句，这样就能够允许执行流程跳转到下一个case值。为了代码更加清晰，一个fall-through需要注释一下。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (condition) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment">// ** fall-through! **</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="comment">// code executed for values 1 and 2</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>: </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当在switch使用枚举类型时，’default’是不需要的。例如：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">RWTLeftMenuTopItemType menuType = RWTLeftMenuTopItemMain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (menuType) &#123;</span><br><span class="line">  <span class="keyword">case</span> RWTLeftMenuTopItemMain:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> RWTLeftMenuTopItemShows:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> RWTLeftMenuTopItemSchedule:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h2><p>私有属性应该在类的实现文件中的类扩展(匿名分类)中声明，命名分类(比如<code>RWTPrivate </code>或<code>private</code>)应该从不使用除非是扩展其他类。匿名分类应该通过使用<headerfile>+Private.h文件的命名规则暴露给测试。</p>
<p><strong>例如:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RWTDetailViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) GADBannerView *googleAdView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) ADBannerView *iAdView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIWebView</span> *adXWebView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>Objective-C使用<code>YES</code>和<code>NO</code>。因为<code>true</code>和<code>false</code>应该只在CoreFoundation，C或C++代码使用。既然<code>nil</code>解析成<code>NO</code>，所以没有必要在条件语句比较。不要拿某样东西直接与<code>YES</code>比较，因为<code>YES</code>被定义为1和一个<code>BOOL</code>能被设置为8位。</p>
<p>这是为了在不同文件保持一致性和在视觉上更加简洁而考虑。</p>
<p><strong>应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (someObject) &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> (![anotherObject boolValue]) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>不应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (someObject == <span class="literal">nil</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> ([anotherObject boolValue] == <span class="literal">NO</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> (isAwesome == <span class="literal">YES</span>) &#123;&#125; <span class="comment">// Never do this.</span></span><br><span class="line"><span class="keyword">if</span> (isAwesome == <span class="literal">true</span>) &#123;&#125; <span class="comment">// Never do this.</span></span><br></pre></td></tr></table></figure>

<p>如果<code>BOOL</code>属性的名字是一个形容词，属性就能忽略”is”前缀，但要指定get访问器的惯用名称。例如：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">getter</span>=isEditable) <span class="type">BOOL</span> editable;</span><br></pre></td></tr></table></figure>

<p>文字和例子从这里引用<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-BAJGIIJE">Cocoa Naming Guidelines</a></p>
<h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>条件语句主体为了防止出错应该使用大括号包围，即使条件语句主体能够不用大括号编写(如，只用一行代码)。这些错误包括添加第二行代码和期望它成为if语句；还有，<a href="http://programmers.stackexchange.com/a/16530">even more dangerous defect</a>可能发生在if语句里面一行代码被注释了，然后下一行代码不知不觉地成为if语句的一部分。除此之外，这种风格与其他条件语句的风格保持一致，所以更加容易阅读。</p>
<p><strong>应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!error) &#123;</span><br><span class="line">  <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>不应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!error)</span><br><span class="line">  <span class="keyword">return</span> success;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!error) <span class="keyword">return</span> success;</span><br></pre></td></tr></table></figure>

<h3 id="三元操作符"><a href="#三元操作符" class="headerlink" title="三元操作符"></a>三元操作符</h3><p>当需要提高代码的清晰性和简洁性时，三元操作符<code>?:</code>才会使用。单个条件求值常常需要它。多个条件求值时，如果使用<code>if</code>语句或重构成实例变量时，代码会更加易读。一般来说，最好使用三元操作符是在根据条件来赋值的情况下。</p>
<p>Non-boolean的变量与某东西比较，加上括号()会提高可读性。如果被比较的变量是boolean类型，那么就不需要括号。</p>
<p><strong>应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSInteger</span> value = <span class="number">5</span>;</span><br><span class="line">result = (value != <span class="number">0</span>) ? x : y;</span><br><span class="line"></span><br><span class="line"><span class="type">BOOL</span> isHorizontal = <span class="literal">YES</span>;</span><br><span class="line">result = isHorizontal ? x : y;</span><br></pre></td></tr></table></figure>

<p><strong>不应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">result = a &gt; b ? x = c &gt; d ? c : d : y;</span><br></pre></td></tr></table></figure>

<h2 id="Init方法"><a href="#Init方法" class="headerlink" title="Init方法"></a>Init方法</h2><p>Init方法应该遵循Apple生成代码模板的命名规则。返回类型应该使用<code>instancetype</code>而不是<code>id</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">  <span class="keyword">self</span> = [<span class="variable language_">super</span> init];</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看关于instancetype的文章<a href="#class-constructor-methods">Class Constructor Methods</a></p>
<h2 id="类构造方法"><a href="#类构造方法" class="headerlink" title="类构造方法"></a>类构造方法</h2><p>当类构造方法被使用时，它应该返回类型是<code>instancetype </code>而不是<code>id</code>。这样确保编译器正确地推断结果类型。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Airplane</span></span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)airplaneWithType:(RWTAirplaneType)type;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>关于更多instancetype信息，请查看<a href="http://nshipster.com/instancetype/">NSHipster.com</a></p>
<h2 id="CGRect函数"><a href="#CGRect函数" class="headerlink" title="CGRect函数"></a>CGRect函数</h2><p>当访问<code>CGRect</code>里的<code>x</code>, <code>y</code>, <code>width</code>, 或 <code>height</code>时，应该使用<a href="http://developer.apple.com/library/ios/#documentation/graphicsimaging/reference/CGGeometry/Reference/reference.html"><code>CGGeometry</code>函数</a>而不是直接通过结构体来访问。引用Apple的<code>CGGeometry </code>:</p>
<blockquote>
<p>在这个参考文档中所有的函数，接受CGRect结构体作为输入，在计算它们结果时隐式地标准化这些rectangles。因此，你的应用程序应该避免直接访问和修改保存在CGRect数据结构中的数据。相反，使用这些函数来操纵rectangles和获取它们的特性。</p>
</blockquote>
<p><strong>应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGRect</span> frame = <span class="keyword">self</span>.view.frame;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CGFloat</span> x = <span class="built_in">CGRectGetMinX</span>(frame);</span><br><span class="line"><span class="built_in">CGFloat</span> y = <span class="built_in">CGRectGetMinY</span>(frame);</span><br><span class="line"><span class="built_in">CGFloat</span> width = <span class="built_in">CGRectGetWidth</span>(frame);</span><br><span class="line"><span class="built_in">CGFloat</span> height = <span class="built_in">CGRectGetHeight</span>(frame);</span><br><span class="line"><span class="built_in">CGRect</span> frame = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, width, height);</span><br></pre></td></tr></table></figure>

<p><strong>不应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGRect</span> frame = <span class="keyword">self</span>.view.frame;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CGFloat</span> x = frame.origin.x;</span><br><span class="line"><span class="built_in">CGFloat</span> y = frame.origin.y;</span><br><span class="line"><span class="built_in">CGFloat</span> width = frame.size.width;</span><br><span class="line"><span class="built_in">CGFloat</span> height = frame.size.height;</span><br><span class="line"><span class="built_in">CGRect</span> frame = (<span class="built_in">CGRect</span>)&#123; .origin = <span class="built_in">CGPointZero</span>, .size = frame.size &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="黄金路径"><a href="#黄金路径" class="headerlink" title="黄金路径"></a>黄金路径</h2><p>当使用条件语句编码时，左手边的代码应该是”golden” 或 “happy”路径。也就是不要嵌套<code>if</code>语句，多个返回语句也是OK。</p>
<p><strong>应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="type">void</span>)someMethod &#123;</span><br><span class="line">  <span class="keyword">if</span> (![someOther boolValue]) &#123;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Do something important</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>不应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="type">void</span>)someMethod &#123;</span><br><span class="line">  <span class="keyword">if</span> ([someOther boolValue]) &#123;</span><br><span class="line">    <span class="comment">//Do something important</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>当方法通过引用来返回一个错误参数，判断返回值而不是错误变量。</p>
<p><strong>应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSError</span> *error;</span><br><span class="line"><span class="keyword">if</span> (![<span class="keyword">self</span> trySomethingWithError:&amp;error]) &#123;</span><br><span class="line">  <span class="comment">// Handle Error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>不应该:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSError</span> *error;</span><br><span class="line">[<span class="keyword">self</span> trySomethingWithError:&amp;error];</span><br><span class="line"><span class="keyword">if</span> (error) &#123;</span><br><span class="line">  <span class="comment">// Handle Error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在成功的情况下，有些Apple的APIs记录垃圾值(garbage values)到错误参数(如果non-NULL)，那么判断错误值会导致false负值和crash。</p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例对象应该使用线程安全模式来创建共享实例。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+ (<span class="keyword">instancetype</span>)sharedInstance &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="type">id</span> sharedInstance = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">  <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">    sharedInstance = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sharedInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这会防止<a href="http://cocoasamurai.blogspot.com/2011/04/singletons-your-doing-them-wrong.html">possible and sometimes prolific crashes</a>.</p>
<h2 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h2><p>换行符是一个很重要的主题，因为它的风格指南主要为了打印和网上的可读性。</p>
<p>例如:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.productsRequest = [[<span class="built_in">SKProductsRequest</span> alloc] initWithProductIdentifiers:productIdentifiers];</span><br></pre></td></tr></table></figure>

<p>一行很长的代码应该分成两行代码，下一行用两个空格隔开。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.productsRequest = [[<span class="built_in">SKProductsRequest</span> alloc] </span><br><span class="line">  initWithProductIdentifiers:productIdentifiers];</span><br></pre></td></tr></table></figure>

<h2 id="Xcode工程"><a href="#Xcode工程" class="headerlink" title="Xcode工程"></a>Xcode工程</h2><p>物理文件应该与Xcode工程文件保持同步来避免文件扩张。任何Xcode分组的创建应该在文件系统的文件体现。代码不仅是根据<strong>类型</strong>来分组，而且还可以根据<strong>功能</strong>来分组，这样代码更加清晰。</p>
<p>尽可能在target的Build Settings打开”Treat Warnings as Errors，和启用以下<a href="http://boredzo.org/blog/archives/2009-11-07/warnings">additional warnings</a>。如果你需要忽略特殊的警告，使用 <a href="http://clang.llvm.org/docs/UsersManual.html#controlling-diagnostics-via-pragmas">Clang’s pragma feature</a>。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>OC</tag>
      </tags>
  </entry>
  <entry>
    <title>半把瘾</title>
    <url>//after-reading-wangsuo.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　前阵子在看王朔的全集，94 年出版的，当时大概还是王朔人正当红，全集有四本——《纯情卷》、《谐虐卷》、《矫情卷》、《挚情卷》，四本书的封面上都印着王朔年轻的脸。看了两本半，后来就放下去看其他的书了，原本是想看完全集，得到一个完整印象才写读后感，但想到放下就不知道什么时候会重新拿起来，索性就按看过的部分写一篇感想。<br>　　以纯情小说出道的王朔，爱情主题在他的作品里占有很大的比重，不过作者的自觉性又让他没有一条道走到黑，也正是因为这种自觉让他在千篇一律的名家作品中有自己的位置，提到王朔，人们常会说他的语言风格，文笔， 反传统。从高处去看，褒和贬都各有各自的拥趸。我无意做非黑即白的定论，所以只说看到的几个有趣的小细节。<br>　　先前说到王朔的自觉，写作的自觉是一部分，对自己认识的自觉又是另一部分，当然因为写出来成文的原因大概也免不了多少粉饰自己，比如这段：</p>
<blockquote>
<p>　　那些一本正经的道德君子和实开家们就一定比用放荡的方式逃避两旁的人生活得更有意义。我只是想说，我是个世俗观念很强的人。我很在乎面子、名利以及在别人眼中的价值。和不想从年轻时就鬼混一生。我不是亿万富翁颓废的继承者，我的野心和自尊使我不甘沦落，我要有我的那一席之地。我没有可供挥霍的资本，我必须像个初到一大城市的究光蛋在新社会里一点点积聚起自己的财富。所以你可以得出结论：我决意告别放荡的生活不是出于顿悟、悔过，仅是一贯的自私个性必定使然。</p>
</blockquote>
<p>　　虽然有看的见的诚恳，但以王朔的聪明也定然可以料到把自己放低诚恳交待自己，这种混不吝磊落的做法容易博得人好感，这是一种讨巧式的坦白。在王朔的故事里，许多以“我”第一人称为视角的故事里，多多少少有这样的自述，所以在看书的时候很多时候我总是能感受到都溢出来的王朔的自我。如果说一个好的作家是在作品把自我消去，那王朔在这点上恰好走了相反的路。<br>　　陈述自己如果解释成是王朔对自己的态度，那书里穿插的大量对话，大概可以解读成对外，对世界的态度，对精英主义的消解，对父权的反抗等等，王朔很会写对话，除了那些刻意隐射的对话，也有许多有趣的：</p>
<blockquote>
<p>　　“你们的女的就这点叫我瞧不上，见个人就把心掏出来一份换一份农贸市场卖菜的似的，人家要不换或挑挑你们就不干了。” “什么叫我们女的是农贸市场小贩？”夏青嗓门也拨高了，”你们男的才是呢，人家来转转，你们就吆喝着非拉着人家买，人家真买了就缺斤短两坑人家。”<br>　　李江云笑着对懵了头的新娘说：“还没明白，他们胡扯呢。”“你结婚了么？”吴胖子一本正经地问李江云。 “没有。”李江云笑着看看他，又看看我们，撇了下嘴。 “该结了。”吴胖子语重心长。“挺大年细了，就说有几分姿色吧，也没几天了。”“谢谢，我已经了，不用你操心。”李江云笑。 “那就更好了。”吴胖子说，“那就该考虑找个性了。婚已经结了，该尽的义务已经尽了，该排除其它顾虑找个光自己喜欢的人了。”“你倒什么话都有的接。”</p>
</blockquote>
<p>　　侧面看得出王朔本人能侃的结论，又看圆桌派，马未都说王朔称赞阿城是全北京最会侃的人。似乎在他们的圈子里，有一种侃者为王的氛围。马未都说的另一件事也让我印象深刻，他说王朔有种能把过去的场景用文字复现的能力，有的时候你看他写的再回头想发生的事，可能当时都没注意到还有这样的细节。这我是信的，就像陈丹青说他看到一个人就会在心里进行侧写，这作为一种职业本能存在是合理的。但他又说王朔小说里所有的事都是真实发生的，这点我就有些疑问，除了对话里老扯名人名言，觉得正常人哪能这么讲话，还有的就是有些故事委实太过离奇，比如《浮出海面》中的“我”向警察自首交待自己臆想出来的杀死初恋的犯罪，还有其他故事里伪装死亡的朋友们，把妻子送给别人然后永远离开的“我”——这里有段精彩的对白：</p>
<blockquote>
<p>　　“你开了一个无可挑剔的头，发展的也很顺畅，但你不能适可而止。你过分沉湎于诗意之中，过于重视所谓完美感受，这种诗意和完美感受被张到极限，你便失去了弹性和向纵深发展的势头而陷于滞。同时，过于浓郁的诗意必导致纯洁意识的增强。就是说你为自己设置了屏障，把你的意图和关系的范围限制的在了精神追求的圈子里。这样，当你试图冲破她时便会引起她极大的震惊、失望和反感，继而是愤怒的拒绝对坚决的抵抗——是你把她推到了超凡脱俗的境界与尘世欢乐绝了缘。”<br>“我懂了。”关山平沮丧地说，“我给自己铺了条通向天国的路，走在这种路上想上床当然是亵渎。你为我现在还是希望过渡回来吗？”<br>“智取已经失败只有强攻了。”</p>
</blockquote>
<p>　　虽然种种离奇，不过因为无证可考的原因，也只能叹服，可能奇人必有奇事。<br>　　最后回来说下标题，标题源自《过把瘾就死》，看王朔的小说是会上瘾的，因为没看完，所以只算半把瘾。</p>
]]></content>
      <categories>
        <category>旁白</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>读后感</tag>
        <tag>王朔</tag>
      </tags>
  </entry>
  <entry>
    <title>老派科幻</title>
    <url>//veteran_science_fiction.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　因为某天坐地铁的时候忽然想到《黑衣人3》的结尾，因为特工 J 吃饭给了小费而避免了彗星撞击地球导致世界毁灭的蝴蝶效应现象。忽然想起第二部好像没看过，就抽空看了一下。<br>　　<br>　　在还没拍成电影之前，他还是一部动画片，记得以前在 CCTV 1 套每天下午播放，每天两集，但因为每次都在放学前就开始放了，所以导致我都只能看一集半，不过即使这样也无法阻止我当时对他的热爱。虽然现在关于动画的剧情已经忘记大半了，但永远都记得里面那些光怪陆离的外星人，会说话的狗，还有感觉湿滑柔软的竹节虫样子的外星人，还有脑袋打开里面坐着操控人类身体的外星人，以及被黑衣人用枪爆出各种颜色液体的外星人们。这些都让我在还没搞清楚爱国是怎么回事的时候，就已经先爱起了宇宙，在个人、共产、世界等各种主义进入脑子之前，就已经先是个银河主义者。<br>　　<br>　　电影是零二年的，现在看画面有些粗糙，电影主要讲的是一个外星人要来地球夺取另一个星球的外星人留在地球的武器的故事。<br>　　<br>　　电影总结一句话，好看。结局的彩蛋也很有意思。另外我有注意到就是虽然电影的画面特效做的不是很好，但是比起现在的科幻片多了很多创意，以及一些古灵精怪的小点子。比如在邮局暴露出其他员工是外星人的一段口技，在餐厅找钥匙的冷幽默等等。画面的劣势很好的被其他的东西填补了，这大概是这类老派的科幻片的特点吧，画面不够脑洞来凑。<br>　　<br>　　科技除了给人带来日常生活的便利，促进各行各业的发展以外，在电影方面，尤其是科幻电影的特效越来越酷炫，酷到震撼，炫到眼花缭乱。但工业化的制作，也让现在的许多科幻电影同质化很严重，必要的铺垫之后一顿狂轰滥炸，陷入危机，反转，解决危机，最后男女主人公一起共创美好未来。当然美好未来并没有什么错，只是重复的太多，美好也显得不那么真实。我想到 C.S.路易斯谈论童话故事的结局:</p>
<blockquote>
<p>　　如果我们把“他们从此幸福地生活在一起”这个古老的童话故事的结尾理解为，“在随后的五十年里他们的感觉和结婚前一日完全一样”，那么，这个结尾讲述的可能是一件从未真实，也永远不会真实，倘若真实便令人非常讨厌的事。</p>
</blockquote>
<p>　　或是像周星驰某部电影里借角色口说的：无谓重复自己。<br>　　<br>　　<img data-src="https://s1.ax1x.com/2018/11/29/FeugbV.jpg" alt="星爷低头都那么帅"><br>　　<br>　　我觉得电影人都应该有这种避免重复自己或是重复他人的自觉，以上。
　　
　　</p>
<p>　</p>
]]></content>
      <categories>
        <category>旁白</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>观影</tag>
      </tags>
  </entry>
  <entry>
    <title>巫师世界革命</title>
    <url>//wizard-world-revolution.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　上个礼拜去看了《神奇动物：格林德沃之罪》，和哈利波特系列比起来，精美壮观许多，如果不考虑人物关系，他更像后传，在内容上，延伸远多过补充。德普在这一部的戏份比上一部多，作为一个大反派，他的思想核心在所有的电影反派里也应该是数一数二站的住脚的了，用建立一个法师凌驾在麻瓜之上的阶级社会，来阻止预言中所看到二战的核弹爆炸，这让他的邪恶都蒙上一层睿智和远见的色彩，墓地里的会议，纯血法师整齐围成圈，恍如一个大豪门，魔法部的执行人员们从黑暗中走出来，都像在海上风雨飘摇的小舟。<br>　　<br>　　故事主线是克雷登斯的身世之谜，但直在最后解开谜底之前，我仍然对克雷登斯这一部分的人物关系感到有些混乱，可能是内容太多的缘故，让前一部看起来就像围棋开始的一步闲手，或是序章，所有的主要铺垫内容都放在这一部一口气给交待了。还在凡人和法师为什么不能恋爱的规则里疑问，克雷登斯就找到家族的女仆，就和魔法部的人起冲突，但魔法部的人怎么又是格林德沃的帮凶。才从下水道的囚禁，黑人原来是个坏人的恍然大悟出来，邓布利多和格林德沃的回忆怎么看起来 gaygay 的。又有新的华丽魔法和可爱动物让人眼花缭乱，只能有些泄气的承认，我大概可能不是 HP 宇宙的核心粉吧。<br>　　<br>　　看完缕清了所有人物关系，觉得有几处印象深刻，纽特和女巫姐姐从误会到重修旧好，火蜥蜴眼睛的比喻，笨拙可爱。女巫妹妹最后会跟随格林德沃一点也不奇怪，从讲故事上的手法来说，也是作为一个从中立阵营走向邪恶阵营的例子，举一反三的可以窥见其他法师们追随格林德沃的理由，但还是忍不住吐槽，为了爱情参加革命，因为革命而抛弃爱情这种桥段，原来魔法世界也不屡见不鲜。裘德洛演邓布利多，除了发际线比老邓布利多还要靠后，感觉像 BUG，其他没有任何毛病。克雷登斯最后落单的女随从，我觉得她在下一部的剧情应该会起到不小的作用。格林德沃预言中显示的坦克和核弹爆炸的蘑菇云，让我感觉一下子打穿了魔法世界和现实世界的壁垒，想到后面一切如预言显示的如期出现，不由得有些悲观的想，是不是魔法和想象力都不能阻止人类自我毁灭？<br>　　<br>　　最后，比起所有阴谋诡计，我还是比较喜欢作为点缀出现的神奇动物们。</p>
]]></content>
      <categories>
        <category>旁白</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>观影</tag>
      </tags>
  </entry>
  <entry>
    <title>Python - 学习笔记</title>
    <url>//python-study-notes.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>学习地址：<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000">Python 教程</a><br>其他：<a href="https://docs.python.org/3/library/functions.html#abs">官网-函数列表</a></p>
<h2 id="一、基础笔记"><a href="#一、基础笔记" class="headerlink" title="一、基础笔记"></a>一、基础笔记</h2><h3 id="列表：list"><a href="#列表：list" class="headerlink" title="列表：list"></a>列表：list</h3><p>用 <code>len()</code> 函数可以获得 <code>list</code> 元素的个数：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(classmates)</span><br></pre></td></tr></table></figure>

<p><code>list</code> 是一个可变的有序表，所以，可以往 <code>list</code> 中追加元素到末尾：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.append(<span class="string">&#x27;Adam&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>要删除 <code>list</code> 末尾的元素，用 <code>pop()</code> 方法。要删除指定位置的元素，用 <code>pop(i)</code> 方法，其中 i 是索引位置。</p>
<h3 id="循环：for-和-while"><a href="#循环：for-和-while" class="headerlink" title="循环：for 和 while"></a>循环：for 和 while</h3><p>for 循环：<code>range()</code> 函数，可以生成一个整数序列，再通过 <code>list()</code> 函数可以转换为list。</p>
<p>while 循环：<code>continue</code> 语句，跳过当前的这次循环，直接开始下一次循环。<code>break</code> 语句可以提前退出循环。</p>
<h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><p>通过 <code>in</code> 判断 <code>key</code> 是否存在：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;Thomas&#x27;</span> <span class="keyword">in</span> d</span><br></pre></td></tr></table></figure>

<p>通过 <code>dict</code> 提供的 <code>get()</code> 方法，如果 <code>key</code> 不存在，可以返回 <code>None</code>，或者自己指定的 <code>value</code>：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">&#x27;Thomas&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">&#x27;Thomas&#x27;</span>, -<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>要删除一个 <code>key</code> ，用 <code>pop(key)</code> 方法，对应的 <code>value</code> 也会从 <code>dict</code> 中删除：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop(<span class="string">&#x27;Bob&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p><code>set</code> 和 <code>dict</code> 类似，也是一组 <code>key</code> 的集合，但不存储 <code>value</code>。由于 <code>key</code> 不能重复，所以，在 <code>set</code> 中，没有重复的 <code>key</code> 。</p>
<p>通过 <code>add(key)</code> 方法可以添加元素到 <code>set</code> 中，可以重复添加，但不会有效果，通过 <code>remove(key)</code> 方法可以删除元素。</p>
<h3 id="参数组合"><a href="#参数组合" class="headerlink" title="参数组合"></a>参数组合</h3><p>在 <code>Python</code> 中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</p>
<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>取前 3 个元素，用一行代码就可以完成切片：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">0</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p><code>Python</code> 支持 <code>L[-1]</code> 取倒数第一个元素，那么它同样支持倒数切片，试试：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[-<span class="number">2</span>:]</span><br><span class="line">[<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[-<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">[<span class="string">&#x27;Bob&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>所有数，每5个取一个：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[::<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><p>列表生成式即 List Comprehensions，是 <code>Python</code> 内置的非常简单却强大的可以用来创建 <code>list</code> 的生成式。</p>
<p>举个例子，要生成 list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]可以用 <code>list(range(1, 11))</code>：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure>

<p>但如果要生成[1x1, 2x2, 3x3, …, 10x10]怎么做？方法一是循环：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line"><span class="meta">... </span>   L.append(x * x)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure>

<p>但是循环太繁琐，而列表生成式则可以用一行语句代替循环生成上面的 <code>list</code>：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure>

<p>写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来，十分有用，多写几次，很快就可以熟悉这种语法。</p>
<p>for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure>

<p>还可以使用两层循环，可以生成全排列：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;XYZ&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;AX&#x27;</span>, <span class="string">&#x27;AY&#x27;</span>, <span class="string">&#x27;AZ&#x27;</span>, <span class="string">&#x27;BX&#x27;</span>, <span class="string">&#x27;BY&#x27;</span>, <span class="string">&#x27;BZ&#x27;</span>, <span class="string">&#x27;CX&#x27;</span>, <span class="string">&#x27;CY&#x27;</span>, <span class="string">&#x27;CZ&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="二、函数式编程"><a href="#二、函数式编程" class="headerlink" title="二、函数式编程"></a>二、函数式编程</h2><p><code>map</code> 函数：接收一个函数和一个序列，并把传入的函数作用于每个元素</p>
<p><code>reduce</code> 函数：把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数必须接收两个参数，<code>reduce</code> 把结果继续和序列的下一个元素做累积计算，其效果就是：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure>

<p><code>fiter</code>函数：和 <code>map</code> 类似，区别是会根据返回值是 <code>True</code> 和 <code>False</code> 决定保留还是丢弃该元素</p>
<p><code>sorted</code>函数：排序函数，可通过key实现自定义排序。可传入第三个参数 <code>reverse=True</code>，要进行反向排序，不必改动 <code>key</code> 函数。</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">sorted</span>([<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;Zoo&#x27;</span>, <span class="string">&#x27;Credit&#x27;</span>], key=<span class="built_in">str</span>.lower, reverse=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>匿名函数：lambda x: x * x实际上就是：<br> <figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br></pre></td></tr></table></figure><br>关键字 <code>lambda</code> 表示匿名函数，冒号前面的 <code>x</code> 表示函数参数。</p>
<p>装饰器——？：需要再进一步了解。</p>
<p>偏函数：<code>functools.partial</code> 就是帮助我们创建一个偏函数的，不需要我们自己定义 <code>int2()</code>，可以直接使用下面的代码创建一个新的函数 <code>int2</code>：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> functools</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2 = functools.partial(<span class="built_in">int</span>, base=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">&#x27;1000000&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol>
<li>定义：对原函数的默认参数进行改造，为我所用</li>
<li>方式：<code>max8=functools.partial(max,8)</code>(当然要先导入 <code>functools</code> 包)</li>
<li>新知：<code>int</code> 居然这么强，<code>int(&#39;1234234&#39;,2)</code></li>
</ol>
<h2 id="三、调试"><a href="#三、调试" class="headerlink" title="三、调试"></a>三、调试</h2><p>程序能一次写完并正常运行的概率很小，基本不超过 1%。总会有各种各样的 <code>bug</code> 需要修正。有的 <code>bug</code> 很简单，看看错误信息就知道，有的 <code>bug</code> 很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复 <code>bug</code>。<br>第一种方法简单直接粗暴有效，就是用 <code>print()</code> 把可能有问题的变量打印出来看看：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">s</span>):</span><br><span class="line">    n = <span class="built_in">int</span>(s)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;&gt; n = %d&#x27;</span> % n)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    foo(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<p>执行后在输出中查找打印的变量值：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line">$ python ~/documents/err.py</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = <span class="number">0</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ZeroDivisionError: integer division <span class="keyword">or</span> modulo by zero</span><br></pre></td></tr></table></figure>

<p>用 <code>print()</code> 最大的坏处是将来还得删掉它，想想程序里到处都是 <code>print()</code>，运行结果也会包含很多垃圾信息。所以，我们又有第二种方法。</p>
<h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>凡是用 <code>print()</code> 来辅助查看的地方，都可以用断言（assert）来替代：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">s</span>):</span><br><span class="line">    n = <span class="built_in">int</span>(s)</span><br><span class="line">    <span class="keyword">assert</span> n != <span class="number">0</span>, <span class="string">&#x27;n is zero!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    foo(<span class="string">&#x27;0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>assert</code> 的意思是，表达式 <code>n != 0</code> 应该是 <code>True</code>，否则，根据程序运行的逻辑，后面的代码肯定会出错。<br>如果断言失败，<code>assert</code> 语句本身就会抛出</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line">AssertionError：</span><br><span class="line">$ python ~/documents/err.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">AssertionError: n <span class="keyword">is</span> zero!</span><br></pre></td></tr></table></figure>

<p>程序中如果到处充斥着 <code>assert</code>，和 <code>print()</code> 相比也好不到哪去。不过，启动 <code>Python</code> 解释器时可以用 -O 参数来关闭<code>assert</code>：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line">$ python -O err.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>

<p>关闭后，你可以把所有的 <code>assert</code> 语句当成<code>pass</code> 来看。</p>
<h3 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h3><p>把 <code>print()</code> 替换为 <code>logging</code> 是第3种方式，和 <code>assert</code> 比，<code>logging</code> 不会抛出错误，而且可以输出到文件：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">n = <span class="built_in">int</span>(s)</span><br><span class="line">logging.info(<span class="string">&#x27;n = %d&#x27;</span> % n)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> / n)</span><br></pre></td></tr></table></figure>

<p><code>logging.info()</code> 就可以输出一段文本。运行，发现除了 <code>ZeroDivisionError</code>，没有任何信息。怎么回事？<br>别急，在 <code>import logging</code> 之后添加一行配置再试试：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br></pre></td></tr></table></figure>

<p>看到输出了：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line">$ python err.py</span><br><span class="line">INFO:root:n = <span class="number">0</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;err.py&quot;</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">10</span> / n)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>

<p>这就是 <code>logging</code> 的好处，它允许你指定记录信息的级别，有 <code>debug</code>，<code>info</code>，<code>warning</code>，<code>error</code> 等几个级别，当我们指定 <code>level=INFO</code> 时，<code>logging.debug</code> 就不起作用了。同理，指定 <code>level=WARNING</code> 后，<code>debug</code> 和 <code>info</code> 就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。<br><code>logging</code> 的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如<code>console</code> 和文件。</p>
<h3 id="pdb"><a href="#pdb" class="headerlink" title="pdb"></a>pdb</h3><p>第4种方式是启动 <code>Python</code> 的调试器 <code>pdb</code>，让程序以单步方式运行，可以随时查看运行状态。我们先准备好程序：</p>
<figure class="highlight python"><figcaption><span>Python err.py</span></figcaption><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">n = <span class="built_in">int</span>(s)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> / n)</span><br></pre></td></tr></table></figure>

<p>然后启动：</p>
<figure class="highlight bash"><figcaption><span>终端</span></figcaption><table><tr><td class="code"><pre><span class="line">$ python -m pdb err.py</span><br><span class="line">&gt; /Users/michael/Github/learn-python3/samples/debug/err.py(2)&lt;module&gt;()</span><br><span class="line">-&gt; s = <span class="string">&#x27;0&#x27;</span></span><br></pre></td></tr></table></figure>

<p>以参数 <code>-m pdb</code> 启动后，<code>pdb</code> 定位到下一步要执行的代码<code>-&gt; s = &#39;0&#39;</code>。输入命令 <code>l</code> 来查看代码：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line">(Pdb) l</span><br><span class="line">  <span class="number">1</span>     <span class="comment"># err.py</span></span><br><span class="line">  <span class="number">2</span>  -&gt; s = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">  <span class="number">3</span>     n = <span class="built_in">int</span>(s)</span><br><span class="line">  <span class="number">4</span>     <span class="built_in">print</span>(<span class="number">10</span> / n)</span><br></pre></td></tr></table></figure>
<p>输入命令n可以单步执行代码：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line">(Pdb) n</span><br><span class="line">&gt; /Users/michael/Github/learn-python3/samples/debug/err.py(<span class="number">3</span>)&lt;module&gt;()</span><br><span class="line">-&gt; n = <span class="built_in">int</span>(s)</span><br><span class="line">(Pdb) n</span><br><span class="line">&gt; /Users/michael/Github/learn-python3/samples/debug/err.py(<span class="number">4</span>)&lt;module&gt;()</span><br><span class="line">-&gt; <span class="built_in">print</span>(<span class="number">10</span> / n)</span><br></pre></td></tr></table></figure>

<p>任何时候都可以输入命令p 变量名来查看变量：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line">(Pdb) p s</span><br><span class="line"><span class="string">&#x27;0&#x27;</span></span><br><span class="line">(Pdb) p n</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>输入命令q结束调试，退出程序：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line">(Pdb) q</span><br></pre></td></tr></table></figure>

<p>这种通过 <code>pdb</code> 在命令行调试的方法理论上是万能的，但实在是太麻烦了，如果有一千行代码，要运行到第 999 行得敲多少命令啊。还好，我们还有另一种调试方法。</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line">pdb.set_trace()</span><br></pre></td></tr></table></figure>

<p>这个方法也是用 <code>pdb</code>，但是不需要单步执行，我们只需要 <code>import pdb</code>，然后，在可能出错的地方放一个 <code>pdb.set_trace()</code>，就可以设置一个断点：</p>
<figure class="highlight python"><figcaption><span>Python err.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pdb</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">n = <span class="built_in">int</span>(s)</span><br><span class="line">pdb.set_trace() <span class="comment"># 运行到这里会自动暂停</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> / n)</span><br></pre></td></tr></table></figure>

<p>运行代码，程序会自动在 <code>pdb.set_trace()</code> 暂停并进入 <code>pdb</code> 调试环境，可以用命令 <code>p</code> 查看变量，或者用命令 <code>c</code> 继续运行：</p>
<figure class="highlight bash"><figcaption><span>终端</span></figcaption><table><tr><td class="code"><pre><span class="line">$ python err.py </span><br><span class="line">&gt; /Users/michael/Github/learn-python3/samples/debug/err.py(7)&lt;module&gt;()</span><br><span class="line">-&gt; <span class="built_in">print</span>(10 / n)</span><br><span class="line">(Pdb) p n</span><br><span class="line">0</span><br><span class="line">(Pdb) c</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;err.py&quot;</span>, line 7, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(10 / n)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>

<p>这个方式比直接启动 <code>pdb</code> 单步调试效率要高很多，但也高不到哪去。</p>
<h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><p>如果要比较爽地设置断点、单步执行，就需要一个支持调试功能的 <code>IDE</code>。目前比较好的 <code>Python IDE</code> 有：<br><a href="https://code.visualstudio.com/">Visual Studio Code</a>：需要安装<code>Python</code> 插件。<br><a href="http://www.jetbrains.com/pycharm/">PyCharm</a>。<br>另外，<code>Eclipse</code> 加上 <code>pydev</code> 插件也可以调试 <code>Python</code> 程序。</p>
<p><strong>小结：</strong>写程序最痛苦的事情莫过于调试，程序往往会以你意想不到的流程来运行，你期待执行的语句其实根本没有执行，这时候，就需要调试了。<br>虽然用 <code>IDE</code> 调试起来比较方便，但是最后你会发现，<code>logging</code> 才是终极武器。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>胡安另一些片段</title>
    <url>//other-fragment-about-huan.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">　　鹿同时是阿喀琉斯和乌龟，同时是弓和箭：它们奔跑着，却永远追不到自己；
它们停下来，有些东西却永远留在身外继续疾驰。</blockquote>

<p>　　这是《动物集》里的一段话，我很喜欢。因为把他从小说里摘出来放在某本诗集里，也丝毫没有违和感，充满想象力和诗意。作者是胡安.何塞.阿雷奥拉，墨西哥人，名字有些绕口，不过比起人名本身就可以搭成迷宫的俄罗斯人也还算好。然后因为这本书我又买了他的另一本书《寓言集》。<br>　　最近读完。相比之下，更喜欢的还是《动物集》，虽然《寓言集》也不乏灵光闪现的片段，比如《独角犀》《一个被驯化的女人》，但有几篇比如模仿购物宣广告的文章，现在看不免有些俗气，借由商品简介来讽刺人类的劣根性，虽然把人类的丑陋都精确的说到点上了，但总有些在讽刺人上用力过度的感觉，显得小气。最好的是《铁路扳道工》，有一些科幻的元素，底下放着对体制的讽刺，买了固定站点的票，却不一定在固定站点停靠，驶往深渊的铁道，因为火车翻车便建起的小镇，充满荒诞又值得深思的细节。<br>　　再说其他有印象的几篇，《山震》没怎么看懂，如果是讽刺人们以讹传讹，太浅且无趣。《尘世生活费》不带批判性的看，有趣，但仍然流于表面，少了几分蕴藉之美。<br>　　《上帝的沉默》里和上帝的通信，让我想到了 C.S.路易斯的《返璞归真》，循循善诱的态度，最后上帝的回信，劝诫朴实真诚，只是和我印象里圣经中上帝的口气有所出入，也因为这个想到，即便只存在一个上帝，但不同人口里传出来的上帝应该都不是同一个。或者说，每个人都有自己的上帝。<br>　　《声誉》是我第二喜欢的故事，从小事——公交车让位，讽刺人们为声誉所累，太过于在意别人的眼光而一次又一次做出违背自己内心的选择。比起前阵子很火的《无声告白》里写的在别人的期待中活着，最终无以为继选择自杀，讲的其实是同一回事，主动被动的区别。不过少了很多苦大仇深，俏皮又不乏冷峻。<br>　　《乡下人》和《奇异的毫克》是两个很相似的故事，写的都是人们的虚妄和盲目不自知。《奇异的毫克》描写的主体是蚂蚁，群居性的人类确实有一些蚁群的特征。<br>　　《夏娃》重写了夏娃和亚当的相识追逐相爱，故事的气质给我感觉是由一个史诗孵化出了另一个史诗。但仔细想又有一些不太贴切，史诗太过庞大。精确一点是，在另一部圣经里当做开头，也不违和。<br>　　《那波尼德斯》复现了古巴比伦巨大石碑在由那波尼德斯主观驱动下的整个产生过程。诞生始于一种偏执，毁灭也始于一种偏执。<br>　　《给一个补坏鞋子的鞋匠的信》我十分怀疑是作者的鞋子被补坏后的游戏之作，哪怕把一些不满和碎碎念用修辞比喻包装起来也不是很好看。但假设作者想说的对象，不止是鞋匠，因为一些建议放在其他职业身上也同样合适，把立意拔高展开，这么看这篇寓言被放在书的最后，似乎也有他一定的道理。<br>　　整本书读完和反刍完，给我整体的印象还是不错的。就仍有些疑问，为什么这种风格的寓言短篇总是会有一遭没一遭的脑子里闪过博尔赫斯的名字，寓言这种类型是不是必须要有所寓意才能称为寓言，可不可以写一个他的寓意本身就是寓言的寓言故事。</p>
]]></content>
      <categories>
        <category>旁白</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>读后感</tag>
      </tags>
  </entry>
  <entry>
    <title>中文文案排版学习</title>
    <url>//chinese-text-layout-study.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>*　　偶尔在知乎、少数派或其他社区资讯网站上看文章，会发现有的文章看起来很舒服，有的感觉怪怪的，变扭。细究之下，大概就是排版的原因。那么如何学习好的排版呢，再细究，发现里面的学问也有不少，如何分段落，如何引用图片，以及句子段落本身的排版。刻意去看了下<a href="https://github.com/mzlogin/chinese-copywriting-guidelines">中文文案排版指北</a>，这里介绍了一些中文文案，中英文排版约定俗成的标准，而且许多网站也都引入了这些标准。值得学习，那现在就一起来看看。*</p>
<p>　　第一部分讲空格，引言有这么一段：</p>
<blockquote>
<p>「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。</p>
<p>与大家共勉之。」——<a href="https://github.com/vinta/pangu.js">vinta&#x2F;paranoid-auto-spacing</a></p>
</blockquote>
<p>　　我刻意去搜索了这句话是出自哪个研究，但发现这段话除了出现在所有介绍排版的文章里以外，再没有第二个地方引用他，他的真实性值得商榷。另外也忍不住让人较真，我不加空格就爱情不行了吗，不加空格就运气不好了吗，大字不识白首偕老的人比比皆是，哼。<br>　　考虑到他的初衷是给人警醒作用，虽然仍旧觉得从中文和英文之间是否加空格延伸到爱情幸福有点小题大做，但还是可以勉强接受到的。不过也难免会想：第一个把两者混为一谈的可能还有些俏皮似的聪明，后面跟风的只能是泛泛了。<br>　　OK，回归正题，第一部分讲的是中文和英文，中文和数字需要加空格，数字与单位之间，全角标点与其他字符之间不加空格。只记个标题基本就可以掌握，平常我为了加强记忆，在用社交软件和人聊天的时候也会强迫自己遵循这个标准。和以前背英语单词，在周遭事物都贴上英文名，潜移默化一个道理。<br>　　第二部分是讲标点符号的使用，有时在聊天中我们为了加强语气，会重复使用某个感叹号或者问号，也有碰见重复使用逗号的朋友，这个部分就说到这种情况：</p>
<blockquote>
<p><strong>不重复使用标点符号</strong></p>
<p>正确：<br>　　德国队竟然战胜了巴西队！<br>　　她竟然对你说「喵」？！</p>
</blockquote>
<blockquote>
<p>错误：<br>　　德国队竟然战胜了巴西队！！<br>　　德国队竟然战胜了巴西队！！！！！！！！<br>　　她竟然对你说「喵」？？！！<br>　　她竟然对你说「喵」？！？！？？！！</p>
</blockquote>
<p>　　但我仍然有个疑问，就是这里是正常的文本处理，那如果遇到双引号以内，人物对话时呢，该怎么处理。打算之后在其他使用这些规范的网站多注意这点。<br>　　第三部分全角和半角，这个在实际使用上会有点别扭，应为总是要在全角和半角来回切换，先前的文章中我唯一用到全角的就是文章段落头部两个空格，全角的空格会大一点，排版会好看，但每次使用完总得切回来，不然涉及到英文、数字就会自动的在首尾加上空格。<br>　　第四部分是容易错误的点，是讲关于名词正确的大小写和地道的缩写的，我也总在这上面犯一些错误。这种错误是低级的，犯这种错误也是低级的。在这点上我反而更相信：在书写上会犯低级错误的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要避免犯低级错误。<br>　　最后一部分就是按个人喜好选择，在链接之前是否增加空格，简体中文是或否使用直接引号。<br>　　中英文排版的学习就基本告一段落，但还有许多需要注意的，比如在简书上，我发现他们的文章习惯性的每个自然段都会追加空行，而微信公众号则发现极少出现一个自然段有很长的文字，而且图文并茂也是非常重要的一点，甚至是在知乎和微信都关注了的，我觉得很有古代文人气质的张佳玮，也无能免俗的会给自己的文章配上图，靠纯文字来说服人似乎已经是一件很困难的事，看图说话仿佛大势所趋。孰好孰坏先放在一遍，尝试一下先。<br>　　以上。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Other</tag>
      </tags>
  </entry>
  <entry>
    <title>在草房子外</title>
    <url>//outside-the-straw-house.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　看了曹文轩的《草房子》，内容讲的是发生桑桑这个小主人公周围的事，有孩子的故事，也有大人的故事。<br>　　<br>　　叙事口吻平淡朴实，像静谧的流水，又像傍晚从远处村庄传来带着泥土气息的风，让人也不由自主的想起自己的童年时光，就好像成年后在某个瞬间想起小时候放学经过正开饭的陌生人家闻到饭菜的味道，那个瞬间中所处的情景和记忆中的画面，便重叠串在一起。这本书也有类似的力量。<br>　　<br>　　书里写了许多大概每个人童年都会发生的事情，一个让人印象深刻的漂亮女孩，一个早早退学的朋友，一个在学校里因为彼此都很优秀而暗地里较真的小伙伴，还有因为人小所以身不由己的当了大人的传声筒，卷进大人们的爱情故事里。甚至是每个人都可能生过的一场发生在童年无可避免的大病。</p>
<p>　　在那个大人的爱情故事里出现的男主人公，是桑桑的老师，那个老师是个很特别的人，会在节日庆典组织学生排练舞蹈，会在河边吹笛子吹出悠扬的曲子，穿白衬衫，皮鞋，英俊潇洒。在那种封闭的小村庄里，那样的人似乎很少，但又似乎每个村子都会有那么一两个那样的人。<br>　　<br>　　我童年记忆里像那样代表性的人大概是我的小学语文老师，爱扎羊角辫和马尾，都很好看。有时会提着一桶衣服穿过两三条街道，到我们家旁边的那条河洗衣服，我有时候会站在家门口偷看，看她把衣服放在河里，攥着一角轻轻摆动，涤荡干净。她夏天爱穿裙子，快分开的那个夏天，她总喜欢穿的是一条淡绿色的裙子，常常在我们早读的时候站在教室外的阳台上，发呆，眺望远方，有风的时候，裙子会轻轻扬起来。以致于在我反复回忆起这段记忆的时候，有时候想不起老师的样子，但裙子的颜色却越发鲜艳起来。</p>
<p>　　沉浸在回忆里的抒情往往用力过度。以致于后来喜欢上的女孩子，总是因为她们举手投足和记忆里的某些印象相似，像女老师，像裙子，像河流。我被彻底击中被俘获。<br>　　<br>　　看完之后除了把故事情节和自己的童年记忆一一比对，另一方面觉得有点可惜，这本书要是早点看就好了。这种可惜，并不是因为它优秀的让人觉得相见恨晚——虽然它也很优秀，而是我觉得这类记录童年的书应该在人生的各个不同阶段都看一遍，童年的时候看，少年的时候再看，青年、壮年、老年。就好像在不同阶段留了一个标记，在之后的漫长岁月里总还可以时不时的回头，哦，那会看这本书的时候，我好像还是一个人在异地他乡为了那样那样而做着这样这样的。借助外物达到不忘初心的方式，这也算一个。</p>
<p>　　看过的另一本和这个类似的书是《城南旧事》，幸运的是这本书很早就看过了，因为小学有篇课文叫，爸爸的花儿落了。当时就去找原著看了，英子，疯女人秀珍，兰姨娘，四眼狗德先叔，都鲜活的常驻在记忆里。每当我被生活琐事搅扰的焦头烂额的时候都会拿出来看一看。比任何开解的话语都有效。</p>
]]></content>
      <categories>
        <category>旁白</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>读后感</tag>
      </tags>
  </entry>
  <entry>
    <title>唯“鸭嘴兽”主义哲学</title>
    <url>//platypus-philosophy.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　A：”就站在比较正的三观上来说，每个人有权利选择自己的生活方式。你每天上网无所事事做咸鱼，我每天上班为生活疲于奔命，其实没什么优劣之分，只是做了不同的选择而已。但我还是想问，这一切的意义在哪里，你的人生的意义在哪，人生需要意义吗？”<br>　　B：“我都打算出家当和尚的人，你就别问我人生意义了。你觉得你的人生意义又是什么？”<br>　　A：“就以前和你讲过的那样，呆在山脚下，就觉得应该上山看看，以后和人说知足常乐这几个字，不会显得那么没底气。”<br>　　B：“如果你现在死了，你会觉得遗憾吗？”<br>　　A：“不会吧。”<br>　　B：“嗯？”<br>　　A：“我又不是处！”<br>　　B：“去你妈的。我觉得我不会遗憾，虽然很多东西都没吃到，很多地方都没去过，但我觉得我过得挺开心的。”<br>　　A：“我想我也不会遗憾吧。主要是遗憾没什么用，如果必须死的话，说不定我还不会遗憾，我会试图说服自己接受去死，毕竟有那么多宗教，可以信信来生啊什么的。这一点上我还是比较犬儒的。”<br>　　……<br>　　A：“其实我们现在说的想的，什么精神啊思想的，早就有人这么说过做过了，我们只是在不断地重复而已。”<br>　　B：“是吗，那你说，我们要怎样才可以不重复啊？”<br>　　A：“怎样都会重复的，所以学哲学家说空话是没什么用的，只有德先生和赛先生才可以拯救世界。”<br>　　<br>　　和朋友进行了一次一棒子打死哲学家的谈话之后，非常打脸的，我看完了一本谈论哲学的书，《柏拉图和鸭嘴兽一起去酒吧》。<br>　　人们普遍对哲学的印象是深奥，拗口，诡辩，对哲学家的印象是严肃，爱钻牛角尖，动不动就因为想不明白终极问题去自杀。但这本书则完全推翻了那些刻板印象，他展示了一个有趣生动的哲学，甚至还非常接地气的说了一连串的荤段子。可能他不是第一个想到把严肃的事变得轻松甚至荒诞的人，但在哲学这个体系他应该是第一个说女人像鲜花的人，他向人们展示了一种把哲学的严肃稀释掉的可能。<br>　　这本书结合笑话向读者构建了一个微小的哲学体系，就像一个颇负盛名的苍蝇馆，菜单可能不够丰富和精致，但剑走偏锋还能做出地道的美食这点，就值得让人竖起拇指称赞。对这本书的结论是，不懂哲学的，适合看， 懂哲学的，更适合看。能让外行人看热闹，内行人看门道，也是这本书出彩的一个地方，好的东西不一定都能雅俗共赏，但能雅俗共赏的一定是好的东西。<br>　　书以外的，有一个不算正确甚至可能是用力过度的想法是，除了悲剧会刻意用喜剧的外壳包装和喜剧的样子本来就是喜剧（不谈内核）以外，其他的各种事物，他们的样子应当是他们本来的样子，历史应当庄重，哲学应当严肃，笑话固然好看，但把所有的事都用笑话包装起来却不一定是好事。不只是这一个点，从许多事上似乎可以看到这种趋势：人们热衷于创造和接受把严肃的事物讲成一个笑话，在心里不放下任何一种庄重的情感。这是不是意味着我们已经在各个方面向《娱乐至死》里所描写的世界迈进了?<br>　　用力过度的想法以外的，用哲学的理论来看，这个想法完全符合因为一个错误的观点得出正确的结论，所以让观点看起来也像正确的。这在哲学上叫 Affirming the Consequent，肯定结果的谬误。</p>
]]></content>
      <categories>
        <category>旁白</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>读后感</tag>
      </tags>
  </entry>
  <entry>
    <title>和轮廓渐现的黑暗告别</title>
    <url>//farewell-to-the-darkness.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="《刺杀骑士团长》"><a href="#《刺杀骑士团长》" class="headerlink" title="《刺杀骑士团长》"></a>《刺杀骑士团长》</h2><div align = right> [村上春树](https://www.amazon.cn/dp/B079FLYB49/ref=sr_1_1?ie=UTF8&qid=1532067759&sr=8-1&keywords=%E5%88%BA%E6%9D%80%E9%AA%91%E5%A3%AB%E5%9B%A2%E9%95%BF) </div><div align = right> 10 条标注 </div> 


<p id="div-border-left-green">　　我是这样认为的，需要大刀阔斧转型的时期，无论谁的人生中恐怕都是有的。一旦那个临界点来了，就必须迅速抓住它的尾巴，死死地紧抓不放，再不松手。世上有抓得住那个点的人，有抓不住的人。

<p>　　后来回头看去,觉得我们的人生委实匪夷所思,充满难以置信的荒唐的偶然和无法预测的曲折进程。然而,在那些已然实际出现的节点上,很多时候哪怕再小心翼翼地环顾四周,也可能找不出任何匪夷所思的元素。闪入我们眼帘的,恐怕只是在没有接缝的日常生活中发生的再正常不过的正常事情。或许完全不合情理。可是,事物是否合乎情理,那需要时间冲洗才能真正看到清楚</p>
<p>　　我无论如何不能设想我们正式解除夫妻关系而后也保持朋友关系。我们通过长达六年的婚姻生活共同拥有了许许多多的东西——许多时间，许多感情，许多话语和许多沉默，许多犹豫和许多判断，许多信守和许多达观，许多愉悦和许多单调。当然，相互守口如瓶而作为秘密藏在心底的事项也应有若干。但是，甚至连那种秘而不宣的隐秘感觉，我们也能设法使之共有。那里存在唯独时间才能培育的“场的重量”。我们让身体同那样的重力一拍即合，在其微妙的平衡中朝夕相处。那里还存在几条我们特有的“地方性法规”。不可能将这些归零，不可能将那里有过的重力平衡和地方性法规抽空而单纯成为“好友”。</p>
<p>　　真相有时带给人的是何等深刻的孤独。比起毫无动摇的真相，我选择有动摇余地的可能性，我选择在这样的动摇中终其一生。<br>　　<br>　　无论怎么挣扎，人也要为与生俱来的东西所大大左右。<br>　　<br>　　既有时间夺走的东西，又有时间给予的东西，把时间拉向自己这边是一项重要的工作。</p>
<p>　　抛弃类似自我的东西，在人生某一时期也是有意义的。<br>　　<br>　　陀思妥耶夫斯基的小说里边，有很多人物为了证明自己是独立于神和世俗社会的自由人而做傻事。噢，当时的俄国也许并没傻成那个样子。</p>
<p>　　人生中会有好几件不能很好解释的事，也会有好几件不应该解释的事。尤其在一旦解释就会彻底失去某种至关重要东西的情况下</p>
<p>　　历史之中，就那样搁置在黑暗中为好的事件多得要命。正确知识未必使人丰富。客观未必凌驾于主观之上。事实未必吹灭妄想。</p>
</p>

]]></content>
      <categories>
        <category>剪报</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>外国现当代文学</tag>
      </tags>
  </entry>
  <entry>
    <title>长大成人</title>
    <url>//be-a-man.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　看了《动物世界》和《我不是药神》（以下简称《动》和《药神》）。<br>　　剧情略过不提。<br>　　先从内容讲讲我的看法。虽然两部电影类型和主题都迥然不同，但我觉得他们讲的其实是一个东西，有关善良和蜕变。<br>　　《动》说的善良是小善，是守得住自己。《药神》说的是大善，度己度人。可能有人会觉得上善若水，善良应该像水一样润物无声。而《药神》里的男主角程勇所表现的，普度众生的那种善对平常人来说实在太过庞大，仿佛选择行善便是选择背水一战，有些咄咄逼人。但在本质上，他其实也是因为守住了自己，然后因为这种小善才衍生出了大善。<br>　　说时势造英雄，我觉得时势并不能造英雄，时势只是把英雄们身上的某些属于英雄的特质给激发了。同理，好人也基本如此，《药神》里的程勇，经历了自己得白血病的朋友去世，也终于放下独善其身的想法和对坐牢的恐惧，在泰国清晨的大雾中看清了自己，义无反顾的投身于倒卖药品救助病患的“违法犯罪”行动中。只是他受审被定为有罪，虽然法律不外乎人情给他减了刑，但当押送他的警车穿过泱泱人群的画面出现时，我仍然有些疑问，这等时势逼出的好人，好固然是好，但真的是社会所需要的吗？<br>　　《动》里的郑开司在被关进小黑屋用自己的聪明出来时，老人家跪在他面前求他给自己孩子托句话，他面无表情闪开，我当时想，这是要开始黑化了？因为前面的剧情，甚至对这点隐隐有些期待。然而当他说出一段台词：</p>
<blockquote>
<p>　　该打的仗我已经打过了，该跑的路我也跑到了尽头，老子信的道老子自己来守，背叛、争抢、没有底线，想把老子变成一只动物，no，没戏，老子宁可做一辈子披荆斩刺的小丑，也绝不会变成你们这种人渣的样子，游戏是你们的，规则，老子自己来定。</p>
</blockquote>
<p>　　热血沸腾。在我以为他在经历了一场深刻的背叛之后会选择从此当个坏人，然而他没有，反而对自己所信仰的事物更加坚定了。就在他转角出来，那段台词念到一半，我忽然明白他是怎么想的时候，甚至有些感动起来。可能是身上还有一部分属于中二少年的东西被唤醒。除了觉得这段台词和为信念坚守自己酷毙了，冷静后搜索知道台词出处来自圣经<a href="%E3%80%8A%E6%8F%90%E6%91%A9%E5%A4%AA%E5%90%8E%E4%B9%A6%E3%80%8B%E7%AB%A0%E5%9B%9B%EF%BC%9A%E9%82%A3%E7%BE%8E%E5%A5%BD%E7%9A%84%E4%BB%97%E6%88%91%E5%B7%B2%E7%BB%8F%E6%89%93%E8%BF%87%E4%BA%86%EF%BC%8C%E5%BD%93%E8%B7%91%E7%9A%84%E8%B7%AF%E6%88%91%E5%B7%B2%E7%BB%8F%E8%B7%91%E5%B0%BD%E4%BA%86%EF%BC%8C%E6%89%80%E4%BF%A1%E7%9A%84%E9%81%93%E6%88%91%E5%B7%B2%E7%BB%8F%E5%AE%88%E4%BD%8F%E4%BA%86%E3%80%82%E4%BB%8E%E6%AD%A4%E4%BB%A5%E5%90%8E%EF%BC%8C%E6%9C%89%E5%85%AC%E4%B9%89%E7%9A%84%E5%86%A0%E5%86%95%E4%B8%BA%E6%88%91%E5%AD%98%E7%95%99%EF%BC%8C%E5%B0%B1%E6%98%AF%E6%8C%89%E7%9D%80%E5%85%AC%E4%B9%89%E5%AE%A1%E5%88%A4%E7%9A%84%E4%B8%BB%E5%88%B0%E4%BA%86%E9%82%A3%E6%97%A5%E8%A6%81%E8%B5%90%E7%BB%99%E6%88%91%E7%9A%84%EF%BC%9B%E4%B8%8D%E4%BD%86%E8%B5%90%E7%BB%99%E6%88%91%EF%BC%8C%E4%B9%9F%E8%B5%90%E7%BB%99%E5%87%A1%E7%88%B1%E6%85%95%E4%BB%96%E6%98%BE%E7%8E%B0%E7%9A%84%E4%BA%BA%E3%80%82">^1</a>，还让我想到我和朋友很久以前谈论的一个话题。<br>　　为什么坏人放下屠刀，立地就能成佛，而好人就要经过九九八十一难才能成佛。<br>　　朋友对此表示十分愤慨。而我觉得理所当然。正如《动》里的郑开司，在经历了船上发生的一系列事情仍然能坚守自己，甚至不是坚守，而是从以前自己含糊的态度一脚踏出一个新的自己，我始终认为，只有切实的感受过恶的善才是真正的善。不然在优渥环境里成长出的与世无争的善，只是空中阁楼。保持一颗赤子之心很难，少年人见识了世间险恶，在人情世故里打滚，有的虽然变得油腻、难看，但也值得被体谅和同情，选择不跨出那一步，固步自封，善良热忱的脸虽然依旧如新、好看但着实没什么夸耀的。当然对于那些我们爱的人，我们也大可以不用那么严格的送上刘瑜式的祝福：</p>
<blockquote>
<p>愿你有好运气，如果没有，愿你在不幸中学会慈悲。<br>愿你被很多人爱，如果没有，愿你在寂寞中学会宽容。</p>
</blockquote>
<p>　　而从技术上讲。两部电影都没有国产片水和拖沓的毛病，好吧，《动》前面有一点拖沓。《药神》里有些情节的处理不算太好，在通篇的不落俗套里落了俗套，比如徐峥想把患白血病女儿的妈妈给睡了，脱完衣服，女儿出现，他冷静和推门离开；黄毛开车从码头成功逃脱后回头，货车出现，他被撞和去世，还有后面给很多人发有药的QQ消息，闪过很多画面，最后定格在希望两个字上，甚至让我不由得感受到冯小刚《唐山大地震》里，片尾女主角推着自行车经过纪念碑缅怀先人的气氛，庄严煽情。这些类似的俗套在其他影视作品里屡见不鲜，这里也这么用那么一下，让我感觉，就好像炒一锅好菜，快大功告成放调料的时候，手下重了。我试着去理解，从另一面想，这可能是导演刻意选择的结果，用人们所熟悉的桥段来让人提高他们的接受力，另一个也能快速代入感情，进入下一个场景。《动》前面家长里短的剧情铺垫虽然有国产片拖沓的影子，但整体节奏都十分紧凑，安排的几个配角也有各尽其用，有着一定的分量。看评论有说到特技的滥用，但我觉得正是这些特技让人不时可以打破次元壁，放松一下自己。毕竟这是一部漫改的作品，如果太一板正经了，那漫改又有什么意义。<br>　　以上，就是我最近看的两篇不错的电影的一点蹩脚感想。</p>
]]></content>
      <categories>
        <category>旁白</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>观影</tag>
      </tags>
  </entry>
  <entry>
    <title>给你的 iOS 马甲项目增加一点垃圾代码</title>
    <url>//add-junk-code-to-ios-vest-project.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>*　　由于公司的一个项目屡次出现 <code>Guideline 4.3 - Design</code> 审核被拒问题，想着能最大程度的解决这种问题出现，就去了解了一下怎么给项目增加垃圾代码以通过审核，这里给大家推荐两种。*</p>
<h1 id="一、用-Python-生成垃圾文件"><a href="#一、用-Python-生成垃圾文件" class="headerlink" title="一、用 Python 生成垃圾文件"></a>一、用 Python 生成垃圾文件</h1><h2 id="1-第一步-首先生成一个500位的数组-驼峰类型的元素-用作文件名-eg-AsdfdfGsd"><a href="#1-第一步-首先生成一个500位的数组-驼峰类型的元素-用作文件名-eg-AsdfdfGsd" class="headerlink" title="1.第一步:首先生成一个500位的数组 驼峰类型的元素 用作文件名 eg:AsdfdfGsd"></a>1.第一步:首先生成一个500位的数组 驼峰类型的元素 用作文件名 eg:AsdfdfGsd</h2><figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">first = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line"></span><br><span class="line">second = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line"></span><br><span class="line">number = <span class="string">&quot;345&quot;</span></span><br><span class="line"></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">array = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line"></span><br><span class="line">    final=(random.choice(first))</span><br><span class="line"></span><br><span class="line">    index = random.randint(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index):</span><br><span class="line"></span><br><span class="line">        final+=(random.choice(second))</span><br><span class="line"></span><br><span class="line">    final += (random.choice(first))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index):</span><br><span class="line"></span><br><span class="line">        final+=(random.choice(second))</span><br><span class="line"></span><br><span class="line">    array.append(final)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span> (array)</span><br></pre></td></tr></table></figure>

<p>PS.如果是直接复制粘贴，不要忘记 <code>Python</code> 变态的首行缩进。</p>
<h2 id="2-第二步-用上边生成的数组来创建对应的-h-和-m-文件"><a href="#2-第二步-用上边生成的数组来创建对应的-h-和-m-文件" class="headerlink" title="2.第二步: 用上边生成的数组来创建对应的 .h 和 .m 文件"></a>2.第二步: 用上边生成的数组来创建对应的 <code>.h</code> 和 <code>.m</code> 文件</h2><figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建.h文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text_createH</span>(<span class="params">fileNmae,msg,msg1,propertyNumber,methodArray,msg3</span>):</span><br><span class="line"></span><br><span class="line">    full_path = <span class="string">&#x27;/Users/zhoujinglin/Desktop/python-H-M/&#x27;</span> + fileNmae + <span class="string">&#x27;.h&#x27;</span></span><br><span class="line"></span><br><span class="line">    file = <span class="built_in">open</span>(full_path, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    file.write(<span class="string">&#x27;//\n//  &#x27;</span>+fileNmae+<span class="string">&#x27;.h\n//  SajiaoShopping\n\n//  Created by Kaaaaai bo on 18/06/28.\n//  Copyright ©  2018年 Kaaaaai. All rights reserved.\n//\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    file.write(msg)</span><br><span class="line"></span><br><span class="line">    file.write(msg1)</span><br><span class="line"></span><br><span class="line">    propryNameArray = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,propertyNumber):</span><br><span class="line"></span><br><span class="line">        propryNameArray.append(random.choice(array))</span><br><span class="line"></span><br><span class="line">    propryNameArray = <span class="built_in">list</span>(<span class="built_in">set</span>(propryNameArray))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> propertyName <span class="keyword">in</span> propryNameArray:</span><br><span class="line">        file.write(<span class="string">&#x27;@property(nonatomic,strong)&#x27;</span>+random.choice(classArray)+<span class="string">&#x27; * &#x27;</span>+propertyName+<span class="string">&#x27;;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    file.write(<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> methodName <span class="keyword">in</span> methodArray:</span><br><span class="line"></span><br><span class="line">        file.write(<span class="string">&#x27;- (void)pushTo&#x27;</span>+methodName+<span class="string">&#x27;VC:(NSDictionary *)info;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    file.write(msg3)</span><br><span class="line"></span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Done&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建.m文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text_createM</span>(<span class="params">fileNmae,msg,msg1,methodArray,msg3</span>):</span><br><span class="line"></span><br><span class="line">    full_path = <span class="string">&#x27;/Users/zhoujinglin/Desktop/python-H-M/&#x27;</span> + fileNmae + <span class="string">&#x27;.m&#x27;</span></span><br><span class="line"></span><br><span class="line">    file = <span class="built_in">open</span>(full_path, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    file.write(<span class="string">&#x27;//\n//  &#x27;</span>+fileNmae+<span class="string">&#x27;.m\n//  SajiaoShopping\n\n//  Created by Kaaaaai bo on 18/06/28.\n//  Copyright ©  2017年 Kaaaaai. All rights reserved.\n//\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    file.write(msg)</span><br><span class="line"></span><br><span class="line">    file.write(msg1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> methodName <span class="keyword">in</span> methodArray:</span><br><span class="line"></span><br><span class="line">        file.write(<span class="string">&#x27;- (void)pushTo&#x27;</span>+methodName+<span class="string">&#x27;VC:(NSDictionary *)info\n&#123;\n\n  NSMutableArray *array = [NSMutableArray array];\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        number = random.randint(<span class="number">3</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,number):</span><br><span class="line"></span><br><span class="line">            file.write(<span class="string">&#x27;  [array addObject:@&quot;&#x27;</span>+random.choice(array)+<span class="string">&#x27;&quot;];\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        file.write(<span class="string">&#x27;\n&#125;\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    file.write(msg3)</span><br><span class="line"></span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Done&#x27;</span>)</span><br><span class="line"></span><br><span class="line">classArray = [<span class="string">&#x27;NSString&#x27;</span>,<span class="string">&#x27;UILabel&#x27;</span>,<span class="string">&#x27;NSDictionary&#x27;</span>,<span class="string">&#x27;NSData&#x27;</span>,<span class="string">&#x27;UIScrollView&#x27;</span>,<span class="string">&#x27;UIView&#x27;</span>]</span><br><span class="line"></span><br><span class="line">array = [<span class="string">&#x27;HwxrFvrj&#x27;</span>, <span class="string">&#x27;QnzduQbtdd&#x27;</span>, <span class="string">&#x27;PvcrwLtqhf&#x27;</span>, <span class="string">&#x27;UvdhDbjn&#x27;</span>, <span class="string">&#x27;SuntmyTxvyzg&#x27;</span>, <span class="string">&#x27;CvlxwBipbp&#x27;</span>, <span class="string">&#x27;GzrdyzIbimvz&#x27;</span>, <span class="string">&#x27;CqsjqMmgsp&#x27;</span>, <span class="string">&#x27;OxaaeuWjhasc&#x27;</span>, <span class="string">&#x27;NjiardRvwgbi&#x27;</span>, <span class="string">&#x27;NcculmLtpljq&#x27;</span>, <span class="string">&#x27;ApoqQrll&#x27;</span>, <span class="string">&#x27;GkgokDyvjb&#x27;</span>, <span class="string">&#x27;EblldkVouplj&#x27;</span>, <span class="string">&#x27;KfdrFvnw&#x27;</span>, <span class="string">&#x27;SfhyhObftc&#x27;</span>, <span class="string">&#x27;SmruByoc&#x27;</span>, <span class="string">&#x27;YzcccvXmpmit&#x27;</span>, <span class="string">&#x27;OmqvaHpxat&#x27;</span>, <span class="string">&#x27;XzytsUyvyd&#x27;</span>, <span class="string">&#x27;MjforNnnyi&#x27;</span>, <span class="string">&#x27;ZvjhuIdogs&#x27;</span>, <span class="string">&#x27;BzfrxzSeahxc&#x27;</span>, <span class="string">&#x27;PycycwFjtpny&#x27;</span>, <span class="string">&#x27;XvngtoSedljr&#x27;</span>, <span class="string">&#x27;DktiaCbucd&#x27;</span>, <span class="string">&#x27;AqbplNuodc&#x27;</span>, <span class="string">&#x27;MzkvgZuala&#x27;</span>, <span class="string">&#x27;KdwzIoej&#x27;</span>, <span class="string">&#x27;AaynatUpqcfd&#x27;</span>, <span class="string">&#x27;IyvwhZvtjc&#x27;</span>, <span class="string">&#x27;UmijGmsy&#x27;</span>, <span class="string">&#x27;AoayndXxghym&#x27;</span>]</span><br><span class="line"></span><br><span class="line">array = <span class="built_in">list</span>(<span class="built_in">set</span>(array))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> array:</span><br><span class="line"></span><br><span class="line">    number = random.randint(<span class="number">3</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    methodArray = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line"></span><br><span class="line">        methodArray.append(random.choice(array))</span><br><span class="line"></span><br><span class="line">    methodArray = <span class="built_in">list</span>(<span class="built_in">set</span>(methodArray))<span class="comment">#数组去重</span></span><br><span class="line"></span><br><span class="line">    text_createH(name+<span class="string">&#x27;ViewController&#x27;</span>, <span class="string">&#x27;#import &lt;UIKit/UIKit.h&gt;\n&#x27;</span>,<span class="string">&#x27;@interface &#x27;</span>+name+ <span class="string">&#x27;ViewController:&#x27;</span>+ <span class="string">&#x27;UIViewController\n\n&#x27;</span>,number,methodArray,<span class="string">&#x27;\n\n@end&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    text_createM(name+<span class="string">&#x27;ViewController&#x27;</span>, <span class="string">&#x27;#import &quot;&#x27;</span>+name+<span class="string">&#x27;ViewController.h&quot;\n\n&#x27;</span> <span class="string">&#x27;@interface &#x27;</span>+ name+<span class="string">&#x27;ViewController()\n\n @end\n\n&#x27;</span>,<span class="string">&#x27;@implementation &#x27;</span>+name+<span class="string">&#x27;ViewController\n\n- (void)viewDidLoad &#123; \n\n [super viewDidLoad];\n\n&#125;\n\n&#x27;</span>,methodArray,<span class="string">&#x27;\n\n@end&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="二、用造好的轮子直接生成"><a href="#二、用造好的轮子直接生成" class="headerlink" title="二、用造好的轮子直接生成"></a>二、用造好的轮子直接生成</h1><p><a href="https://github.com/klaus01/KLGenerateSpamCode">KLGenerateSpamCode 垃圾代码生成器</a></p>
<p>这个项目不仅可以生成垃圾代码，还可以自动化修改类名前缀，详细包含功能如下：</p>
<blockquote>
<p><strong>主要功能：</strong><br>修改工程名<br>修改类名前缀<br>扫描工程中的代码，生成同等数量的 <code>Category</code> 文件，文件中及是同等方法数量的垃圾代码。<br>修改 <code>xxx.xcassets</code> 文件夹中的 <code>png</code> 资源文件名。<br>删除代码中的所有注释和空行。</p>
</blockquote>
<p>使用时值得注意的有两点，一个是，他生成垃圾代码会遍历你所有的类名，然后生成无用的打印类，而实际使用时，我们并不需要增加如此多的代码，可以选择性的导入相关的 <code>.m</code> 和 <code>.h</code> 文件；另一个是在配置文件中的这个属性</p>
<blockquote>
<ul>
<li><code>ignoreDirNames</code> [忽略文件夹名称字符串] 忽略这些文件夹，对-<code>modifyClassNamePrefix</code> 和 - <code>spamCodeOut</code> 参数有效。目前只会忽略源码文件夹绝对路径下一级的这些目录。如：&#x2F;p&#x2F;s - <code>ignoreDirNames categorys</code>，那么 <code>/p/s/categorys</code> 会被忽略，但 <code>/p/s/viewControllers/categorys</code> 不会忽略。</li>
</ul>
</blockquote>
<p>因为他设定逻辑的原因，所以你可能要重复添加文件夹路径。这里我们需要做的是，到项目内部的<code>main</code> 方法里，添加判断，比如在这个方法可以添加判断，如果文件路径包含你想跳过的字符，直接 <code>return</code> ，就不用那么费劲了。</p>
<figure class="highlight objectivec"><figcaption><span>Objective-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> modifyClassNamePrefix(<span class="built_in">NSMutableString</span> *projectContent, <span class="built_in">NSString</span> *sourceCodeDir, <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *ignoreDirNames, <span class="built_in">NSString</span> *oldName, <span class="built_in">NSString</span> *newName) &#123;</span><br><span class="line">    <span class="built_in">NSFileManager</span> *fm = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历源代码文件 h 与 m 配对，swift</span></span><br><span class="line">    <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *files = [fm contentsOfDirectoryAtPath:sourceCodeDir error:<span class="literal">nil</span>];</span><br><span class="line">    <span class="type">BOOL</span> isDirectory;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *filePath <span class="keyword">in</span> files) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *path = [sourceCodeDir stringByAppendingPathComponent:filePath];</span><br><span class="line">        <span class="keyword">if</span> ([fm fileExistsAtPath:path isDirectory:&amp;isDirectory] &amp;&amp; isDirectory) &#123;</span><br><span class="line">            <span class="keyword">if</span> (![ignoreDirNames containsObject:filePath]) &#123;</span><br><span class="line">                modifyClassNamePrefix(projectContent, path, ignoreDirNames, oldName, newName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSString</span> *fileName = filePath.lastPathComponent.stringByDeletingPathExtension;</span><br><span class="line">        <span class="built_in">NSString</span> *fileExtension = filePath.pathExtension;</span><br><span class="line">        <span class="built_in">NSString</span> *newClassName;</span><br><span class="line">        <span class="keyword">if</span> ([fileName hasPrefix:oldName]) &#123;</span><br><span class="line">            newClassName = [newName stringByAppendingString:[fileName substringFromIndex:oldName.length]];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newClassName = [newName stringByAppendingString:fileName];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 文件名 Const.ext &gt; DDConst.ext</span></span><br><span class="line">        <span class="keyword">if</span> ([fileExtension isEqualToString:<span class="string">@&quot;h&quot;</span>]) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *mFileName = [fileName stringByAppendingPathExtension:<span class="string">@&quot;m&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> ([files containsObject:mFileName]) &#123;</span><br><span class="line">                <span class="built_in">NSString</span> *oldFilePath = [[sourceCodeDir stringByAppendingPathComponent:fileName] stringByAppendingPathExtension:<span class="string">@&quot;h&quot;</span>];</span><br><span class="line">                <span class="built_in">NSString</span> *newFilePath = [[sourceCodeDir stringByAppendingPathComponent:newClassName] stringByAppendingPathExtension:<span class="string">@&quot;h&quot;</span>];</span><br><span class="line">                renameFile(oldFilePath, newFilePath);</span><br><span class="line">                oldFilePath = [[sourceCodeDir stringByAppendingPathComponent:fileName] stringByAppendingPathExtension:<span class="string">@&quot;m&quot;</span>];</span><br><span class="line">                newFilePath = [[sourceCodeDir stringByAppendingPathComponent:newClassName] stringByAppendingPathExtension:<span class="string">@&quot;m&quot;</span>];</span><br><span class="line">                renameFile(oldFilePath, newFilePath);</span><br><span class="line">                oldFilePath = [[sourceCodeDir stringByAppendingPathComponent:fileName] stringByAppendingPathExtension:<span class="string">@&quot;xib&quot;</span>];</span><br><span class="line">                <span class="keyword">if</span> ([fm fileExistsAtPath:oldFilePath]) &#123;</span><br><span class="line">                    newFilePath = [[sourceCodeDir stringByAppendingPathComponent:newClassName] stringByAppendingPathExtension:<span class="string">@&quot;xib&quot;</span>];</span><br><span class="line">                    renameFile(oldFilePath, newFilePath);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">                    modifyFilesClassName(gSourceCodeDir, fileName, newClassName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([fileExtension isEqualToString:<span class="string">@&quot;swift&quot;</span>]) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *oldFilePath = [[sourceCodeDir stringByAppendingPathComponent:fileName] stringByAppendingPathExtension:<span class="string">@&quot;swift&quot;</span>];</span><br><span class="line">            <span class="built_in">NSString</span> *newFilePath = [[sourceCodeDir stringByAppendingPathComponent:newClassName] stringByAppendingPathExtension:<span class="string">@&quot;swift&quot;</span>];</span><br><span class="line">            renameFile(oldFilePath, newFilePath);</span><br><span class="line">            oldFilePath = [[sourceCodeDir stringByAppendingPathComponent:fileName] stringByAppendingPathExtension:<span class="string">@&quot;xib&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> ([fm fileExistsAtPath:oldFilePath]) &#123;</span><br><span class="line">                newFilePath = [[sourceCodeDir stringByAppendingPathComponent:newClassName] stringByAppendingPathExtension:<span class="string">@&quot;xib&quot;</span>];</span><br><span class="line">                renameFile(oldFilePath, newFilePath);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">                modifyFilesClassName(gSourceCodeDir, fileName.stringByDeletingPathExtension, newClassName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 修改工程文件中的文件名</span></span><br><span class="line">        <span class="built_in">NSString</span> *regularExpression = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;\\b%@\\b&quot;</span>, fileName];</span><br><span class="line">        regularReplacement(projectContent, regularExpression, newClassName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>iOS</tag>
        <tag>OC</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>焉识！焉识？</title>
    <url>//yansi-who-knows.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　去年冯小刚的《芳华》上映，因为电影去看了原著小说，小说写的很好，看的见有女性细腻的心思在里面，但又不会显得格局小，聪明又不咄咄逼人，词条上搜索作者，严歌苓，照片上的人风姿卓卓，依稀可见年轻时候的好看样子。当时还在看龙应台的《目送》，虽然文笔不错，感情也很真挚，但抒情的方式总像八九十年代的武打片，走硬桥硬马的路子，缺乏灵活变通。可能是我们彼此之间有着一个时代的间隔，所以我不能理解，和彼不能被理解，都情有可原，不过一个刻板的老先生的印象还是被留在了我的脑海里，看网上的照片发现原来作者是女的，纠正之后是，一个刻板的老女人，后来又看了她在<a href="https://www.youtube.com/watch?v=ZV7Uz4DqWFI">香港大学的演讲</a>，刻板又变成了刻薄，此处按下不表。总之，才华和人都很有看头，是一件很难得的事。<br>　　看了《芳华》之后，一直想把她其他的书都给看了，不过被其他的事分了心，直到前几天才看完《陆犯焉识》。<br>　　书讲的是一个中国近代的知识分子陆焉识，出国留学，回国后当老师，被继母的安排下和她家里的表侄女缔结了封建时代的婚姻，开始在风情而精明的继母和温婉而坚韧的妻子夹缝间尴尬的家庭生活，之后解放后因为不谙世事的张扬激越而成为”反革命”，在漫长的分离中意识到让自己一直抵触的封建婚姻，在它的另一头站着的那个人——冯婉瑜，他是爱她的。而在平反后，久别重逢，冯婉喻失忆了。他像一个新朋友陪在她身边，照顾她，在冯婉喻去世后，他也离开了上海，离开了他的儿子女儿。<br>　　看完之后回来看书名，《陆犯焉识》，焉识既是男主角的名字，又是故事后半段剧情的呼应，冯婉喻失忆了，焉识偌大的活人站在她面前她也不认识，焉识，焉识，如何认识。小说作者用了双螺旋的手法，一边从陆焉识成为犯人劳改开始，一边从陆焉识童年开始，最后时间线两两相接，知道陆焉识何以成为犯人，平反之后的人情世事又何以得到当前布局。故事两面，一面粗粝蛮横，善恶模糊，一面是多姿多彩，夹杂当时战局时事和家长里短的琐碎，两面都好看。<br>　　有一些遗憾的是，陆焉识是如何从一个翩翩浊世佳公子变成冷酷谨慎的犯人老几的过程，作者没有细写，但凡文学作品里，这种人物发生巨大变化的过程，因为前面铺垫都有了，只要稍花心思就可以写的很精彩。但不写的原因，如果不是忘记写了，我想到的可能是，变化往往意味着需要否定自己从前一直信奉的东西，对于主人公——原型是作者的姥爷，可能作者出于私心的维护，不去写他如何否定自己，去接受了一种新的更为野蛮的生存法则的全部心理活动，把陆焉识人生里那样晦暗不明的部分选择性的藏了起来。<br>　　阅经千帆后经过不断反刍往事而爱上冯婉喻的陆焉识，对他们俩关系的总结是，冯婉喻是他寡味的开端，却是他完美的归宿。正如书里所说的，这种爱也是不对等的，因为他爱上婉瑜的过程里，二十年间可以接触的只有劳改的犯人，他可想可思的只有一人。相较之下，冯婉喻的源自旧社会里跟一个人就跟他一辈子的爱，虽然盲目的有些可笑，但在量在质上都胜出他大半截，毛姆《面纱》的那段经典对白放在这里大概可以改成这样：</p>
<blockquote>
<p>　　我知道你骄傲，自大，没有用场，然而我爱你。我知道你的企图、你的理想，你不爱我、想远远逃离，然而我爱你。我知道你只是怜悯我才施舍些许的温柔，然而我爱你。[^1]</p>
</blockquote>
<p>　　当然冯婉喻没有这样的见地，她怎么可能有，她第一次见面就被他的潇洒样子迷得神魂颠倒了。这些话只是我作为局外人打抱不平的一些牢骚。虽然一开始我是站焉识的。后面婉瑜失忆，他一直陪伴左右，仿佛补上婚前的一段自由恋爱，作者这么安排大概也是为了看起来像是一种补偿，直到婉瑜撒手人世，终无亏欠。<br>　　从主线出来，细枝末节也有很多可看的地方，被继母说没有用场——有本事但不同人事的陆焉识，他的儿子终于有了用场，终成俗庸小市民。他的女儿是精英分子，才貌俱佳，但最终也在成为大龄剩女后胡乱选择了一个配偶，也混入芸芸众生的平庸面孔之中。陆焉识最后的离开和他的子女们活的不太清爽也有很大的关系。<br>　　张艺谋拍了小说的电影版《归来》，看了一遍，觉得一般，没像《活着》把整个故事展开，而是截取了一小段——陆焉识平反回来，陪在冯婉喻身边。比小说逊色很多，把一篇长篇故事缩水成了一个小品。不过影片开始，陆焉识越狱出来，在火车站上和冯婉喻互相呼喊着想拥抱对方，但一直被政府人员拦下，这个桥段仍然触动到了我。<br>　　整本书看完印象深刻的除了他们的爱情，还有中国的政治。文革，是不会原谅的。<br>　　　　<br>[^1]: 原文：我知道你愚蠢、轻佻、头脑空虚，然而我爱你。我知道你的企图、你的理想，你势利、庸俗，然而我爱你。我知道你是个二流货色，然而我爱你。</p>
]]></content>
      <categories>
        <category>旁白</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>读后感</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 开发里的那些散手（二）</title>
    <url>//ios-develop-tips-2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>*　　一直有把 iOS 开发里用到的一些边边角角的小技巧写成一个集合的想法，但一直没有付诸实践。刚好备忘录里的零零碎碎记的东西够凑成一篇东西来，就把之前的一篇 <a href="http://www.kaaaaai.cn/eleventh">OC 笔记 - 一些小技巧和问题处理的集合</a> 给改了名，加上现在的第二篇，打算以后写成一个系列。长路漫漫，与诸君共勉。*</p>
<h2 id="一、打印bool值"><a href="#一、打印bool值" class="headerlink" title="一、打印bool值"></a>一、打印bool值</h2><figure class="highlight objectivec"><figcaption><span>Objective-C</span></figcaption><table><tr><td class="code"><pre><span class="line">Bool _YESorNO = <span class="literal">YES</span>;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;BOOL--YESorNO--&gt;%@&quot;</span>,_YESorNO?<span class="string">@&quot;YES&quot;</span>:<span class="string">@&quot;NO&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="二、判断系统语言"><a href="#二、判断系统语言" class="headerlink" title="二、判断系统语言"></a>二、判断系统语言</h2><figure class="highlight objectivec"><figcaption><span>Objective-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSUserDefaults</span> * defaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</span><br><span class="line"><span class="built_in">NSArray</span> * allLanguages = [defaults objectForKey:<span class="string">@&quot;AppleLanguages&quot;</span>];</span><br><span class="line"><span class="built_in">NSString</span> * preferredLang = [allLanguages objectAtIndex:<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;当前语言:%@&quot;</span>, allLanguages); </span><br><span class="line">       </span><br><span class="line"><span class="keyword">if</span> ([preferredLang rangeOfString:<span class="string">@&quot;en&quot;</span>].location != <span class="built_in">NSNotFound</span>) &#123;</span><br><span class="line"><span class="comment">//如果是英文，做相关处理</span></span><br><span class="line">   ...</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>([preferredLang rangeOfString:<span class="string">@&quot;zh-Hans&quot;</span>].location != <span class="built_in">NSNotFound</span>)&#123;</span><br><span class="line"><span class="comment">//如果是中文，做相关处理</span></span><br><span class="line">   ...         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、检测数据类型"><a href="#三、检测数据类型" class="headerlink" title="三、检测数据类型"></a>三、检测数据类型</h2><figure class="highlight objectivec"><figcaption><span>Objective-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> myObject = <span class="number">10</span>;</span><br><span class="line">[myObject isKindOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]]</span><br></pre></td></tr></table></figure>

<h2 id="四、获取NSString字符串字节长度"><a href="#四、获取NSString字符串字节长度" class="headerlink" title="四、获取NSString字符串字节长度"></a>四、获取NSString字符串字节长度</h2><figure class="highlight objectivec"><figcaption><span>Objective-C</span></figcaption><table><tr><td class="code"><pre><span class="line">- (<span class="type">int</span>)convertToInt:(<span class="built_in">NSString</span>*)strtemp</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> strlength = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>* p = (<span class="type">char</span>*)[strtemp cStringUsingEncoding:<span class="built_in">NSUnicodeStringEncoding</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span> ; i&lt;[strtemp lengthOfBytesUsingEncoding:<span class="built_in">NSUnicodeStringEncoding</span>] ;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*p) &#123;</span><br><span class="line">            p++;</span><br><span class="line">            strlength++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strlength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方式</p>
<figure class="highlight objectivec"><figcaption><span>Objective-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *tempStr = <span class="string">@&quot;Hello World！&quot;</span></span><br><span class="line">Int strLength = [<span class="keyword">self</span> convertToInt:tempStr];</span><br></pre></td></tr></table></figure>

<h2 id="五、更新-tableView-并滚动到固定下标位置"><a href="#五、更新-tableView-并滚动到固定下标位置" class="headerlink" title="五、更新 tableView 并滚动到固定下标位置"></a>五、更新 tableView 并滚动到固定下标位置</h2><p>在更新 <code>tableView</code> 时，调用此方法</p>
<figure class="highlight objectivec"><figcaption><span>Objective-C</span></figcaption><table><tr><td class="code"><pre><span class="line">-(<span class="type">void</span>)updateTableView&#123;</span><br><span class="line">    <span class="built_in">NSIndexPath</span>* path=[<span class="built_in">NSIndexPath</span> indexPathForRow:<span class="keyword">self</span>.talkArr.count<span class="number">-1</span> inSection:<span class="number">0</span>];</span><br><span class="line">    [<span class="keyword">self</span>.talkView insertRowsAtIndexPaths:@[path] withRowAnimation:<span class="built_in">UITableViewRowAnimationTop</span>];</span><br><span class="line">    [<span class="keyword">self</span>.talkView scrollToRowAtIndexPath:path atScrollPosition:<span class="built_in">UITableViewScrollPositionBottom</span> animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六、iOS-解决-NSData-转-NSString-后字符为空"><a href="#六、iOS-解决-NSData-转-NSString-后字符为空" class="headerlink" title="六、iOS 解决 NSData 转 NSString 后字符为空"></a>六、iOS 解决 NSData 转 NSString 后字符为空</h2><p>iOS 中，将 <code>NSData</code> 转 <code>NSString</code> 的一般方法为</p>
<figure class="highlight objectivec"><figcaption><span>Objective-C</span></figcaption><table><tr><td class="code"><pre><span class="line">[[<span class="built_in">NSString</span> alloc] initWithData:data encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br></pre></td></tr></table></figure>

<p>但是当 <code>data</code> 中包含 00 时，所获得的新字符就会为 <code>nil</code>，这时我们应该这样转</p>
<figure class="highlight objectivec"><figcaption><span>Objective-C</span></figcaption><table><tr><td class="code"><pre><span class="line">[<span class="built_in">NSString</span> stringWithUTF8String:[data bytes]];</span><br></pre></td></tr></table></figure>

<h2 id="七、判断一个-view-是否为另一个-view-的子视图"><a href="#七、判断一个-view-是否为另一个-view-的子视图" class="headerlink" title="七、判断一个 view 是否为另一个 view 的子视图"></a>七、判断一个 view 是否为另一个 view 的子视图</h2><figure class="highlight objectivec"><figcaption><span>Objective-C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">BOOL</span> isSubView = [myView isDescendantOfView:<span class="keyword">self</span>.view];</span><br></pre></td></tr></table></figure>

<h2 id="八、cell-添加-button-后通过-button-获取到-cell"><a href="#八、cell-添加-button-后通过-button-获取到-cell" class="headerlink" title="八、cell 添加 button 后通过 button 获取到 cell"></a>八、cell 添加 button 后通过 button 获取到 cell</h2><p>首先给 <code>Button</code> 添加点击方法</p>
<figure class="highlight objectivec"><figcaption><span>Objective-C</span></figcaption><table><tr><td class="code"><pre><span class="line">[cell.btn addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(cellBtnClicked:event:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br></pre></td></tr></table></figure>

<p>在点击方法里实现</p>
<figure class="highlight objectivec"><figcaption><span>Objective-C</span></figcaption><table><tr><td class="code"><pre><span class="line">-(<span class="type">void</span>)didClickButton:(<span class="built_in">UIButton</span> *)button  </span><br><span class="line">&#123;  </span><br><span class="line">      Mycell *cell = (Mycell *)button.superview.superview;  </span><br><span class="line">    <span class="built_in">NSIndexPath</span> *indexPath = [<span class="keyword">self</span>.tableView indexPathForCell:cell];  </span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@&quot;index of current cell:%ld&quot;</span>, indexPath.row);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>iOS</tag>
        <tag>OC</tag>
      </tags>
  </entry>
  <entry>
    <title>他三本书厚的怀念</title>
    <url>//three-books-thick-with-nostalgia.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="《少年巴比伦》"><a href="#《少年巴比伦》" class="headerlink" title="《少年巴比伦》"></a>《少年巴比伦》</h2><div align = right> [路内](https://www.amazon.cn/dp/B00XOIYY9S/ref=sr_1_2?ie=UTF8&qid=1522639554&sr=8-2&keywords=%E5%B0%91%E5%B9%B4%E5%B7%B4%E6%AF%94%E4%BC%A6) </div><div align = right> 5 条标注 </div> 


<p id="div-border-left-green">  我曾经对她说过,将来我再遇见你,一定会毫不犹豫地喊你的名字,因为有情有义,不能装作从来没认识你.你在河流中看到岸上的我,这种短暂的相遇,你可以认为是一种告白,我在这个世界上无处可去所以又撞见了你。

<p>  那天我在吵吵闹闹的牛扒城，用很低的声音说，白蓝，我爱你。但那地方太吵，连我自己都听不清。说完这句话，她没有任何反应，我想放亮嗓子再大声说一次，但我又觉得，这件事情连做两次是很傻逼的，第一次是为了爱她，第二次纯粹只是为了让她听见。我就当自己什么都没说过。</p>
<p>  人活在世界上，找不到所爱的人，尚且能爱爱这个世界，可是找不到所恨的人，要去空泛地恨这个世界，这件事太荒谬。</p>
<p>  所谓有出息，这是一个很虚幻的词，我不知道什么叫有出息，但我知道什么叫没出息，并且知道，没出息的人不可爱。但是，我活了二十岁，仍然有人长久地爱着我，也有些人短暂地爱过我，这些我都不会忘记。</p>
<p>  我说，很长一段日子，我都认为自己无人可爱，所以只能爱你。我为这种爱情而羞愧，但在这样的旅程中我无法为自己的羞愧之心承担责任，假如无路可走，那不是罪过。但我也不想睁着无辜的双眼看着你，你既不在此岸也不在彼岸，你在河流之中。大多数人的年轻时代都被毁于某种东西。像我这样，自认为一开始就毁了，其实是一种错觉，我同样被时间洗得皱巴巴的，在三十岁以后，晾在我的小说中。<br>   我说，我不再为这种爱情而羞愧，在我三十岁以后回忆它，就像一颗子弹射穿了我的脑袋，可惜你看不到我脑浆进裂的样子了。</p>
</p>

<h2 id="《追随她的旅程》"><a href="#《追随她的旅程》" class="headerlink" title="《追随她的旅程》"></a>《追随她的旅程》</h2><div align = right> [路内](https://www.amazon.cn/dp/B00XMOZT2K/ref=pd_sim_351_6?_encoding=UTF8&psc=1&refRID=9PFF31YNNA4NQD7XAPN7) </div><div align = right> 5 条标注 </div> 


<p id="div-border-left-green">  很多年以来我一直想说，这个新村就是我十八岁时最靓丽的风景线。我知道这个比喻很俗气，可是在我十八岁的时候，那个破破烂烂的新村，靠近粮仓和公路，几幢筒子楼，种着稀稀拉拉的香樟树，我们隔着运河远眺新村楼顶的水箱，在炎夏的烈日中那一片灰色的水泥房子始终散发着女孩子身上的香味。它是我在戴城唯一能够看到的风景线。

<p>  爱情对我来说，就像一把菜刀，明明是应该用来烹饪的，我却用它来砍了人</p>
<p>  对不起什么呢？像一名歌者在台上唱错了歌词，那样的抱歉。而我仍然要对你的抱歉还以掌声。</p>
<p>  你是怎么从喜欢一个人变成喜欢另一个人的呢？这件事是否就像上学念书一样，读完了这学期，就是下学期。如此简单？还是像一个人死了又投生人间，接受轮回之苦。如此艰难？还是像旅途上经过的车站，所有的车站都要离我而去，除了终点以外。如此惆怅？还是像一幕电影，连终点都没有，只是看到一个又一个的角色在眼前晃动，最后灯光亮起，我一个人回家。如此悲伤？</p>
<p>  于小齐说：“不会打架的人，每次都说自己运气不好。” 我说：“是啊，不会谈恋爱的人，每次都说自己遇人不淑。”</p>
</p>

<h2 id="《天使坠落在哪里》"><a href="#《天使坠落在哪里》" class="headerlink" title="《天使坠落在哪里》"></a>《天使坠落在哪里》</h2><div align = right> [路内](https://www.amazon.cn/dp/B00JTR30IE/ref=pd_sim_351_1?_encoding=UTF8&psc=1&refRID=0376CV7TF5CPWP7AJFGX) </div><div align = right> 6 条标注 </div> 

<p id="div-border-left-green">  我们一起看新闻，一个单亲下岗家庭的少年，十五岁就肩负起了生活的重担，靠擦皮鞋和捡破烂养活了微有残疾的爸爸，我们都很感动，想要一个这样的儿子。

<p>  “猜”是一种生活方式，而“猜准”是一种生活能力。</p>
<p>  一九八四年夏天，班上坏孩子欺负他，把他衣服扒了，肚子上画了个王八，他跳起来要拼命。那种不堪矬逼羞辱的尊严，至今传为美谈。到了一九九三年，我去化工学院找他玩，他正在和人打牌，也是夏天，光着膀子，肚子上画了六个王八还在乐。这时我意识到他已经成长为另一个人了。</p>
<p>  厂医姐姐离开以后，每个下雪的日子，我都会想念她。因为她说自己最爱下雪天，还编了一堆诗意的理由，比如说世界因此改变了，比如说丑陋的东西都被遮蔽了。这种屁话使她看起来像个少女。</p>
<p>  反正我们见不得沉默的人，觉得那是一种被压迫过的痕迹，如果你始终沉默，你就始终会遇到压迫。</p>
<p>  别怂，世上最怂的就是让大家评理。</p>
</p>

]]></content>
      <categories>
        <category>剪报</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>中国当代</tag>
        <tag>青春文学</tag>
      </tags>
  </entry>
  <entry>
    <title>春末即兴</title>
    <url>//impromptu-late-spring.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　穿了好几个礼拜的短袖，以为已经到夏天了，这几天的气温骤降才发现春天还没有完全离场，它在这个以小长假开头的四月用尽最后一点力气试图让人们感知到它的存在，它的顽固让街上出现短袖和羽绒袄同时存在的矛盾又喜感的场面，又有大风把陌生路人的一板正经吹走——他们似乎也感到被风吹得七零八散的头发看起来很喜感，抢在别人取笑他们之前先绷不住笑了。城市因为天气的无常，让久居里面的人也忽然的对它感到一丝陌生。像被邀请到一场莫名其妙的派对，人们因为摸不着头脑，而主动向人释放初来乍到的善意，整座城市，一派和气。<br>　　春天即将过去，春天我都干了些什么？似乎什么都没干，但掰开揉碎似乎也有那么一些事情，和菩萨求了支上上签，和几乎不打算联系的朋友完成继初次认识以后的第二次关系破冰，换了份工作，和一个网友恢复通信，认识了一个很像老朋友的新朋友，看了几本书和几场电影。
　　</p>
<h1 id="一、和善男信女们一起"><a href="#一、和善男信女们一起" class="headerlink" title="一、和善男信女们一起"></a>一、和善男信女们一起</h1><p>　　<br>　　在旺季的大雄宝殿里，你会时刻有一种恍惚感，不只是因为香火熏着你的眼睛，而是整个大殿，被缭绕烟雾，绰绰人影和闪烁的烛火交相辉映，会让你有一丝远离人世的超脱感涌上心头，但就一会功夫，大殿外的鞭炮和所有善男信女们祈愿的声音又会让你知道，此刻，正是你离人间烟火距离最近又最远的时候。<br>　　和家人坐缆车上山，缆车在离山顶还有一段距离的位置停下。虽然现代科技让我们在朝圣的路上超了近道，但毕竟是去看菩萨，最后一段的“心诚则灵”，都要全凭自己。<br>　　去大殿的路上经过一座小庙，左右两边各立着两个尊者。表妹问我，哥哥，这些是什么神仙，他们都拜，我们要不要拜啊？我看了看我妈和我小姨在那双手合十念念有词，十分庄重。就低头和她说，不用了，这里都是些小角色，我们上山拜大个的。表妹哈哈大笑，拿着我的话和大人们说，他们也都会心一笑。<br>　　到了山顶，进殿点香，因为要给好多菩萨上香，每个人手里都拿着五六十根香，所以点香的时候很容易把整把香烧着，有的人看火灭不掉就把所有香丢掉，地上七零八散的散落了好多香，旁边有道士在劝阻，不用点那么多，可以去里面再点，每个人点三根就好了。但拦不住虔诚到红了眼的人们。我把香上的火刚扇灭，看我妈的香也在起火就把她的香拿了过来，走到一边，试图也把它弄灭。<br>　　拜菩萨的顺序，长辈们心里都有底，知道哪位菩萨要先来，哪位菩萨可以暂时放在一边，而到最后，怎么也不会冷落任何一位。我们小辈就随波逐流，见佛就拜。见到的有灶神，有弥勒佛，有送子送财送姻缘菩萨，有天王罗汉洋洋洒洒数十座，有老相识也有新面孔，我都没有厚此薄彼，迎面赶上，纳头便拜，偶尔福至心灵，就在心里念上一句，希望明年能如何如何。不过起身的时候总也免不了在心里嘀咕上一句，到底有没有菩萨？<br>　　最后长辈们让我们自己去找菩萨求根签，求签是怎么回事呢？大雄宝殿的中心位置，有很多蒲团，围绕着蒲团散落了一地的签，人们随手拿起一根，再拿两个贝壳形状的竹片往地上投掷，如果三次都是一正一反就说明这根签是给你的。听我妈说明怎么求签后，我算了一下，投掷一次出现正反的可能性大概是三分之一，投掷两次都是正反的可能性大概是九分之一，投掷三次都出现正反的可能性大概是二十七分之一。也就是说，如果说宗教是人们对生活、世界乃至宇宙里未知部分的一种推测结果，满天神佛就可能是那散落在从零到一里面的无限个概率，二十七分之一，这个概率代表了其中一位在派签的菩萨。这真是一个忙碌的概率。<br>　　在抽签大厅放眼望去，七八十个人头不断起伏涌动，人们快速的捡起继而投掷竹片，发现竹片两个面都一样就立马丢掉手中的签低头再捡一根，那种有些火急火燎的神态和盲目感让这些信徒看起来像在牌桌上一掷千金的赌徒，我想如果能听见人的心里话，他们里面大部分人可能都在说：快给我快给我，快给我啊。<br>　　我找了一个空地跪下， 挑了两块顺眼的竹片，慢条斯理的拿起一根签，投掷，正反，投掷，正反，投掷，正正。去你妈的。<br>　　事实证明我一开始的有条不紊，只是我刻意的想和周围人区别开来的一点做无用功，在久没有抽到签后，我也渐渐的和周围人一个神态，只是机械盲目的从地上捡签，投掷竹片，心里念，快给我快给我，快给我啊。直到有些意兴阑珊的时候，终于抽到了那根属于我的签。<br>　　然后根据签上的数字拿签文，再去找道士解签，老道士慈眉善目，他按签文上的字和我们说了一些模棱两可的话，在某个停顿间，我妈心照不宣在他面前的抽屉里放下香油钱。<br>　　吃了顿味道尚可的斋饭我们就下山了。坐在缆车上，我又回头看了看山顶的大雄宝殿，它仍旧被烟雾环绕着，没有了庙里喧嚣的声音，从远处看，它也真有几分仙家福地的气象。回过神来，忽然觉得，我们和菩萨离得最近的时候，大概是在那座小庙里开菩萨玩笑的时候。
　　
　　</p>
<h1 id="二、做不成睡在风里的无脚鸟"><a href="#二、做不成睡在风里的无脚鸟" class="headerlink" title="二、做不成睡在风里的无脚鸟"></a>二、做不成睡在风里的无脚鸟</h1><p>　　春节后又无所事事了一阵也终于去投简历找工作了。每次找到工作的过程都大同小异，一开始都雄心壮志，觉得我什么都不缺，但哪里都可能缺一个我。然后经过几次失败的面试，开始认清自己，又经历几次失败，开始怀疑自己，然后又是失败，开始自暴自弃，随性发挥的时候，工作的事反而成了。<br>　　面试了一个半礼拜，就像参加一场大型考试，连续的做了好几日笔试试卷，还有一次面试还给安排了机试。面试的公司也千奇百怪，其中最古怪的还是有一家做共享单车做到公司就剩三个人了，问我有没有兴趣当合伙人。可能是合伙人这个名头，这顶帽子一下子扣下来，让初出牛犊的我觉得有些晕晕乎乎的，认真考虑了一下，又抬头看了看这顶帽子，破烂邋遢，想来遮风挡雨应该一样都不行，就委婉的说对共享单车这个行业没什么兴趣。<br>　　又有一次笔试，我和一个女生坐一张桌子，桌子小，两人挨着做试卷，一开始我没发现她和我是一样的试卷，后来她先发现了，挑了挑眉，然后礼貌的朝我笑笑，捂住了答案。我一阵瞠目，想了想就大大咧咧的把试卷朝她那推了推。后来面试完觉得当时貌似大方的举动其实是一种揶揄和挤兑。就想和她照个面打声招呼，就当做刚刚无礼的寥寥歉意。但她比我先面试完，已经早早离开。<br>　　在不知道她已经离开的时候，我也面试完，面试官叫我在接待室里先等等。大概是和人事科的人谈话，虽然关着门，但他们的说话声还是从门外传了过来。<br>　　“怎么样啊，这个？”<br>　　“是真材实料，就是基础有点差。”<br>　　前半句让我有些欣慰，这些天面试题没白背，后半句又让我有些懊悔面试题没多背背。<br>　　“那怎么办啊，这是今天最后一个了。”<br>　　“要我说今天来面试的人里随便挑，哪一个都成。”<br>　　“那这个，他怎么会基础差呢，学校里不是学这个的吗？”<br>　　“和学校没关系，学校也不教这个，这种基础全看各人。”<br>　　“哦，这样啊。”<br>　　后面他们又说了一些无关紧要的事，我没注意听。过了一会就有人进来，领我出去，和我说那今天的面试就到这里，后续有通知他们再联系我。<br>　　好的。我轻快的回答了她。但心里有些沮丧，从刚在门外的谈话听得出来他们是可以立马做出决定的，是我没有做到能让他们立马下决定的程度，这让我在心里反复的苛责自己，我在心里摔碎两百二十四个盘子，直到离开面试的大厦，烦闷和郁郁仍然挥之不去。<br>　　去坐地铁的路上，我骑单车在车道上漫无目的的左右摇摆，旁边穿过去一骑电瓶车的白背心老头，冲我大喊：靓仔，你到底左边走还是右边走啊。虽然心情不好，但听到问话我还是忍不住和他开起了玩笑，回他：两边都走喽。他超我两个车轮距离，仍旧大喊，语气像把紧攥着的拳头放在空中挥舞：“两边都走，我都没得走啦。”我不禁莞尔。老头一会功夫就骑得没影，我的坏心情似乎也跟着老头不翼而飞了。<br>　　我爱老头。
　　</p>
<h1 id="三、久违的老朋友和网友和可能在哪见过但久违的新朋友"><a href="#三、久违的老朋友和网友和可能在哪见过但久违的新朋友" class="headerlink" title="三、久违的老朋友和网友和可能在哪见过但久违的新朋友"></a>三、久违的老朋友和网友和可能在哪见过但久违的新朋友</h1><pre><code>  被标记为&quot;Don&#39;t push!&quot; -- 其实是懒得写了。
</code></pre>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>扯谈</tag>
        <tag>季度总结</tag>
      </tags>
  </entry>
  <entry>
    <title>成舟</title>
    <url>//as-the-boat.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="13-号的梦"><a href="#13-号的梦" class="headerlink" title="13 号的梦"></a>13 号的梦</h2><p>　　当我躺在床上，伸展四肢，感受着头皮所有的毛囊都在放松，向着枕头方向缓慢流淌的时候，一只猫从我下体处爬了出来，我有点迷糊，我可是个男的啊，怎么还事生产了呢？<br>　　而且，还是一只猫。<br>　　在我纠结我是怎么生下猫的时候，另一猫又爬出来，在我的身体其他部位，陆陆续续的开始爬出各种各样的动物，我的胸口跳出两只羊，我的小腿钻出两只犀牛，我的胳肢窝迈出了两只鸵鸟。我见过的，我没见过的，最后两个人类一男一女从我的肚脐里爬了出来，他们站起身，我才看到是两个肌肉健硕的成年人。<br>　　海浪拍打着我的床沿，我听见他们在讨论把我拆掉做成遮风挡雨的房子。我感觉到他们诞生的地方在一点点消失，我的小腿，我的阴茎，我的胸膛。只剩下头颅的时候，听见男声问：还要继续拆吗？<br>　　女声斩钉截铁：动手吧。<br>　　<br>　　我大汗淋漓的醒了过来。</p>
<p>　　</p>
<h2 id="15-号的梦"><a href="#15-号的梦" class="headerlink" title="15 号的梦"></a>15 号的梦</h2><p>　　我和两个陌生人，叫他们 A 和 B 好了。大概是一个网络游戏的场景，我们待在一个新手区，准确的来说，我们在一个房子里——新手房，房子外面守着一个十级的人类反派Boss。可能这是个武侠类的游戏，我们都宽袍大袖，手拿宝剑。<br>　　我们要做的事是完成新手试炼，杀死外面那个 Boss 或者从他手底下逃走，进入下一个区域。<br>　　A 想到一个让我们逃跑的计划，就是他先冲出去，他速度快，带着 Boss 在房子外面绕圈圈，而我和B则抓住他们跑到房子周长二分之一的位置时候开始跑向下一个区域，等我们离开房子，他再跑一又二分之一圈，就开始追上我们，一起到下一个区域。<br>　　按计划展开了。我们跑出房间，通往下一个区域的是一条笔直向上、一眼望不到头的大理石阶梯。我们施展着类似周星驰电影《功夫》里和包租婆赛跑姿势的轻功，在阶梯上飞驰。<br>　　A 很快就追了上来，后面不远就是那个大 Boss。我们眼神交换，意味不言自明：接下来该怎么办？<br>　　B 说：要不然，你再去拖住他。<br>　　我们都清楚在这丝毫没有辗转腾挪余地的阶梯上，再去拖住他，意味着什么。也清楚B把话说出口，对 A 意味着什么。<br>　　A 面无表情，向我挑了挑眉。好像在说：你呢，你怎么想。<br>　　因为心里被恐惧占了一大半，在 B 说出那个主意时，我心里竟涌出松了口气的欣喜。但当我面临要做出让队友去送死的选择，我手心发汗，不知所措，有些难为情，想告诉他要不然试一下吧，但在心里挣扎了一会，最后还是泄气的摇了摇头。<br>　　A 点了点头，不再说话。一阵剑光。<br>　　我又回到了那个新手房，B说我们都被杀了，回档到了这里。他问 A，要不要再试试那个计划。<br>　　A 说不用了，你们先等上一阵。<br>　　可能是一盏茶的时间，也可能过了很久，A 什么话也没交代，径直推开门走了出去。<br>　　很快外面传来了剑刃交击的声音，声音不绝于耳。又过了一会，外面传来一声清啸，之后便什么声音都没有了。<br>　　我们从门缝悄悄的往外看，鲜血流淌了一地，没看见 A 的身影，Boss 仍在不远处守着房子。<br>　　B退回来问：你说 A 是死了，还是已经走了？<br>　　我摇摇头没有说话，被要永远困在这里的预感击溃，我蜷缩在房子的角落，试图躲进黑暗里。<br>　　<br>　　后来我就醒了，想继续睡过去，继续做那个梦，但没有成功。我也没有机会告诉 B，如果 A 死了，我们可以在房子里看到回档的他，如果 A 走了，那么 Boss 应该是死的，但 Boss 活着，而且他手里的那柄剑是 A 的。</p>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>扯谈</tag>
        <tag>梦</tag>
      </tags>
  </entry>
  <entry>
    <title>初入江湖的第一份报告</title>
    <url>//the-first-report-of-the-newcomer.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　公元2017，丁酉年的最后一天，朋友让我用一个字总结一下这一年。我飞鸽传书给他一个“困”字。<br>　　<span id="more"></span><br>　　回信又让我用一个字展望戊戌年，我又把鸽子放出去，它带着“逃”字，逃离了我的屋子，之后反应过来，觉得“木”可能会更好。既有逃离困境的意思，木又是材，通财，有很好的寓意。但鸽子已经飞去有一盏茶了，来不及唤回，心中因此也有些疑虑，这是又要虎头蛇尾一年的征兆吗？<br>　　虽然去年就开始在各大门派投帖，做了一些见习弟子的营生，但到今年才算渡过了离开家乡离开私塾，独自在江湖上漂泊的一整年。对江湖也总算有了个模糊印象，江湖很大，南来北往的有好多人，这些人里又有聪明人和蠢人。和在学堂里碰到的人不同，无论是聪明人还是蠢人，大都喜欢直来直去。哪怕是和你虚以委蛇，也是因为需要虚以委蛇所以才这么做的。大概对于人来人往的江湖，像一剑封喉这种招式，省时省力，才比较讨人喜欢。而那些学堂里不同的部分，无论是被当做花架子还是水墨画里合适的留白，我都会一直怀念他们。<br>　　我的门派往上追溯可以算作墨家分支，平日里碰到的都是聪明人居多。我喜欢和聪明人打交道，有时可以从他们身上学到那么一招半式，虽然不知道什么时候用的上，但总没多大坏处。<br>　　说起武功，比起去年只会一门iOS键法，今年还学会了另一门——安卓键法，但对于偌大的江湖来说，我仍旧是个新的脑门可以反光的新手，按门派师兄的话说是，开武林大会的时候，我们也就是上去嚎两嗓子，给大人物当背景用的小人物。<br>　　当时我问师兄，什么时候才可以在江湖上不被当做道具用？记得那会他有些惆怅，用手指了指大街上，说：“看见没，西域的汗血宝马，那马上的屁股，可能什么武功都不会，但谁看见都不会对屁股吝啬一声少侠。而对我们就叫个小兄弟，大哥大爷，把我们当做进城刚卖完家里青菜的小贩。所以在这江湖上，你会多少武功并不重要，重要的是你用这些武功创造出了多少价值。至少得买得起一头骡子是不是？”“可是据我说知，少林寺藏金阁那个扫地秃驴就没有马，他只有一把扫把，可在江湖上也无人不知无人不晓。”“要是我的武功有他那么高，我也不在乎什么马不马的。”，和我说完这些话不久，他就跳槽到另一个门派去了，我想他可能真的很想买骡子。<br>　　其实师兄的离开是可以预见的，门派陆陆续续的有人离开，去年门派除了掌门还有两位长老，除我以外还有七八名弟子。师兄离开后，门内就只剩掌门和我了。师兄走之前，叫我也跟他一起走，但我还是留下来了。师兄问我留下来的理由，我说因为找不到离开的理由。<br>　　其实留下来的理由还是有的，一是我想等练好那两门武功再去其他门派，那样应该可以混上一个入室弟子什么的，二是掌门待我极宽厚，他又是十八般武艺样样精通的高手，跟着他我可以学到很多东西，另外掌门夫人煮的饭菜也极为可口。<br>　　所以其实我也是自私的，留下来的理由也都是因为自己。开始一阵子，我还试图说服自己想出这两个理由的根本原因是因为我讲义气，但到后面也就不费这劲了，甚至那两个理由也很少再想，只是脚踏实地的在门派渡过每一天，练好我的武功。最近，我好像快有离开的理由了。<br>　　除了门派日渐凋零，难以挽颓势于既倒。下半年我还因为一个姑娘，有了一些甜蜜的烦恼。<br>　　那姑娘是附近商铺的帮闲，平日里也多少见过，除了记得五官端正以外也没多大印象。那日我正在为一个变招抓耳挠腮，心情烦闷，皱着眉站在道上，听见声响，抬头见她迎着太阳光走来，笑容挂了一路，走近，她的笑容又撑开了一些，向我打招呼，说了声好，就像已经灿烂了很久的花忽然又盛开了一遍。一瞬间让我有些目眩神迷，在那里呆过去了一会，回过神来她就已经走远。<br>　　之后找到机会和她交换了信鸽，问她是否有心上人，可能是目的暴露的太快，也可能是我的莽撞，吓到她了，之后约她去看大戏都推脱天气原因，去他妈的天气。<br>　　后来在路上碰见她，赶上去和她聊天。<br>　　“看见你好几次一个人走路回去。”<br>　　“恩，我挺喜欢走路的。”<br>　　“哦~”我停顿了一会，“我也挺喜欢走路的。”<br>　　她白了我一眼：“你又来了。”<br>　　“我。。。”，我有点意识到她说的是什么，但是，“什么，怎么又来了？”<br>　　“能不能好好的聊天，每次聊天，你都要把话题带到让人尴尬的地步。”<br>　　我有些气馁了：“好吧。”<br>　　半响没说话，她忽然出声：“态度端正一点就好。”<br>　　其实我也意识到她说的是什么，但还是想继续装傻。假装没听清问什么。<br>　　“不要总是那样，态度端正一点就好。”<br>　　“态度端正”听她在强调的时候，我恍惚间又回到了闯了祸在老师面前受批评束手无策的时候，“好像老师会说的话。”<br>　　“恩，态度端正，老师说的也没错啊。”<br>　　我反复咀嚼态度端正这几个字，忽然想到，对她说：“那我态度端正了，是不是就可以约你去看电影了？”<br>　　她听到笑了起来，说：“我说你，你怎么会，有时候看起来很笨的，但有时候又很聪明？”<br>　　“啊，我啊，就是可能想有点反差感吧，不想人第一眼看到我是什么样，就以为我是那样的人。”<br>　　“哦，那你对我第一眼印象是什么？”<br>　　我说没什么第一印象，问她还记不记得和我笑着打招呼的那天，她说记得。然后我非常诚恳的向她描述了那天我的心理活动，所谓诚恳，就是没用那些多余的形容词，没有用那个鲜花的比喻，只是说记得她那天很开心，真的很开心。<br>　　那次谈话之后，有一天我忽然反应过来，向女孩描述喜欢上她的场景，丝毫不亚于一场微型表白。也就是说，我又一次的没有沉住气，放弃了一切抵抗向她再次招供。我一边为自己犯的错误懊悔，但另一边又破罐子破摔，颇有些浪漫的想到，我可能就要这么一往情深的栽在她手上了。<br>　　听完我的表白，她低着头没说话，我们两都沉默着。过了一会她就到地方了，在楼底下碰见她的朋友，我只好和她分开。她的朋友看了看我，朝她一个劲的挤眉弄眼，我也忍不住笑了，心情愉快的走了。<br>　　过了不久，她就辞职离开了。我给她发消息，和她说我想到的态度端正，大概就像以前那样做个邻居，偶尔帮他们的忙，听她从隔壁传来的笑声就心满意足。虽然这样也挺好，但我还是向她承认我大概态度端正不了，我想只要看到她露出的一点笑意，我可能就立马变回原形了。之后严肃活泼的和她说了再见。之所以放弃了，是因为感觉在她那收到的拒绝太多了，有些筋疲力尽的疲惫，而且本来也没有非要谈恋爱不可，就想，可能来日方长比较好。<br>　　但那次谈话总是被我一遍又一遍的想起，那似乎是我们唯一一次距离拉近了些的谈话。<br>　　我会怀念她的，也会怀念我的2017。</p>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>年终总结</tag>
        <tag>江湖体验报告</tag>
      </tags>
  </entry>
  <entry>
    <title>三本诗集的片段</title>
    <url>//three-fragments-of-poetry.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="《大海上的柠檬》"><a href="#《大海上的柠檬》" class="headerlink" title="《大海上的柠檬》"></a>《大海上的柠檬》</h1><div align = right> [姚风](https://www.amazon.cn/dp/B01GJKHX40/ref=cm_sw_r_qz_2_dp_2unvzb8Y953A4) </div>
<div align = right> 6 个片段 </div> 

<p><strong>炙热的石头</strong></p>
<p>大约在夏天<br>你给我一块烤热的石头<br>我把它放在左手<br>又把它放在右手<br>日子翻来覆去<br>石头渐渐地凉了<br>我的手收藏了所有的阴影</p>
<hr>
<p><strong>诗人的午餐</strong></p>
<p>*在法罗， 我们坐在大海边<br>我们用诗句歌颂大海<br>我们用牙齿<br>把 一条大鱼剔成大海的胸针</p>
<hr>
<p><strong>景山</strong></p>
<p>夕阳向西山滑去<br>暮色使宫殿渐渐远离<br>游人纷纷下山<br>丁香在山坡独自开放<br>暗香浮动<br>引我凭栏眺望<br>日出日落，千篇一律<br>如朝代更迭<br>无非揭竿而起<br>无非腐败堕落<br>无非再揭竿而起<br>我兴味索然<br>更想知道巍峨宫殿，三千粉黛<br>美丽的人民<br>如何度过<br>她们绝经前后的人生</p>
<hr>
<p><strong>镜子</strong></p>
<p>*树枝在镜子里摇晃<br>我看见了远方和风<br>我还看见，我的五官日渐消瘦<br>而孤独增长了身高<br>但我还没有积攒足够的孤独<br>还没有力量打碎镜子<br>找到深藏镜中的你</p>
<hr>
<p><strong>大海上的柠檬</strong></p>
<p>我要了一杯红茶，你拿来柠檬<br>问我要不要加糖<br>我不喜欢加糖，但喜欢柠檬<br>在阿尔加维， 我们坐在树下喝茶<br>树结满了柠檬和鸟鸣<br>水太蓝，你把一个柠檬扔进了大海<br>此刻，只有风坐在我的身旁<br>不停扯我的衣衫<br>树叶喧哗，如波浪翻卷<br>我看见，一个柠檬向我漂来<br>整个大海<br>没有加糖，只有柠檬<br>只有一个柠檬</p>
<hr>
<p><strong>诗歌</strong></p>
<p>诗歌<br>无法阻止一辆坦克<br>但可以把坦克手<br>培养成一名诗人<br>他跳出那一堆钢铁<br>坐到树下<br>若有所思地写下<br>如下的句子：<br>春天还没有来<br>一只小鸟<br>落在绿色的炮筒上<br>……</p>
<h1 id="《永居异乡》"><a href="#《永居异乡》" class="headerlink" title="《永居异乡》"></a>《永居异乡》</h1><div align = right> [欧阳昱](https://www.amazon.cn/dp/B01GJKHXA4/ref=cm_sw_r_qz_2_dp_2unvzb8Y953A4) </div><div align = right> 1 个片段 </div> 

<p><strong>假如</strong></p>
<p>假如明天就死<br>你想做点什么<br>在天上挖个洞<br>种下一棵诗<br>假如明天就死<br>你想做点什么<br>把国家从脑中挖出<br>作为器官，捐给无国可归者<br>假如明天就死<br>你还想做点什么<br>活摘今天的阳具<br>做明天的装置展出<br>假如明天就死<br>你还有什么想做<br>找上帝开具结婚证<br>跟死亡永结连理</p>
<h1 id="《每一首都是情歌》"><a href="#《每一首都是情歌》" class="headerlink" title="《每一首都是情歌》"></a>《每一首都是情歌》</h1><div align = right> [王小龙](https://www.amazon.cn/dp/B01GNVYL40/ref=cm_sw_r_qz_2_dp_2unvzb8Y953A4) </div><div align = right> 1 个片段 </div> 

<p><strong>鼓浪屿</strong></p>
<p>我要在夜半偷偷砍断所有的缆绳<br>放你逃走，鼓浪屿<br>逃得很远很远<br>让你去优美地流浪<br>月亮们找不到你<br>每个夜晚你都在另一个地方梦呓<br>把凤凰花瓣撒满海上<br>我们将永远站在岸上<br>一次次睡去一次次醒来<br>活着活着然后无奈地死去<br>八月的阳光下狗在咻咻奔走<br>公共汽车太挤<br>冬天太冷<br>钱太少<br>而你依然优美地流浪<br>从终日半合的百叶窗里<br>以少女的琴声召唤上一 世纪<br>哦日光岩下的三角梅<br>哦月光漫上了台阶<br>这时攀缘而上的常春藤一起松开<br>白鲸浮出水面<br>兵舰们围绕着你<br>这个世界上的兵舰<br>假如只是为了检阅<br>为了漂亮地穿过波浪<br>那么你垂悬在古榕树上的梦<br>会是多么真实令人神往我们将永远站在岸上</p>
]]></content>
      <categories>
        <category>剪报</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>诗歌</tag>
      </tags>
  </entry>
  <entry>
    <title>写作计划</title>
    <url>//writing-plan.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><em>断断续续的有一些写故事的灵感，但想到以后除了在备忘录敲几个关键字做记录，等到回头想起来，当时的创作冲动已经不在了，明白等到有完整的故事是遥遥无期的，又看了朱岳老师短篇集的《写作计划》——里面描述了一个写作计划者的计划写作日常，就想假装一个写作计划者写一个写作计划。是以，此篇致以那些无疾而终的灵感和朱岳老师</em></p>
<h1 id="计划1"><a href="#计划1" class="headerlink" title="计划1"></a>计划1</h1><p>　　写一个在不知名的岛屿上有一个王国，因为风调雨顺，国王和人民都衣食无忧，政治也特别开明，开明到每个人都可以竞选国王。竞选国王的标准是说出一句称得上名言的话。这个传统起源无从考察，有模糊记录说是某任国王想在这座小岛上发展出灿烂的文化，鼓励人们创作。<br>　　写作路线是先简单的描述一下小岛的创作黄金时代。写那时的人们说出了很多精彩的话——分别摘抄不同的名人名言，参考有柏拉图，亚里士多德，尼采，王尔德等，因其风格而分出不同的时期，记录演变过程，比如古典时期有：“尊重人不应该胜于尊重真理。”“但凡不能杀死你的，最终都会使你更强大。 ”“每一个不曾起舞的日子，都是对生命的辜负。”这时还是一些传统的格言，到流行时期，人们学会了讽刺：“报纸和文学的区别是，报纸没法读，而文学则没人读。”“摆脱诱惑的唯一方式是臣服于诱惑……我能抗拒一切，除了诱惑。 ”“时装是一种让人无法忍受的丑陋，所以我们必须每六个月换一次。”到了嬉皮士盛行的时期，人们开始嘲弄一些流于表面的事，“在教堂听讲经的时候我们应该保持肃静，打扰别人睡觉是很不礼貌的。”“女人是制造人类的工具，男人是使用工具的人类。 ”<br>　　然后简单写一个过渡时期，露出人们智慧被消耗完的端倪，写一些：“如果你想吃午饭，最好别忘记带上筷子。”“人们会在厕所摔跤，一定是因为他忘记摘下脑袋上的眼罩。”之类的话。<br>　　最后重点是当代选举，当所有的智慧都被花费干净，人们开始从技巧上花费心思。经过重重筛选，竞选国王的最后只剩下三位候选者。<br>　　候选者A是个游泳选手，他带来的是一口气说出一部荷马史诗，事实上之前有许多任国王登上王位，都是因为说出了荷马史诗里的一些片段，候选者A觉得当他一口气说完了一部荷马史诗，相当于重新演绎了整部荷马史诗，从许多片段脱离出来而达到了完整。<br>　　候选者B说的是“如果一个女人不能让她犯的错误变得迷人，她就只是一个雌性动物。”，当然如果仅仅是这一句话是不够的，因为之前已经有国王用过了，而他使用的技巧是放慢阅读速度，但他说完错误两个字时，来参与投票的选民已经从一夜的睡眠里醒了过来。他说完整段话，整整用了三天三夜，当然他不是纯粹的放慢速度，而是在一个字的发音上百转千回，如果有人留心记录可以发现他每一个词语分开都是一个单独的乐章，“如果”是巴赫的第一号无伴奏大提琴曲，“错误”是贝多芬的生命交响曲，“女人”两个字他则用上了探戈舞曲一步之遥。他试图用一种充满多样性的迟缓来让这句某个前任国王的墓志铭重焕光彩。<br>　　候选者C上台，情况已经对他相当不利了，前两名候选者已经把原本一天结束的大选拉长到了一个礼拜，除了卖香烟瓜子的小贩很高兴，选厅里充斥着嘴角起泡血丝爬满双眼的上火选民们，似乎在这种气氛下，选民和暴民也只有一线之隔。而候选手C说的话是：“理真重尊于胜该应不人重尊。”<br>　　最终人们一致推选C作为新国王，他们认为他把古典时期的名言倒过来讲创造了一种新的可能，而比起前两位的尝试，省时省力。<br>　　而这种可能的优点很快就在第二年选举体现了，之后出现了大量倒着说话的国王。在一年比一年欢快的选举日里，有少数人质疑，我们难道不是在原地踏步吗？但质疑声很快就被其他的欢呼声给淹没了。
　　</p>
<h1 id="计划2"><a href="#计划2" class="headerlink" title="计划2"></a>计划2</h1><p>　　第二个故事的灵感来至于《返老还童》和《杀死一只知更鸟》，故事是以一个快退休的十七岁法官的视角开始，他们的城市规定所有初生的婴儿必须送入市政厅培训，在三岁的时候根据个人喜好分配进不同的政府部门，到十八岁成年离开政府，学习，或者进入社会工作。只有这样的制度才能保证政府机构杜绝官僚主义和人浮于事。<br>　　十七岁法官所遇到的问题是，眼前他的案子是城市规划局的副局长贪污，资料显示，他现在十岁，已经在城市规划局干了七年了，兢兢业业，没出过任何错，年年评先进都有他的提名，但在上个礼拜的早上有人匿名举报他收了某个人一架玩具飞机，而且之后也确实在他办公室的保险柜发现了这架玩具飞机。按资料的前半段说，他应该会像很多其他的模范干部一样，到任期满，离职，找个好大学或者好待遇的基层工作享受退休生活才对。为什么会贪污？<br>　　而且这次贪污还引发了一次大规模的社会舆论：未成年人组成的政府是否还拥有公信力。而一些政府部门的表现更加扩大了群众的怀疑，比如公安部和司法部部长在一次公开会面里谈论了这个案子，除了表明公事公办的态度，向群众证明未成年人政府的可靠，在谈话之余，似乎也隐隐透露出夹心糖果和巧克力蛋糕对于自己存在着一些无法抵挡的诱惑力。<br>　　中间巴拉巴拉写一大段整个案件起因发展，和审理经过。<br>　　最后证明是被诬陷的，是一有组织成年人团伙试图颠覆未成年人政权所做的一连串有组织的栽赃陷害。案件总算告一段落，而这之前社会上长期存在着的，对未成年人执政的疑虑和怨气，也都因为这个案子，被摆到桌面上，并随着案子进度一点点被打消掉。其乐融融的未成年人和成年人们决定把案件审理结束那一天定为未成年人的假期。至此，每年的六一，如果你有幸去到这座城市，你会发现所有的政府机构都空无一人，而如果你问起，那里的居民则会告诉你，今天是官员们玩玩具飞机的日子。</p>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>灵感碎片</tag>
        <tag>写作计划</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我和你的梦</title>
    <url>//dreaming-about-you-and-me.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　自卑的我尾随着你，一言不发。在一个红绿灯前，我们的距离前所未有的接近，你被我不近人情的沉默吓到，低声的啜泣了起来。<br>　　骄傲的我大踏步踩着斑马线从对面走来，把你揽在怀里：“没关系，不要怕，还有我。”，我轻轻的拍打着你的肩膀进行安慰。<br>　　小气的我一把推开了我，对视僵持了一会，“你，你凭什么？”，骄傲的我又是敏感的我，一瞬间思绪万千，遗憾又舍不得的松开了最后搭在你肩头的手。<br>　　轻佻的我向前迈了一步，拾起你垂在身侧的手，又把你正在遮挡眼泪的手拿开，看着你说：“别哭，又不是没有男朋友的人对不对，再哭就不好看了。”。<br>　　怕麻烦的我和迟钝的我停下了在一边的跳山羊游戏，阴阳怪气说：“啧啧啧，还又不是没有男朋友的人，真是不要脸，别人答应你什么了嘛？”“是啊是啊，趁人之危倒是有鼻子有眼的。”，被戳破小心思的我，露出轻佻底下的软弱，提高了嗓子回应，“说什么呢，怎么不要脸了，怎么乘人之危了”，撇下你，一点一点的从你身边走开，想显得不那么刻意，和他们在一边吵起架来。<br>　　漫不经心的我骑着单车在你身旁停下，在你稍微停下抽泣，抬起头注意到我的时候，对你说：“欸，要不然，我带你离开这里。”，骄傲的我听见话音，又重新注意起这边，看着你许久没有回应，害怕我因为陷入含义模糊的等待而暴露出一部分真实的我，跳上单车后座，“算了，她不去，我们去。”。我看了一眼你，又看了看后座，轻快的说了声好，踩起踏板，转眼就消失在路的尽头。<br>　　光芒万丈的你从某个高处跳下，拉起你的手，仰着下巴，对着“我”们说：“我够意思，给你看到软弱的她。你不明白我的意思，还是对我太不够意思？不管了，以后你再也看不到她了。走了，留步。”，你手拉手消失在街头。<br>　　从那个红绿灯向四周辐散，很多个我走了出来，站在阳光底下，有穿橘黄色制服、工人的我，有西装革履、写字楼白领的我，有戴金丝边眼镜、医生的我，有穿着宽松连衣裙推着婴儿车，婴儿车里躺着咬着奶嘴的我的我，有黑种人的我，有白种人的我，有正在咬着自己尾巴转圈圈的我。<br>　　这时，我翻了一个身，把所有的我从身上抖落，从我丑陋的水泥皮肤开始，自顾自的崩溃了起来。</p>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>扯谈</tag>
        <tag>梦</tag>
      </tags>
  </entry>
  <entry>
    <title>傍晚</title>
    <url>//in-the-eveing.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>初亏</p>
</blockquote>
<p>　　太阳开始慢慢下垂，偏移的光线让云朵带上了一点粉红色，今天的云并不是往常块状，或三五朵报团那种样子，而像金鱼身上的鳞衣，琐碎整齐的铺满了整片天空，也把穹顶从人的视线里拔高，天空显得空旷安静。飞机飞过，划下一道白色的粉笔线，坐在公园长椅上的老太太，抬着头，一直看着飞机的轨迹消失。<br>　　老太太在回忆往事，上了年纪以后，总是出现丢三落四的遗忘，更久以前的事情反倒在脑子里越来越清晰，所得到的情绪也比当时发生时更多更强烈。就像她今天早上刷牙忽然想起童年弄丢的洋娃娃，那种因为失去心里空荡荡的感觉因为记忆的出现，又重新布满她年迈的心，继而又想起继父对她冷淡、母亲的软弱和和许多零零碎碎的事让她给她带来的类似感觉。这些感觉是如此清晰的印在她的脑海里，像线团掉在地上没人拾起而缠成一团杂乱。<br>　　她不由得叹了一口气，年迈的身体经不起长久的沉浸在这些消极情绪里。她有些疲倦，微微的阖上了眼睛，一点点失去焦距，眼前的景色慢慢变得遥远，公园的园心湖在视线里模糊成了一块白色污渍，污渍边有一些黑点影影绰绰，他们晃呀晃，晃呀晃。</p>
<blockquote>
<p>食既</p>
</blockquote>
<p>　　“妈，你看见我上课用的画笔盒了嘛？”儿子在客厅喊她。<br>　　“没有啊，你昨天不是在卧室用了吗？”<br>　　“我又拿出来了，放鞋盒上了啊，就是怕忘记。”<br>　　“我没看见，你再找找。”<br>　　她继续给儿子打包午餐饭盒，过了一会，外面没有声音，她奇怪：“找到了画笔了嘛？我可没有动你画笔哦。”<br>　　没人回话，她从厨房出来，走到客厅，在玄关的鞋架上看到了画笔盒，不是在这嘛，真是的，这孩子。<br>　　“你画笔我给你找到了，待会记得去厨房拿一下你的午餐饭盒。”她说着话往儿子的卧室走。<br>　　还没走到，从卧室紧闭的门底下漫出了水，不，是鲜红的血，血液越来越多越来越多，多的把房间门都撑开，破涛汹涌在天花板翻了个身，朝她扑来，眼看就要把她整个淹没。。。</p>
<blockquote>
<p>食甚</p>
</blockquote>
<p>　　老太太兀的惊醒，感到背后出了一层细密的汗。身体传来的虚弱感让她对自己感到一点生气，耳边传来一阵笑声，是一个小女孩在用树枝戳水溅起水花的欢笑。那么天真那么甜美的笑声，那么快乐的小女孩，但是，她怎么可以那么快乐，快乐的不像话。<br>　　这会的太阳已经下垂到一半，天空正呈现一种最灿烂壮观的样子，云层仿佛以太阳为起点燃烧，向四周蔓延，成片成片的通红起来，作为背景的蓝天和云朵们的界限也被模糊晕开，天上再也没有一片纯粹的蓝，也没有一片纯粹的红，远处锋利的地平线把灿烂的云霞和稍显昏暗的人世间分开，但仍然有几道光线从云层里漏了出来，像光柱立体，又像纸片单薄扁平，不由分说的要把天空和大地连在一块。<br>　　老太太也有过快乐的日子，年轻时样子好看，被男人们争相追逐，而她像一个待价而沽的精明商人，矜持，吝啬着自己的温柔，冷静的看着男人们为博得自己嘴角偶尔露出的笑容而摩拳擦掌。那会可真是骄傲啊。然而事实也并非表面的样子，她并没有那么骄傲，只是童年缺爱的经历让她缺乏对人的信任感，骄傲和淡漠是为了掩饰内心的虚弱和惶恐，害怕他们看出她好看的皮囊下的浅薄无知。最后，她选择嫁给一个搞艺术的画家。因为某个瞬间的错觉，她觉得他对她不以为意的样子，并不像其他人对她怀着某种不切实际的期待，希望她是或者成为某种特定的人。这让她感到一些轻松，又有他还有一头散发艺术气质的长发。<br>　　教训很快来了。蜜月期还没过，画家旧态萌生，她在家等了一宿，他在酒吧彻夜不归。清晨的争执是以她脸上的淤青和隐忍结束的。之后的生活仿佛就因为这件事裂开了一点缝隙，露出了里面的荒诞不禁。画家开始隔三差五的在酒吧呆一晚上，带着浑身酒气回家。一开始她责备他，但回应她的都是推搡和拳头，于是她学会在他清晨回来前离开，等他身体分解完酒精，从宿醉中清醒再回来。画家喝醉的样子很糟糕，但清醒的时候，有时也会制造一些小浪漫讨她开心，比如某个早上，把她在枕头上掉的头发收集起来，在画板上用胶水，白描勾出一个她，在她做完早饭转身的时候给她看，大呼小叫，我做的，秀色可餐秀色可餐。<br>　　“他真的太会讨人开心了。”这是她那段时间经常和人说起的话，好像是在向人炫耀，但更多的像是在劝慰自己。生活在画家醉酒和清醒里慢慢向前，也随着画家醉酒的时间变长而慢慢变糟。<br>　　一天下午她体检，发现自己怀孕了，从医院回来的路上，她想，有必要和他好好谈谈了，为了孩子，如果继续这种生活的话，她就搬出去一个人住。是不是真的搬倒是其次，得先把态度摆出来。<br>　　“对不起，和我在一起很辛苦吧。我不想再那么辛苦了，对不起。”他自杀了，是在她早上出门的时候自杀的。不知道为什么，当她看见他赤裸的躺在浴缸的血泊里，她竟有种理所当然的感觉，只是想到她原来在心里排练好的和他的对抗和忍让现在都变成了一个笑话，读到他留给她的这些话时，还是情难自已的哭泣了起来，直至脱力，过了很久才打电话叫人，把他搬到医院里去。<br>　　后来她独自度过孕期，分娩，把孩子抚养成人。前不久她的孩子在上班路上，死于一场肇事逃逸。</p>
<blockquote>
<p>生光</p>
</blockquote>
<p>　　月牙在云层里露了出来，公园里的人陆陆续续的收拾东西离开，不时传来大人呼唤孩子的声音，孩子们约好明天还过来玩，依依不舍的分开。<br>　　老太太也注意到天已经黑了，那个在湖边玩水的小女孩还没走，而此时公园除了她俩再看不见其他人了，她心里忽然出现一种戏谑的恶意，她离开了长椅，朝小女孩慢慢走进。<br>　　小女孩浑然不觉，她正抓着树枝，打算用树叶的粘附性把湖水搬运到岸上，她大概是想画一幅画。但树枝上乱七八糟生长的树叶让她到现在还没确定下来到底要画什么。<br>　　老太太缓缓伸出了手，“叫你那么开心”，她手臂突然发力，小女孩来不及尖叫，身体离地，向湖面扑去。<br>　　“扑通！”</p>
<blockquote>
<p>复圆</p>
</blockquote>
<p>　　老太太没了踪影，小女孩在湖里浮沉，她放弃了挣扎，也似乎不想挣扎。她的身体浸泡在水里，像一块吸水海绵开始慢慢膨胀，头发变长在水里四散漂浮，继而又以一种可见的速度变灰，变白，皱纹像一阵涟漪，在她身上荡漾，不到一会的功夫，小女孩完全变成了老太太的模样。<br>　　老太太很平静，她没有死在生活的手里，她是被自己杀死的。<br>　　月亮高高的挂在天上，月光顺从了高楼大厦，在他们的轮廓阴影中间找到了自己的位置。有逃离一部分，在公园的树林里和一群绿色混在一起，风乍起，银色和绿色被凌乱的搅碎在风里。<br>　　老太太沉进了湖底，又好像沉进了那片穿透湖面的月光里。</p>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>短篇故事</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>死于白兰地</title>
    <url>//died-of-brandy.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="《酒徒》"><a href="#《酒徒》" class="headerlink" title="《酒徒》"></a>《酒徒》</h2><div align = right> [刘以鬯](https://www.amazon.cn/dp/B005D5YJKY/ref=cm_sw_r_qz_2_dp_2unvzb8Y953A4) </div><div align = right> 12 条标注 </div> 


<p id="div-border-left-green">　生锈的感情又逢落雨天，思想在烟圈里捉迷藏。

<p>　屋角的空间，放着一瓶忧郁和一方块空气。两杯白兰地中间，开始了藕丝的缠。时间是永远不会疲倦的，长针追求短针于无望中。幸福犹如流浪者，徘徊于方程式的“等号”后边。</p>
<p>　音符以步兵的姿态进入耳朵。固体的笑，在昨天的黄昏出现，以及现在。谎言是白色的，因为它是谎言。内在的忧郁等于脸上的喜悦。喜悦与忧郁不像是两样东西。<br>　<br>　一个不读书的人，偏说世间没有书。顽固的腐朽者，企图以无知逼使时光倒流。古代的听觉。烟囱里喷出死亡的语言。那是有毒的。风在窗外对白。月光给剑兰以慈善家的慷慨。有忧郁在玻璃缸里游来游去，朦胧中突然出现落花与流水。当我看到一片奇异的颜色时，才知道那不过是心忧。我产生了十五分之一的希望，只是未曾觉察到僧袍的泪痕。模糊。模糊中的鞭声呼呼。人以为自己最聪明，但银河里的动物早已准备地球之旅。这是时代。你不去；他就来了。</p>
<p>　(新诗人尝试给诗注射新的血液，是不应该加以阻止的，我想。至于详加注释的要求，更非必需。诗人在建造美的概念时，将自己的想象作为一种超乎情理与感受的工具。当然是未可厚非的。表现是一种创造，而诗的表现，不仅是一个概念或意境的代表，而且是一堆在内心中燃烧的火焰。因此，诗人凭借想象的指引，走入非理性境界，不能算是迷失路途。)</p>
<p>　她的眼睛，是印象派画家笔底下的杰作，用了太多危险的彩色。</p>
<p>　没有一条柏油路可以通达梦境，那只是意象的梯子。当提琴的手指夹住一个叹气时，酒涡尚未苍老。有一条黄色的鱼，在她的瞳子里游泳。</p>
<p>　眼睛是两块毛玻璃，欲望在玻璃后边蠕动。欲望似原子分裂，在无限大的空间跳扭腰舞。一只尚未透红的苹果，苦涩的酸味中含有百分之三的止渴剂。</p>
<p>　海是陷阱。海是蓝色的大缸。这时候，跳海的念头已消失，我变成风景欣赏者。生的火焰需要一把扇子。第三只眼睛曾见过剪落的发屑。打一个呵欠吧，宇宙的眼睛正在窥伺感情怎样被切成碎片。走进思想的森林，听到无声的呼唤。朋友，当你孤独时，连呼唤也是无声的。</p>
<p>　我讨厌时间，企图用餐刀切去半个白昼。神是那么的刻板，总不肯将夜眨幕提早扯起。</p>
<p>　这天下午，我在日记簿上写了这么一句：“从今天起戒酒。”但是，傍晚时分，我在一家餐厅喝了几杯白兰地。</p>
</p>

]]></content>
      <categories>
        <category>剪报</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>中国当代小说</tag>
      </tags>
  </entry>
  <entry>
    <title>像你我的少年们</title>
    <url>//teenages-like-you-and-me.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　看了《濑户内海》。之前一直分不清电影名字是叫濑户内海，濑内户海，还是濑海内户,电影很好看，隆重的交响乐式的配乐也非常好，一个半小时完全不过瘾。主演们都不是很好看的人，对内海的第一印象甚至觉得他像个中年大叔，但十分意外，他们都给人感觉少年气十足。</p>
<p>　　电影百分之九十的时间都停在一个画面，都只是两个人的对话，但一点都不让人乏味，就像是看过去自己的日常，他们关心的事和谈论的问题，也都是过去学生时代和同学会谈论的内容，很有亲切感。印象深刻的一个情节是，濑户喜欢的女生喜欢内海，但内海并没有表现出喜欢她的样子，在影片快要结束的时候，那个女生在好像受到内海间接的拒绝的时候，发了一条短信给濑户，内海他讨厌我。濑户第一反应是敲出了“但我喜欢你啊”这几个字，虽然他是没有心机的下意识行为，但这种在女孩子失落的时候的表白，比任何形式的安慰都好，哪怕仍然是被拒绝，也会给自己加很多印象分，对增进关系有极大好处。</p>
<p>　　此时画面一转，那个女孩和内海对峙的镜头。女孩收到了濑户的短信，里面写的是，<br><img data-src="https://s2.loli.net/2022/04/14/sfI2mn9iOaBbUWQ.jpg"></p>
<p>　　放在古惑仔电影里，这大概就是他们口里的义气吧。不过这种挣扎之后的温柔，显得更加深沉和真挚一些。同时也让我因为刚才十足理智的分析而感到一些脸红，这大概就是，小孩子才分对错，成年人只看利弊吧。</p>
<p>　　后来又想，喜欢这类电影的都会是什么年龄段的人？我想可能成年人会更多一点。如果是在电影里那个年龄，十七八岁的少年大概是看不下去这类亢长没有休止的对话，因为拥有那样的对话，和用那种对话打发时间本就是他们的日常，比起在大荧幕看自己平常的生活，他们应该更喜欢看到超级英雄，爆炸和拯救的画面吧。我忽然想到高三有一阵子，夏天晚上熄灯后和同学在阳台上对着一排排寝室楼长叹，人生真是寂寞如雪啊。现在想起来，那时候的心情也不是真的因为寂寞，倒有些像濑户和内海坐在石阶上面对着河流打发时间的心情,对着成排熄了灯，因为月光辉映而在黑暗里露出模糊轮廓的宿舍楼，总是想抒发一些无所事事的感慨。如果不是寂寞如雪这个词感觉厉害一点，换成谁知盘中餐，粒粒皆辛苦啊。其实也可以。</p>
<p>　　看豆瓣的一条短评不禁会心一笑：男孩子们都是傻逼。</p>
<p>　　有可能的话，希望出走半生，归来仍是傻逼。</p>
]]></content>
      <categories>
        <category>旁白</category>
      </categories>
      <tags>
        <tag>随感</tag>
      </tags>
  </entry>
  <entry>
    <title>进化</title>
    <url>//evolution.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　他看见了未来。准确的说，应该是感觉到了未来，不知从何时起，这项能力，就像味觉、嗅觉和视觉，一种单独存在的感觉，忽然在他身体里出现了。总是在一个恍惚间，他的脑子里便塞满了许多来自未来的碎片，是许多事物的印象堆积而成的碎片。某条大街上太阳直射在柏油路上的扭曲光线，咖啡店陌生女性清脆的笑声，飘忽不定的云朵，轻盈的风，斑斓的色彩，隔壁明天饭菜里的一道糖醋鲤鱼的醉人香味。有时他会沉浸在这些碎片里，就像发呆，忘记时间，甚至因此还耽误过一两件正经事。</p>
<blockquote>
<p>一</p>
</blockquote>
<p>　　又是一个恍惚，未来出现了。<br>　　这次的碎片里，一个意味着难过的印象吸引了他的注意，他苦追未果的女孩明天会被车撞飞落在地上。<br>　　他决定用自己的能力做点什么。他给女孩打电话表白。<br>　　“欸，我那么喜欢你，你确定不喜欢我一下吗？”<br>　　女孩想了想，“嗯，暂时确定。”<br>　　“那你可别后悔哦。”，他轻快的挂了电话，说了一句让女孩摸不着脑袋的话。</p>
<p>　　女孩猝手不及。一阵急促而响亮的鸣笛声，她没注意到的拐弯处，正冲过来了一辆蓝色卡车。卡车在视野里不断放大，她的身体因为恐惧而有些脱力，脑子一片空白但又极其无厘头的冒出一个念头：原来偶像剧她们站着不动被车撞不是因为傻是真的会被吓得动不了。她以为她就要死了。这时旁边出现冲过来一个身影，推开了她。我喜欢你。这句话不知怎么的，在所有其他想法还没来得及出现，就在了她的脑海响了起来。<br>　　他看到了她眼里的惊慌，错愕，恍然，歉意和愧疚。那个瞬间，他感到一阵报复性的快感和一种自我牺牲式的、伟大的陶醉感。他有些眩晕，可能是因为自我陶醉，也可能是因为他被撞飞在半空还没落地。嘭，重重的一声。他满意的合上了双眼，显然他的这次付出生命的表演圆满完成了。</p>
<blockquote>
<p>二</p>
</blockquote>
<p>　　我竟然打算用生命来让她在后半生不断责备自己。他从那个仿佛释怀的印象里看到了未来，并对未来的自己不满意。像个懦夫，一个假装勇士的懦夫，看似无私的举动，实际隐藏着一个极度自私的自我 —— 一个人要对自恋到什么程度才会把自己当做筹码来试图赢得对方。他甚至感觉有些害怕。他陷入一种极端后，竟然是如此可怕的样子。<br>　　但他还是打算救下那个女孩。</p>
<p>　　女孩猝手不及。她被拦住了，在一个拐弯处，对方把她逼靠在一面墙上，他抬起了手放在了她脑袋右侧。她终于知道他要干嘛了，她平静了下来，把脸摆出一副看好戏的表情，看着他慢慢靠近。在他们鼻尖还有两公分的距离时，她开口了，欸，你不会以为靠强吻就会让我喜欢你吧。他有些尴尬，他甚至想到过亲了她以后被扇一巴掌，但没想过她会直接戳穿他的小心思。不试试怎么知道。他回了一句，有些破罐子破摔，反正他主要目的本也不是这个，试图通过强吻让她喜欢上他只是附带的。他心安理得的继续缩短他们俩之间的距离。女孩扭头朝向一边，你这样只会让我讨厌你。他感到一阵难过，更多的是一种无法抵抗的委屈，这让他泄了气。他放下了支撑在墙上的手臂，轻轻的笑了一下，也不知道他是在笑自己，还是在笑她。<br>　　他转身打算离开，卡车刚刚过去，他还是没忍住为自己抱不平，背对着她拉长声音说，三条腿的蛤蟆没见过，两条腿的女人到处都是。其实他本可以解释清楚，他是为了救她。或者忍住最后一句话不说，等这件事过去了，有的是来日方长。但说了这句话以后便意味着他俩再也没有可能。抛开他能看见未来这事，他也始终只是一个有着些许脆弱的骄傲，容易陷入极端的凡人。</p>
<blockquote>
<p>三</p>
</blockquote>
<p>　　我不该装成一个无赖，把事情弄成这样。他冷静了下来，觉得明天去救她这件事应该好好磋磨。未来给他显示的两次失败，归根结底是因为他并不只是纯粹的去救人，他想通过救人这件事来达成自己的目的。想得到的太多，所以总是弄巧成拙。既然不能让她喜欢我，那最好也不要让她讨厌我。他降低了自己对这次救人行动结果的期待，感觉无比轻松，大概他天生就不适合做那种野心勃勃的阴谋家吧。</p>
<p>　　在女孩正在拐弯的时候，他叫住了她，诶，小心。她回头看他，小心什么？他没回答，女孩看了一会他不说话，正打算扭头继续拐弯。他指了指路口，一辆卡车近乎贴着女孩的身体经过。她有点脸色发白，他调皮的笑了一下，小心这个。她虽然有些奇怪他怎么知道这辆车子会经过，但转瞬就觉得被戏弄，有些生气，盯了他半天，她说，你是不是跟踪我？<br>　　没有，我也是刚好经过这里。<br>　　那你怎么知道这里会有辆车子经过的？她终于回过神来，问了这个问题。<br>　　刚才听见喇叭声了，看你还继续往前走，就猜你可能没有听到，就叫你小心一点。他反应相当快。<br>　　不可能，我比你离得近，我怎么可能没听到喇叭声，而且我刚才又没戴耳机听歌。你换个理由好不好，这个理由太蹩脚了。其实她刚才也没注意有没有喇叭声，只是想到刚才他笑的一下觉得不爽。<br>　　是真的，有喇叭声，欸，对了，你要去哪，有没有空啊，我请你喝奶茶。要不然去看电影也行。或者一起吃晚饭？<br>　　其实现在连中午都还没到。<br>　　她想了想，又看了他一眼，那我们一起吃午饭吧。<br>　　他本来只是想转移话题，现在又有些无心插柳的惊喜，那你想吃什么？西餐，中餐，烧烤，火锅，披萨，牛排？我知道附近新开了一家印度菜，要不要一起去试试？<br>　　都可以。不过你要告诉我刚才是怎么回事，不然我就不和你一起吃午饭了。她自己也没注意，她的语气好像有一点在撒娇。<br>　　我。。。能看见未来。</p>
<p>　　后来，他们一起去吃了午饭，女孩对他能看见未来这事十分感兴趣，慢慢的变成了对他十分感兴趣，幸运的是，他也不是一个让人感到乏味的人，他们又一起吃了很多顿饭，午饭，晚饭，然后是早饭。他们用他看见未来的超能力买了彩票，中了大奖，做生意，做慈善，生了一男一女。他比她先去世两天。就这样，他们过完了幸福的一生。</p>
<blockquote>
<p>四</p>
</blockquote>
<p>　　他从未来里醒了过来，仿佛做了一场美梦。他恨不得现在就是明天，恨不得立马就到那个拐弯处等她来，恨不得那辆卡车现在就直冲冲撞过来。他在家里，一遍又一遍排练——指向拐弯处的动作，轻笑的用力程度，邀请吃饭的语气。<br>　　而当他真正站在拐弯处等了两个小时也没等到她来的时候，他满腹对幸福的期望变成了一个没有期限的苦闷等待后，他只剩下了许多疑问，难道我看到的未来不准确，难道我不小心做了什么已经改变了未来？<br>　　直到他好像意识到了什么，起先是恐惧，他开始不断摇头否定自己，在那个拐角处不断来回走动，到后面开始喃喃自语，不会的不可能的一定是今天，一定是今天，会不会是明天，不，不，一定是今天。他像着了魔似得一遍又一遍的重复着这些动作。直到两个路人经过。<br>　　诶，这条路修个围墙挡着真不方便，不说车子容易挂了蹭了，人也很危险呐。<br>　　谁说不是呢，昨天这就撞死个小姑娘。诶，小兄弟，你这来回走的，可要注意啊。<br>　　他“啊”的一声跑开了。他不相信，在他沉浸在接收未来的印象的这段时间里，他所看见的未来已经在他的世界发生了。他不相信，所有的未来都以他看见的第一种未来的样子发生，他所参与的三个片段，好像真的只是一场梦境。但这并不是未来不可改变，而是他的能力给他带来的副作用，本来他是有机会去改变一些事情，而现在说什么都晚了。他心灰意冷，他还在奔跑着，他一头撞向了一辆卡车。</p>
<blockquote>
<p>终</p>
</blockquote>
<p>　　原来连他自杀都是未来的一个片段。那现在是什么时候呢？第五天晚上。她已经死了那么久了啊。当他从已经从未来得知到这一切的发生以后，情绪反倒没那么激烈了，况且他也都在他的那些印象里死过一次了。他的趣味变得寡淡，对任何事都泛不起兴趣，自我了结也只是一件费力的乏味的事。忽然想吃素了。不好，吃素也不好，也无聊。他又把注意力投进那些数不清的碎片里。这次他纯粹是一个旁观者。<br>　　而他没注意到的是，在他专心致志的预见未来的时候，他的身体正在变透明，不是消失，也不是隐藏，而像是溶化，像一种液体被溶化进另一种液体，他的颜色，他的形状，他的细枝末节，他被他的“四周”吃掉了。<br>　　不，其实是，他进化成了四维生物。</p>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>短篇故事</tag>
        <tag>科幻</tag>
        <tag>幻想</tag>
      </tags>
  </entry>
  <entry>
    <title>七月末</title>
    <url>//end-of-july.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　这个月过的很快，以至于是收到某网站会员即将到期的邮件,他才发现已经到月底了。</p>
<p>　　其实这个月和以往的任何一个月也没多大差别，他想记录的原因在敲下第一个字母的时候就忘记了，不过既然已经开始，也就无所谓为什么开始为什么结束了。</p>
<p>　　最近他的双手非常不舒服，究其原因，其实也大半是他自食其果——他总是强迫症似的洗手，一开始是因为感觉手上有污垢，后来可能是因为频繁的洗手，手掌变得敏感，开始容易出汗，他又总是因为出汗去洗手。手出汗而频繁洗手；频繁洗手，手敏感出汗。这似乎是一个糟糕的循环，他当然知道，如果要跳出一个循环，只要设定适当的判断，条件达到的时候，循环就可以结束。比如他可以设定当频繁洗手会造成手掌敏感的时候，就停止出汗就洗手的条件跳转，或者当手有污垢的时候并不去洗手，直到手不敏感才允许频繁洗手的循环判断。但即使有正确答案，心里上的坎仍旧是最难跨过的，他实在难以违背自己。在最近的一次洗手，他忽然觉得，其实有些人的生活变得越来越糟糕，犹如陷入了一个坏的循环，大概也是有着无可避免的原因的。</p>
<p>　　他这个月只去了一次图书馆，在月底看完了《檀香刑》和《赡养人类》。他有很好的读书计划，但没有很好的执行力，一如其他许多很好的计划，总是不能圆满完成。要是腹死胎中反倒没什么遗憾了，像这样缺胳膊少腿，总是没有囫囵模样。他觉得更加遗憾，之前应该是可以挤出一点时间来看看书，写写东西的。但这个遗憾和其他遗憾一样，只是在某个空闲的时候事情在脑子里闪现，对他深刻的影响还没出现，转眼又比夏天云朵底下的阴影更快的散去。</p>
<p>　　说起躲在夏天飘忽无常的云朵底下躲避太阳直射，他更喜欢靠近善意的陌生人遮阳伞的影子。他想起那天去图书馆的时候，他就呆在一个要去跆拳道练习的小男孩的伞底下。大概是那天他心情愉快，所以他说了很多话，自来熟似得打了招呼，然后喋喋不休的询问，“你是去练跆拳道吗？”“你去哪里练啊”“你跆拳道厉不厉害”。男孩把伞给了他，走到另一边，离他远远的。他有些不明所以，“我。。。你这。。。我一会就坐公交走了，我不要伞，还给你，真的还给你。拿着，你拿着啊，我不要伞。”，稀里糊涂的一通交流后，他才知道，原来是他自以为是的热情吓到男孩了，“你是坏人怎么办？”，这句话问得他无言以对，甚至有些生气，他觉得他的五官虽然算不上英俊潇洒，但离獐头鼠目贼眉鼠眼这些结构应该还是有十万八千里。“我不是坏人。”他无力的抵抗了一句，之后他们陷入一段漫长的沉默。<br>　　<br>　　男孩先开了口：<br>　　你去哪里啊？<br>　　我去找朋友玩。<br>　　嗯，你会玩游戏吗？<br>　　会啊。<br>　　你会玩王者荣耀吗？<br>　　会啊，但不经常玩，我觉得太简单了。<br>　　那你会玩球球大作战吗？<br>　　嗯，好久不玩了吧，这个游戏你们现在还玩吗?我以前玩。<br>　　我们班上好多人玩，你王者荣耀有什么英雄？<br>　　不知道，我没买英雄，都是系统送的，还有一些体验卡兑换的英雄，曹操狄仁杰什么的。我比较擅长玩狄仁杰和后羿，远程，adc，对操作要求高一点，会有意思一点。</p>
<p>　　男孩点了点头，露出把伞递给他后跑到角落里的那种木讷。他上了公交之后，在车上向男孩挥了挥手，轻松的告了别。<br>　　这件事让他在整个七月都有些念念不忘。这件事似乎说明了一点，尽管他是个理科生，但对距离感的精确把握似乎始终只局限在一条线上点A到点B的长度，并没有扩及对人与人之间的相处距离，甚至是一个男人跟一个女人之间身体和精神上的距离。想到以前很多事都以遗憾结果，归根结底，也大半是这个原因。但关于这些距离感，即没有标准答案可以参考，也没有人手把手言传身教，所以想起来还是相当的麻烦。</p>
<p>　　和以往的夏天比较，这是一个胖了很多的夏天，在他身上具体表现为，行动迟缓，容易出汗和嗜睡。在没有空调的室内，他总是胸闷气短，总是恍惚觉得自己是不是阑尾炎了。一天比一天疲倦，哪怕晚上睡的再早，早上起来，他也是一脸的没有睡好。一次做梦梦见，他睡觉的时间变得越来越长，从八小时到十二个小时，从一整天到一整个礼拜，一个月，一整年，最后是一个有始无终的漫长睡眠。虽然最后是冒着冷汗吓醒了，但他挺喜欢这个梦的。不过说起来，无论美梦噩梦似乎也没有招他讨厌的，毕竟是自己的孩子，多丑都喜欢。</p>
<p>　　他忽然想到，为什么要用第三人称啊？他在盒子里抬头看着自己——“他”，想问“他”，诶，你为什么不用第一人称写自己的事。但他看到的是，“他”也在抬着头，在看着“他”的““他””。再往上，是无数个他和无数个包裹着他的双引号。好吧，虽然他是被创造的他，但他也是创造者的他自己，即，他是“他”，也是““他””，也是无数个双引号以后的他。他和“他们”一样，他理当知道答案。</p>
<p>　　表述自己变成了一件十分困难的事，当用上“我”，所有事情的描述都变得不诚恳了起来，总是为自己辩解许多，总是质疑，却没有回答，呆在放手不顾的状态里心安理得。用上第三人称，仿佛可以让他从一个讨人厌、琐碎、平凡的自我里抽离，没有了自己，只剩下一个客体，一个纯粹的旁观者、记录者。</p>
<p>　　“你真是幼稚极了。”，他对‘他’说了一句客观的结语。</p>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>扯淡</tag>
        <tag>随笔</tag>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS开发里的那些散手（一）</title>
    <url>//ios-develop-tips-1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="解决低版本Xcode不支持高版本iOS真机调试问题"><a href="#解决低版本Xcode不支持高版本iOS真机调试问题" class="headerlink" title="解决低版本Xcode不支持高版本iOS真机调试问题"></a>解决低版本Xcode不支持高版本iOS真机调试问题</h2><p>在真机运行程序后输出如下错误</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">The version of iOS on “xxx xxx” does not match any of the versions of iOS supported <span class="keyword">for</span> development with <span class="variable language_">this</span> installation of the iOS SDK. Please restore the device to a version of the iOS listed below, or update to the latest version of the iOS.</span><br></pre></td></tr></table></figure>
<p>主要原因是在调试前我将iOS SDK升级到了9.3版本，而我的Xcode是7.3版本的，只支持到9.2的SDK。<br>其实每次iOS SDK版本升级都会遇到相同的问题，之前有在网上找过，除了重新安装Xcode外就是下载新的Xcode将里面的SDK复制到旧的Xcode中。<br>由于之前我是黑苹果，不能升级系统以更新<code>Xcode</code>到最新版，所以只能谷歌一下自己DIY了。</p>
<p>解决方法：<br>这里只以我的开发环境为参照，具体修改还要参照个人开发环境，基本步骤有三步</p>
<p>1、复制一份旧的<code>SDK</code>，并重新命名为真机测试需要的<code>SDK</code>版本；<br>找到路径:<code>/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.2.sdk</code>（提示：<code>Xcode7.3</code>的<code>iOS SDK</code>信息会保存在xcode.app中，要查找请右键点击xcode.app－&gt;显示包内容，其他xcode版本的iOS SDK有的保存在系统根目录下）<br>复制一份<code>iPhoneOS9.2.sdk</code>，并命名为<code>iPhoneOS9.3.sdk</code></p>
<p>2、修改<br>打开路径:<code>/Developer/Platforms/iPhoneOS.platform/DeviceSupport</code>找到：9.2(10A403) (这个是我的xcode中<code>SDK</code>的最高版本，如果没有这个也可以选择其他的)复制一份，并创新命名为真机需要的版本9.3(10B114)</p>
<p>3、修改SDKSettings.plist文件中的版本号<br>打开路径:<code>9.3(10B114)/Symbols/SDKSettings.plist</code><br>将里面所有跟版本有关的数字都修改为9.3</p>
<p>4、真机运行，成功。</p>
<h2 id="调试用-宏定义NSLog"><a href="#调试用-宏定义NSLog" class="headerlink" title="调试用 宏定义NSLog"></a>调试用 宏定义NSLog</h2><p>在类文件头部添加</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NSLog(...) printf(<span class="string">&quot;%f %s\n&quot;</span>,[[NSDate date]timeIntervalSince1970],[[NSString stringWithFormat:__VA_ARGS__]UTF8String]);</span></span><br></pre></td></tr></table></figure>

<h2 id="定义UIButton某个角圆角"><a href="#定义UIButton某个角圆角" class="headerlink" title="定义UIButton某个角圆角"></a>定义UIButton某个角圆角</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIBezierPath</span> *maskPath = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:btn.bounds      byRoundingCorners:<span class="built_in">UIRectCornerTopLeft</span> | <span class="built_in">UIRectCornerTopRight</span>    cornerRadii:<span class="built_in">CGSizeMake</span>(<span class="number">10</span>, <span class="number">10</span>)];</span><br><span class="line">        <span class="built_in">CAShapeLayer</span> *maskLayer = [[<span class="built_in">CAShapeLayer</span> alloc] init];</span><br><span class="line">        maskLayer.frame = btn.bounds;</span><br><span class="line">        maskLayer.path = maskPath.CGPath;</span><br><span class="line">        btn.layer.mask = maskLayer;</span><br></pre></td></tr></table></figure>

<h2 id="设置导航栏透明"><a href="#设置导航栏透明" class="headerlink" title="设置导航栏透明"></a>设置导航栏透明</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[[[<span class="keyword">self</span>.navigationController.navigationBar subviews] objectAtIndex:<span class="number">0</span>] setAlpha:<span class="number">0</span>];</span><br></pre></td></tr></table></figure>
<h2 id="设置Button图片文字垂直"><a href="#设置Button图片文字垂直" class="headerlink" title="设置Button图片文字垂直"></a>设置Button图片文字垂直</h2><p>首先需要设置<code>UIButton</code>的<code>Image</code>（注意，不是<code>BackgroundImage</code>）和<code>Title</code>，然后再引用这个方法</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">-(<span class="type">void</span>)setButtonContentCenter:(<span class="built_in">UIButton</span> *) btn</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CGSize</span> imgViewSize,titleSize,btnSize;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIEdgeInsets</span> imageViewEdge,titleEdge;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CGFloat</span> heightSpace = <span class="number">10.0</span>f;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置按钮内边距</span></span><br><span class="line"></span><br><span class="line">    imgViewSize = btn.imageView.bounds.size;</span><br><span class="line"></span><br><span class="line">    titleSize = btn.titleLabel.bounds.size;</span><br><span class="line"></span><br><span class="line">    btnSize = btn.bounds.size;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    imageViewEdge = <span class="built_in">UIEdgeInsetsMake</span>(heightSpace,<span class="number">0.0</span>, btnSize.height -imgViewSize.height - heightSpace, - titleSize.width);</span><br><span class="line"></span><br><span class="line">    [btn setImageEdgeInsets:imageViewEdge];</span><br><span class="line"></span><br><span class="line">    titleEdge = <span class="built_in">UIEdgeInsetsMake</span>(imgViewSize.height +heightSpace, - imgViewSize.width, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line"></span><br><span class="line">    [btn setTitleEdgeInsets:titleEdge];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="判断软件是不是第一次启动"><a href="#判断软件是不是第一次启动" class="headerlink" title="判断软件是不是第一次启动"></a>判断软件是不是第一次启动</h2><p>原理是用<code>NSUserDefaults</code>在本地产生一个值，第二次启动的时候判断是否存在，存在即不是第一次打开，反之就是第一次打开。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.window = [[<span class="built_in">UIWindow</span> alloc]initWithFrame:[[<span class="built_in">UIScreen</span> mainScreen]bounds]];</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (![[<span class="built_in">NSUserDefaults</span> standardUserDefaults]boolForKey:<span class="string">@&quot;firstLaunch&quot;</span>]) &#123;</span><br><span class="line">       [[<span class="built_in">NSUserDefaults</span> standardUserDefaults]setBool:<span class="literal">YES</span> forKey:<span class="string">@&quot;firstLaunch&quot;</span>];</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@&quot;第一次启动&quot;</span>);</span><br><span class="line">       UserGuideViewController *UGC =[[UserGuideViewController alloc]init];</span><br><span class="line">       <span class="built_in">UINavigationController</span> *NC = [[<span class="built_in">UINavigationController</span> alloc]initWithRootViewController:UGC];</span><br><span class="line">       <span class="keyword">self</span>.window.rootViewController = NC;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@&quot;这不是第一次启动&quot;</span>);</span><br><span class="line">       ViewController *VC = [[ViewController alloc]init];</span><br><span class="line">       <span class="built_in">UINavigationController</span> *NC = [[<span class="built_in">UINavigationController</span> alloc]initWithRootViewController:VC];</span><br><span class="line">       <span class="keyword">self</span>.window.rootViewController = NC;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>iOS</tag>
        <tag>OC</tag>
      </tags>
  </entry>
  <entry>
    <title>无理猜想</title>
    <url>//unreasonable-guess.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">做了一个所有人脑袋掉光光的梦
</blockquote>

<p>　　我想描述一个梦，一个所有人脑袋掉光光的梦。我对世界没有怨气，我并不是怀着一种让所有人脑袋掉光光的企图做了这个梦，而是梦见人们脑袋掉光光后而产生了一种观察者的企图。<br>　　梦的开始，他们失去脑袋的身体转向你，“空白”向你望了过来。交流，当视线、言语不仅只是在空处交汇，也从他们脖子以上的“虚无”诞生，消失。<br>　　所有失去脑袋的人们走上大街，像往常一样，散步，在某处依靠，交谈，个体特征被弱化后的交谈，态度不具体，模棱两可的交谈，因为无意义而变得有意义，因为琢磨不透而像一声来自更高等级生命体的叹息。<br>　　当然，他们可能不是这样交谈。<br>　　当一个有头颅的闭合体变成一个失去头颅的容器。他们像乐器一样，震动自己身体，让身体里的空气发出声音。声波，人们开始向动物学习，用身体交换信息。信息经过了内脏，血液，骨骼，所以当一个人向你问好时，你也可以同时知道，他午饭吃的是什么，他早上有没有大便，他是个身体不错的男人，他想和你睡觉。<br>　　迪斯科开始变成一个语种，那些无人问津的舞步变成了濒危语种，需要保护。演说家、政治家都换成了身体柔韧的女孩们，原来位置上的男人们，悄无声息的离开，选择在高处一跃而下。因为失去了政治。也因为大腹便便，身体迟缓再也不能夸夸其谈，没有什么事比一个雄性动物不能卖弄自己更加残忍。<br>　　失去脑袋，人们为了看起来像从前一样，没有变化，大费周章的保持交流和表达自己，一刻不停的手舞足蹈。甚至是夜晚，为了梦话呓语，人们往往会在床上自顾自的来上一段没有伴奏的华尔兹。<br>　　有那么一瞬间，小数点无数个零以后的“1”秒钟，人们震动的频率一致了。地球也震动了一下，像童话里公主床垫下的豌豆，轻微的，他也发出了一条信息：“42”。一个孤零零的数字，二进制写作101010，一个预示生命终极意义的答案。他在向谁说话，谁又能回复他，那又是在多少光年外的事？<br>　　等等，我们先回来，从梦里跳出来，不再局限于脑袋。<br>　　失去皮肤。人们一刻都忍受不了呆在太阳底下和接收紫外线，为了方便，他们选择在夜晚工作和学习。滥用灯光和抗生素，城市清洁变成人们维持生命第一要务。他们很少做爱——除了性瘾患者，没有皮肤的保护，拥抱不亚于一场酷刑。失去韧带。人们运动再也没有了缓冲物，每迈出一步都是一次自我较量，骨头失去连接物，人们的身体松散，瑜伽失去意义，老年人的业余活动变成了，这块骨头之前是放在哪的。恋人们表心迹的情话：把你我揉碎，塑一个你塑一个我。变成热恋昏了头脑的青年们证明自己的疯狂行径，他们拆散自己，把碎片放进恋人的身体里。<br>　　一件件难以置信的事发生，存在，到被人熟视无睹。一如一个故事里男主角示爱独眼女主角的言语：爱上她，我就觉世上所有人都多了一只眼睛。一开始的设定是人们没有脑袋，他们接受了设定后，反而开始思考为什么有的脖子上会长着如此沉重笨拙的圆形肉瘤。<br>　　再往外想想，甚至不再局限于失去。翅膀，人们得到翅膀，大量的短途交通工具被废弃，宗教神祇们不再以带翅膀的面容出现，为了区别于凡人，他们没有翅膀——神怎么可能有翅膀呢，凡人才有翅膀。绝望的人们，效仿希腊神话里的伊卡洛斯，不断升高，了结自己——没有任何一种自杀方式能比奔向太阳更浪漫更壮烈了。虽然很多人还没到达外气层，就因缺氧和脱水死去，像流星坠落，身体分崩离析，一部分一部分的燃烧掉——结果，更浪漫了。<br>　　当一个又一个属性从人们身体打散，抽离，增添，被重新编辑。一步步，丧失作为“人”的特征，变成“不可名状”，又重新被命名为“人”，此时的人和彼时的人，差别仅仅只是表象，还是会因为容器的变化，被盛放的事物也发生变化，灵魂是先天就被决定好了，还是后天经历所造就的状态。<br>　　我忽然有个疑问，人类现在的样子是生物进化自我选择的最好结果，还是某个高高在上的造物者堆叠灵感的游戏之作。人类为什么总是满足于自己现在的这个样子？尽管我有两个长着触角的脑袋，但仍旧想不出答案。<br>　　嗯！？两个脑袋？触角？<br>　　八点的闹钟响了起来。</p>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>扯谈</tag>
        <tag>梦</tag>
      </tags>
  </entry>
  <entry>
    <title>当大侠要先说好俏皮话</title>
    <url>//learn-humor-before-become-a-hero.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="《有匪》"><a href="#《有匪》" class="headerlink" title="《有匪》"></a>《有匪》</h2><div align = right> [priest](https://www.amazon.cn/dp/B01LYCO7KX/ref=cm_sw_r_qz_2_dp_2unvzb8Y953A4) </div><div align = right> 14 条标注 </div> 

<p id="div-border-left-green">　终于有一天，你会跨过静谧无声的洗墨江，离开群山环抱的旧桃源，来到无边阴霾的夜空之下。你会目睹无数不可攀爬之山相继倾覆，不可逾越之海干涸成田。你要记得，你的命运悬在刀尖上，而刀尖必须得永远向前。

<p>　那天，四十八寨满山苍翠欲滴，碧涛如海，微风扫过时簌簌而鸣，煞是幽静。</p>
<p>　倘若倒霉也能论资排辈，谢允觉得自己这运气大概是能“连中三元”的水平。</p>
<p>　真是世间多遗恨——海棠无香、蔷薇多刺、美人是个大土匪！这姑娘要是个哑巴该有多好！</p>
<p>　这样的大英雄，趴在野地里哭得爬不起来，就像你这样漂亮的小姑娘有一天年华不再，苍颜白发一样让人难过，我既然碰见了，合该要管一管的。</p>
<p>　你有三尺青锋之利，我有三寸长舌之绝，天衣无缝，合作无间。</p>
<p>　谢允叹道：“像我这样身长七尺、五尺半都是腿的世间奇男子，居然也能碰上半个知己，幸哉！”这自我描述很是特立独行，听着像只大刀螂。</p>
<p>　有时候他甚至觉得，能看见她无声地露出一点有些吝啬的笑意，替她做什么都无所谓，反正他有用不完的温柔，耗不尽的风流。</p>
<p>　李妍从小受宠，基本没什么挨揍的经验，不料攒到了十四五岁大，胡了一把大的，</p>
<p>　少问，少说，少解释。要用板上钉钉一样的力度，只有你自己对自己的话先深信不疑，才能打动别人。拿下最开始的态度后，不要一味步步紧逼，要张弛有度。接下来，所有人都各司其职，团结一致，也就不必啃声了。</p>
<p>　这人命啊，比粟贱，比米贱，比布帛贱，比车马贱。唯独比情义贵一点，也算可喜可贺。</p>
<p>　说说英雄也就算了 ，还讲”逃兵”，周翡一脸无聊地用鞋底磨着木桌的一角，问道：”逃兵有什么好讲的？”<br>　谢允头也不抬地飞快地写了几行学，漫不经心地回道：”英雄又有什么好讲的？ 一个人倘若变成了举世闻名的大英雄，他身上一定已经有一部分不再是人了 ， 人人都蒙着眼，一知半解地称颂，却谁也不了解他，不孤独么？再者说，称颂大家都会，用的词自古以来就那么几句，早都被车轱辘千百遍了，写来没意思，茶余饭后，不如聊聊贪生怕死的故事。”</p>
<p>　“零落成泥碾作尘，是没有遗香的。”等那两人离开，吴楚楚忽然低声道。<br>　周翡一愣，低头看着她。<br>　吴楚楚道：“我娘以前跟我说过，生民都在泥水里，每日受苦楚不得解脱，最爱听的，不过就是‘清者不清，烈女偷情，圣人藏污，贤良纳垢’，诸如此类，百听不厌，反复咀嚼也津津有味，哪里容得下‘高洁’二字？”</p>
<p>　漏出的月光怕是装不了半碗，往洗墨江上一洒，碎金似得，转瞬便浮沉而去。</p>
</p>
]]></content>
      <categories>
        <category>剪报</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>武侠小说</tag>
      </tags>
  </entry>
  <entry>
    <title>我的政治态度和我谈论政治的态度</title>
    <url>//political-attitudes-and-attitudes-towards-politics.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><em>本来想的题目是《那些讨论政治的男人们》，从看到的茶余饭后把政治话题当谈资的中年男人们切入，然后从他们里面挑一个开口伊拉克闭口叙利亚的个例分析他们的政治态度。最后说说我对政治和对谈论政治的态度。但觉得这样有主观引导的倾向，不好。所以只单说我自己的想法。</em></p>
<p>　　最近因为社会上发生了一些事情，所以很多门户网站的网友都在说言论自由。B站下线了许多国外电视剧和李银河老师谈论言论自由的微博被新浪删了。我也切实感受到了一点窒息感。<br>　　一个朋友总是和我谈论政治，因为最近发生的事昨天又和我谈论起了，说微博上终于不再是哈哈韩寒韩厚华的气氛，群众终于有点变化了，开始说一些严肃的事了，哪怕过一阵子这事过去了，这阵子也会在他们心里埋下了一个种子。我说群众其实没有变，这阵子追逐言论自由的热点，和之前追逐娱乐花边的热点没什么不一样的。庸众还是庸众，真正保持思考的人也还是在冷静思考。<br>　　一棒子可能会误伤一些人，但，确实是我想说的意思。人云亦云以及脑袋发热什么都不知道就要冲进战场的人太多了。虽然这事可能不需要所有人都看明白，只要跟着一个看明白的人做和他一样的事就可能成功。但我没有跟牌的原因是，并没有一个明白人站出来做一些实际行之有效的事，多数人都只是站在岸上说一些煽动性但实际无关其本身痛痒的话。更恶劣的，有的人只是为了卖弄自己见识和华丽辞藻而去谈论言论自由这件事，以及政治。<br>　　另外，我觉得许多人可能高估了舆论的力量，很近的例子，某明星妻子出轨经纪人，舆论热度连国外媒体都报道了，但是舆论，除了产生一些数据以外，离婚案本身财产归属什么的，一点也帮不上忙。当然，绝大部分因为我们是个以法治而不是以人治的国家——我又想起微博上有人说我国量子态律法的梗了。舆论可能没有想象中的力量大。<br>　　甚至有的人还在反复说，类似这样的话：</p>
<blockquote>
<p>起初他们追杀共产主义者，我没有说话──因为我不是共产主义者；<br>接著他们追杀犹太人，我没有说话──因为我不是犹太人；<br>后来他们追杀工会成员，我没有说话──因为我不是工会成员；<br>此后他们追杀天主教徒，我没有说话──因为我是新教教徒；<br>最后他们奔我而来，<br>却再也没有人站起来为我说话了。　</p>
</blockquote>
<p>　　内容本身没有问题，但他使用的场景应该是那种受政府压迫但民众仍旧麻木无动于衷的情况才对。然而眼下，不说实际对策，不谈问题根源，而总是制造很多情绪，煽动人民，看多了以后，我对这段话甚至都有了些反感。鲁迅先生他开口说话，说这些类似的话，是为了唤醒麻木的群众，但今时不同往日，过去发生的许多事已经足够表明，我国群众离麻木已经足够远了，甚至是敏感易怒的。<br>　　我觉得现在麻木的不是群众，而是政府。比如最近乒乓比赛我国队员退赛的事，是什么无视队员们以及声援他们的群众们的意愿？事后还施压让他们写检讨书，答案不言自明。魔幻荒诞的事当然不止这一件，言论在里面起的作用是很小的，他们可以删除，屏蔽，用其他新闻盖过。我认为，政府的麻木是大概都是因为群众总是在说，总是试图用舆论的力量颠覆他的意志，而实际去行动的很少，少之又少——前几天，七月十三号，刘晓波同志去世了。<br>　　除了觉得谈论政治对政治本身没有帮助以外，另外一个不谈论政治的原因是我觉得我本身的政治观还不成熟，左还是右，都没概念，看《狂热分子》，对一切或多或少有一些盲目性的群众运动感到吃力——政治观不成熟的情况，要在政治是非里保持立场和自我都很困难，更遑论上台说点什么，带别人的节奏。<br>　　所以我并不喜欢无意义的谈论政治。但对一切可以维护个体利益的政治行为——甚至是谈论政治，如果他可以。赞同，以及会积极参与。</p>
]]></content>
      <categories>
        <category>杂论</category>
      </categories>
      <tags>
        <tag>扯谈</tag>
        <tag>政治</tag>
      </tags>
  </entry>
  <entry>
    <title>突然的自我</title>
    <url>//sudden-self%20(KaaaaaideMacBook-Pro.local&#39;s%20conflicted%20copy%202023-01-03).html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　傍晚朋友打电话过来，叫我一起吃晚饭，我有些困说不想去，太累了。他重复，来嘛，我请客的。我笑了一下，不再坚持。骑自行车去吧，好像楼下有辆摩拜。<br> 　　路边有一个女孩，我想看清她长相，她抬头看过来，她和我对视了一会，我把目光轻巧的抽了回来。有个朋友总和我说他一个理论，他把和人对视看做一种比赛。一定不能认输，要看的对方先避开你才行。我觉得那种胜负太刻意了，有时候避开也不见得是输。<br>　　你以为我在看你吗，一点也没有。路上一辆警车把一辆巡逻摩托车撞倒了，副驾驶下来了一个人，他挺直了腰，指挥起了因为这个小车祸有点紊乱的交通。我骑车上了过河桥。<br> 　　有点挤。是因为刚刚的车祸吗？天气可真热啊。桥下的河堤有一个男人，那个河堤我之前都没有见过有人走下去。那个男人刚挂了电话，背着手看河，过了一会，在那个方寸里踱起了步，悠闲的快没了形状。那么悠闲的男人，那么平静的河流。<br>　　我下桥的时候，回头看了一眼那个男人，他已经融化在岸边，变成一滩平静的水洼。我想那么年轻就能成为自己想成为的事物可真好啊——水洼是河流的幼年。<br>　　在骑进一条窄巷前，又接到朋友电话，你还来不来啊，我们可先吃了。旁边一个小声音，都快吃完了。<br>　　那等我待会给你们上饭后甜点吧。挂了电话，车铃因为经过一个坑响了声，叮铃~铃。刚刚出来门好像只锁了一下，早上洗头发的时候好像用的是那瓶新的洗发水，旧的还有多少，丢了吧，和那瓶过期的花露水一起丢了好了。<br>　　接下来是一条窄巷，一只大熊牵着一只小熊，小熊走路的节奏是冲刺的跑一阵，再挂在大熊的手上走不动一阵。起初我不知道，以为他们是在匀速走，我贴近，想从旁边绕过去，小熊停下，我急刹车，没有绕过去。大熊说，你看你不好好走路，后边的叔叔都过不去了。我又刹了一下车。我倒像蹒跚学步的小孩了。我从旁边绕过去，歪头说，不是叔叔，是哥哥。但又全然不是因为计较年龄才说的。<br>　　夏日傍晚的小巷里，一只大熊牵着一只小熊一起愣住。谁看见，食欲都会变得旺盛起来。<br>　　差不多到了。我把单车停好。坐电梯，进了饭店，正找他们坐哪呢，天花板上传来一个声音，你怎么才来啊，我们都快吃完了。朋友喝醉了，飘在天花板上，还有一些我不认识的陌生人，也醉眼朦胧的飘在上面。我问他，他们呢，哪个房间。哝哝就那里。我牵着他散了的鞋带，带着他往里走。<br>　　诶我说，你们怎么都不照顾一下他，他都飘到大厅去了。房间里还有两个人，说请我吃饭的朋友，正准备夹菜。他喝醉了，拉不住啊。拉不住在天花板喃喃，放开我，我要去救紫霞仙子。<br>　　我们都笑了，不一会，就融化在了房间里。</p>

        <div id="aplayer-rTZfSRXG" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-rTZfSRXG"),
            narrow: false,
            autoplay: true,
            showlrc: false,
            music: {
              title: "突然的自我",
              author: "伍佰",
              url: "http://osm7cxvrb.bkt.clouddn.com/%E7%AA%81%E7%84%B6%E7%9A%84%E8%87%AA%E6%88%91%20-%20%E4%BC%8D%E4%BD%B0.mp3",
              pic: "http://osm7cxvrb.bkt.clouddn.com/music1_pic.png",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>扯谈</tag>
      </tags>
  </entry>
  <entry>
    <title>突然的自我</title>
    <url>//sudden-self.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　傍晚朋友打电话过来，叫我一起吃晚饭，我有些困说不想去，太累了。他重复，来嘛，我请客的。我笑了一下，不再坚持。骑自行车去吧，好像楼下有辆摩拜。<br> 　　路边有一个女孩，我想看清她长相，她抬头看过来，她和我对视了一会，我把目光轻巧的抽了回来。有个朋友总和我说他一个理论，他把和人对视看做一种比赛。一定不能认输，要看的对方先避开你才行。我觉得那种胜负太刻意了，有时候避开也不见得是输。<br>　　你以为我在看你吗，一点也没有。路上一辆警车把一辆巡逻摩托车撞倒了，副驾驶下来了一个人，他挺直了腰，指挥起了因为这个小车祸有点紊乱的交通。我骑车上了过河桥。<br> 　　有点挤。是因为刚刚的车祸吗？天气可真热啊。桥下的河堤有一个男人，那个河堤我之前都没有见过有人走下去。那个男人刚挂了电话，背着手看河，过了一会，在那个方寸里踱起了步，悠闲的快没了形状。那么悠闲的男人，那么平静的河流。<br>　　我下桥的时候，回头看了一眼那个男人，他已经融化在岸边，变成一滩平静的水洼。我想那么年轻就能成为自己想成为的事物可真好啊——水洼是河流的幼年。<br>　　在骑进一条窄巷前，又接到朋友电话，你还来不来啊，我们可先吃了。旁边一个小声音，都快吃完了。<br>　　那等我待会给你们上饭后甜点吧。挂了电话，车铃因为经过一个坑响了声，叮铃~铃。刚刚出来门好像只锁了一下，早上洗头发的时候好像用的是那瓶新的洗发水，旧的还有多少，丢了吧，和那瓶过期的花露水一起丢了好了。<br>　　接下来是一条窄巷，一只大熊牵着一只小熊，小熊走路的节奏是冲刺的跑一阵，再挂在大熊的手上走不动一阵。起初我不知道，以为他们是在匀速走，我贴近，想从旁边绕过去，小熊停下，我急刹车，没有绕过去。大熊说，你看你不好好走路，后边的叔叔都过不去了。我又刹了一下车。我倒像蹒跚学步的小孩了。我从旁边绕过去，歪头说，不是叔叔，是哥哥。但又全然不是因为计较年龄才说的。<br>　　夏日傍晚的小巷里，一只大熊牵着一只小熊一起呆住。谁看见，食欲都会变得旺盛起来。<br>　　差不多到了。我把单车停好。坐电梯，进了饭店，正找他们坐哪呢，天花板上传来一个声音，你怎么才来啊，我们都快吃完了。朋友喝醉了，飘在天花板上，还有一些我不认识的陌生人，也醉眼朦胧的飘在上面。我问他，他们呢，哪个房间。哝哝就那里。我牵着他散了的鞋带，带着他往里走。<br>　　诶我说，你们怎么都不照顾一下他，他都飘到大厅去了。房间里还有两个人，说请我吃饭的朋友，正准备夹菜。他喝醉了，拉不住啊。拉不住在天花板喃喃，放开我，我要去救紫霞仙子。<br>　　我们都笑了，不一会，就融化在了房间里。</p>

        <div id="aplayer-hsQdKuFh" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-hsQdKuFh"),
            narrow: false,
            autoplay: true,
            showlrc: false,
            music: {
              title: "突然的自我",
              author: "伍佰",
              url: "http://osm7cxvrb.bkt.clouddn.com/%E7%AA%81%E7%84%B6%E7%9A%84%E8%87%AA%E6%88%91%20-%20%E4%BC%8D%E4%BD%B0.mp3",
              pic: "http://osm7cxvrb.bkt.clouddn.com/music1_pic.png",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>扯谈</tag>
      </tags>
  </entry>
  <entry>
    <title>Android - 调用系统发短信功能，自定义号码和短信内容</title>
    <url>//android-call-the-system-to-send-text-messages-customize-the-number-and-text-message-content.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>  开发需用使用到系统短信功能，昨天看了下文档，弄了一下午，现在已经得到我想要的效果，做个笔记记一下。具体有两种方法，一种需要跳到系统短信界面发送，可自带号码和短信内容参数，另一种可以直接在App内发送，并返回发送状态。两种方法都写在下面。</p>
<p>  <em>无论是哪种方法，都需要申请权限，在app&#x2F;src&#x2F;main&#x2F;AndroidManifest.xml文件内添加</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.SEND_SMS&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<h2 id="跳到系统界面发送短信"><a href="#跳到系统界面发送短信" class="headerlink" title="跳到系统界面发送短信"></a>跳到系统界面发送短信</h2><h3 id="新建工具类"><a href="#新建工具类" class="headerlink" title="新建工具类"></a>新建工具类</h3><p>　　为了方便使用，我们定义一个工具类用来调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContentUtil</span> &#123;</span><br><span class="line"> </span><br><span class="line">	    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showToast</span><span class="params">(Context context, String msg)</span></span><br><span class="line">	    &#123;</span><br><span class="line">	        Toast.makeText(context, msg, Toast.LENGTH_SHORT).show();;</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	     * 调用系统界面，给指定的号码发送短信，并附带短信内容</span></span><br><span class="line"><span class="comment">	     *</span></span><br><span class="line"><span class="comment">	     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">	     * <span class="doctag">@param</span> number</span></span><br><span class="line"><span class="comment">	     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">	     */</span></span><br><span class="line">	    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendSmsWithBody</span><span class="params">(Context context, String number, String body)</span> &#123;</span><br><span class="line">	        <span class="type">Intent</span> <span class="variable">sendIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(Intent.ACTION_SENDTO);</span><br><span class="line">	        sendIntent.setData(Uri.parse(<span class="string">&quot;smsto:&quot;</span> + number));</span><br><span class="line">	        sendIntent.putExtra(<span class="string">&quot;sms_body&quot;</span>, body);</span><br><span class="line">	        context.startActivity(sendIntent);</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="xml-布局文件修改"><a href="#xml-布局文件修改" class="headerlink" title="xml 布局文件修改"></a>xml 布局文件修改</h3><p>　　这里我放了两个文本输入框，和一个发送按钮。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">\&lt;RelativeLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">	    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">	    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">	    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">	    android:paddingBottom=<span class="string">&quot;@dimen/activity_vertical_margin&quot;</span></span><br><span class="line">	    android:paddingLeft=<span class="string">&quot;@dimen/activity_horizontal_margin&quot;</span></span><br><span class="line">	    android:paddingRight=<span class="string">&quot;@dimen/activity_horizontal_margin&quot;</span></span><br><span class="line">	    android:paddingTop=<span class="string">&quot;@dimen/activity_vertical_margin&quot;</span></span><br><span class="line">	    tools:context=<span class="string">&quot;.MessageActivity&quot;</span>&gt;</span><br><span class="line">	</span><br><span class="line">	    &lt;EditText</span><br><span class="line">	        android:id=<span class="string">&quot;@+id/phonenumber_edit&quot;</span></span><br><span class="line">	        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">	        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">	        android:text=<span class="string">&quot;13879327137&quot;</span>/&gt;</span><br><span class="line">	</span><br><span class="line">	    &lt;EditText</span><br><span class="line">	        android:id=<span class="string">&quot;@+id/message_edit&quot;</span></span><br><span class="line">	        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">	        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">	        android:layout_below=<span class="string">&quot;@id/phonenumber_edit&quot;</span></span><br><span class="line">	        android:text=<span class="string">&quot;你好吗？&quot;</span>/&gt;</span><br><span class="line">	</span><br><span class="line">	    &lt;Button</span><br><span class="line">	        android:id=<span class="string">&quot;@+id/message_btn&quot;</span></span><br><span class="line">	        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">	        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">	        android:layout_below=<span class="string">&quot;@+id/message_edit&quot;</span></span><br><span class="line">	        android:text=<span class="string">&quot;发送&quot;</span>/&gt;</span><br><span class="line">	&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Activity-活动文件修改"><a href="#Activity-活动文件修改" class="headerlink" title="Activity 活动文件修改"></a>Activity 活动文件修改</h3><p>方法实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EditText phoneNumedit;</span><br><span class="line">    <span class="keyword">private</span> EditText msgEdit;</span><br><span class="line">    <span class="keyword">private</span> Button msgBtn;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_message);</span><br><span class="line"></span><br><span class="line">        phoneNumedit=(EditText) findViewById(R.id.phonenumber_edit);</span><br><span class="line">        msgEdit=(EditText) findViewById(R.id.message_edit);</span><br><span class="line">        msgBtn=(Button)findViewById(R.id.message_btn);</span><br><span class="line">        msgBtn.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (msgEdit.getText().toString() != <span class="string">&quot;&quot;</span> &amp;&amp; phoneNumedit.getText().toString() != <span class="string">&quot;&quot;</span>) <span class="comment">//判断手机号和短信内容不为空</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ContentUtil.sendSmsWithBody(MessageActivity.<span class="built_in">this</span>, phoneNumedit.getText().toString() , msgEdit.getText().toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　点击运行就可以看到效果了。</p>
<h2 id="后台静默发短信"><a href="#后台静默发短信" class="headerlink" title="后台静默发短信"></a>后台静默发短信</h2><p>　　布局文件和上面的差不多，就是名字不一样。所以省略一下，下面是方法实现</p>
<h3 id="Activity-活动文件修改-1"><a href="#Activity-活动文件修改-1" class="headerlink" title="Activity 活动文件修改"></a>Activity 活动文件修改</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message_second</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EditText phone_number_editText;</span><br><span class="line">    <span class="keyword">private</span> EditText sms_content_editText;</span><br><span class="line">    <span class="keyword">private</span> Button send_sms_button;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_message_second);</span><br><span class="line"></span><br><span class="line">        phone_number_editText = (EditText) findViewById(R.id.phone_number_editText);</span><br><span class="line">        sms_content_editText = (EditText) findViewById(R.id.sms_content_editText);</span><br><span class="line">        send_sms_button = (Button) findViewById(R.id.send_sms_button);</span><br><span class="line"></span><br><span class="line">        send_sms_button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View arg0)</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">phone_number</span> <span class="operator">=</span> phone_number_editText.getText().toString().trim();</span><br><span class="line">                <span class="type">String</span> <span class="variable">sms_content</span> <span class="operator">=</span> sms_content_editText.getText().toString().trim();</span><br><span class="line">                <span class="keyword">if</span>(phone_number.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                    Toast.makeText(Message_second.<span class="built_in">this</span>, R.string.str_remind_input_phone_number, Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">SmsManager</span> <span class="variable">smsManager</span> <span class="operator">=</span> SmsManager.getDefault();</span><br><span class="line">                    <span class="keyword">if</span>(sms_content.length() &gt; <span class="number">70</span>) &#123;</span><br><span class="line">                        List&lt;String&gt; contents = smsManager.divideMessage(sms_content);</span><br><span class="line">                        <span class="keyword">for</span>(String sms : contents) &#123;</span><br><span class="line">                            smsManager.sendTextMessage(phone_number, <span class="literal">null</span>, sms, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        smsManager.sendTextMessage(phone_number, <span class="literal">null</span>, sms_content, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    Toast.makeText(Message_second.<span class="built_in">this</span>, R.string.str_remind_sms_send_finish, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="OVER"><a href="#OVER" class="headerlink" title="OVER"></a>OVER</h2><p>　　托谷歌的福，以上就是我半天的工作成果。其他时间需要做对短信内容进行AES加密，不过我还不怎么懂。稍微了解了一下发现很有意思的一点，寻常意义上的加密，是用通信双方约定好的密匙，然后对要传达的信息进行加密。但原来现在有很多加密方法，是把要送达的信息当做密匙用，而加密内容反而要双方约定好。从送信的动作传达信息，而不是通过信本身，这点我觉得很有意思。聪明人可真多啊~</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>EXP</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>最近的读书笔记</title>
    <url>//recent-reading-notes.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="《罗曼蒂克消亡史》"><a href="#《罗曼蒂克消亡史》" class="headerlink" title="《罗曼蒂克消亡史》"></a>《罗曼蒂克消亡史》</h2><div align = right>[程耳](https://www.amazon.cn/dp/B01N2UNFB6/ref=cm_sw_r_qz_2_dp_2unvzb8Y953A4)</div><div align = right>9 条标注，2 条笔记</div>


<blockquote>
<p>她读书不多，却自以为并不少，偏爱被廉价的诗意打动。同时她也没能碰到好老师，并不真正会读书，翻去再多的页码也没有用处，知识与视野都很局限。 </p>
<p>她生在普通人家，父母都颇为急功近利，渴望改变。她从小的教训便仅限于不近人情的严苛，却不得要领。她在压抑中学会了忍耐与逃避，离有效的解决之道相去甚远。这使得胡小姐即使在成名之后也仍然时时拘谨、紧张刻板。谈吐之间既没有市井的灵活风趣，也没有她所期待或是她以为拥有的智慧，无知而刻板。<br>* 真是刻薄啊~</p>
<p>但不会真的没有影响，而且不好的影响总在致命之处，比如她内心的懦弱。她在成名之后跟沪上著名的富二代同居数年，数年之中一定有过很多次机会，可惜她都没有抓住，最终也没有解决掉临门一脚。分手弄得满城风雨，她敏感脆弱，上海几乎待不下去。在最为孤独困苦的时候她回到家乡，回到父母家小住，是躲避也是想从家里得些安慰或启示。</p>
<p>父母却都不是敏感的人，离世界比她更遥远，而且真正关心的无非是利害。他们缺少远见，拥有的只是丧失自信后的迂腐。</p>
<p>再抬头望过去，静静地看着自己，她奇怪地感到从接了电话直到现在，担心突然减弱了，只剩下一种徒劳和对自己的厌恶——像是看到了小时候，土气和穷酸历历在目。</p>
<p>她有时会想起在杜先生家的盥洗室，从镜子里瞥见自己的那一刻，一切早已铸就，往昔从未离她而去。</p>
<p>他长得不算丑陋，力气又大，反复推搡纠缠之后，胸终于被他掏了出来，暴露在空气里，乳头瞬间变硬。羞耻感蹿升使她的反抗停顿了片刻。他抓住这片刻时机，捅了进去，把握野蛮与温柔的尺度，在激烈与平静间摇摆，很快占据主动，渐渐变得从容。<br>第一次总是这样的流程吧。久而久之，她也就伸出手来，即便不算抱住但至少是扶着或仅仅只是停留在他的腰或是背上。所谓爱情或爱情的错觉便从这去意不明的手开始萌发生长。<br>* 便从这目的明确的欲望开始</p>
<p>他们在幽暗中聊天，一些不重要的话，说说停停，前言不搭后语，好像在等待什么也好像什么也没有等待。想不想跟我回去？我很便宜的，她突然说。他没有回答，他们陷入了沉默。</p>
<p>她一步跨到床上，熟练地在他身上坐了下来。他感到床铺以及整个房间都在随着她震荡摇摆。为了不被迅速蔓延的快感过早击倒，他紧闭双唇，用舌尖顶住上颚，望着发黄以及发黑的天花板，就着裸露的白炽灯泡的光线，数墙上的裂纹。好像回到了小时候。</p>
</blockquote>
]]></content>
      <categories>
        <category>剪报</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>中国当代文学</tag>
      </tags>
  </entry>
  <entry>
    <title>今日文风：东北偏北一级微风</title>
    <url>//fourthart.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>  为了让网站看起来充实一点，我最近都想把日记都搬到这上面来写。之前看太宰治不成熟，虽然仍旧是摆弄消极情绪但技巧上却用力过度的处女作，忽然原谅他是看到书里一句，“怀着美好的情感，人往往做出低劣的作品”。真的是让人原谅他到想和他抱头痛哭。这也大概是我最近的状态吧。</p>
<p>  我经常看一本书，看久了，写字时的语气就会下意识的模仿作者，特别专心致志的时候，连心里话也下意识的用那个语气。</p>
<p>  早以前很喜欢村上春树，写作文总是模仿他，虽然他是男性作家，但情感细腻丰富，要使用大量长短句铺开来写，所以那时候我的作文总是亢长，段落结构大都雷同，先写一点现实生活，最好带点趣味性，再写想到的回忆，也最好带点趣味性，然后再回来写某段路上看到的风景，“某处传来一阵声音，俶尔远逝，风景中有一些不可名状的色彩，太阳在远处的山坡上落下。”大致抓到捉摸不透的感觉就行，然后因为一些难以言喻的感觉，讲个大道理，总结全文。</p>
<p>  也不知道是不是运气好，那会有个老师挺喜欢我的。不过因为我自己惫懒，因为这样写一篇作文总是得写三四页，加上词汇量不丰富总喜欢在作文里用“不可名状”“难以言喻”“未及分辨”等含糊的词语，三两次以后被老师发现了，她总是用红笔圈出来，在旁边写，到底是什么形状，到底是什么感觉，到底是什么东西。就总是拖欠作文，甚至后面再没交过作文。记得老师也说过我，忘记我当时是用什么态度和她解释的，打那以后她就不怎么关心我了。</p>
<p>  在学村上之前也还学过韩寒和小四，但学的不是很好，有意思的段子和精致的词汇知道的都挺少，虽然后来发现这些都只是留于表面，但那会已经在看其他的书了。现在偶尔还会去看韩寒以前的博客，和以前想的不一样，现在就觉得网上虽然也有很多正义的人对社会现状不满意大肆批判的人，但都带着太多戾气，而且总是时不时的写些煽动性的句子，很不好。一等不好的是，总是“你国你国”的。阴阳怪气。</p>
<p>  从村上跳出来，我对琢磨情绪的细微处有什么和描写不可名状的事物感到乏味。开始看王朔王小波冯唐，冯唐比较好学，王朔比较难学，王小波学不来。共同点是都挺敞着的，大开大合，北京大老爷们，冯唐有点不像的地方是书里书外零零碎碎自恋，不讨人喜欢。不过这点又比胡兰成好一点，胡兰成，老派文人，文风一板一眼，有时也像个风流才子，多数时候像个富态乡绅，总拿女孩子为自己做了很多说事，自恋，自恋的不好看，老不正经。当时还同时看了很多书，什么都学了一点，什么也都不像。</p>
<p>  后来又很喜欢卡佛，他的文风漫不经心不着边际，结尾总是戛然而止，让人摸不着头脑却留有余味。当时想，这才是真正的直男写作风格啊！冯唐在书里写了那么多性器官也都弱爆了，也都没有卡佛有男子气概好不好？在刻意的模仿了一阵子后相差还是很大。念念不忘，最近在网易音乐看到一句很有卡佛味道的话，</p>
<blockquote>
<p>“真正准备离开的人，只会挑一个风和日丽的下午，随意裹上一件外套出门，再也不会回来。真正要走的人是不会说再见的 ​。” </p>
</blockquote>
<p>  不写后半句不会说再见做补充就更像了。</p>
<p>  至于总是模仿别人，好不好我也说不上，莫言的魔幻现实学了马尔克斯大半，王小波的书也隐约有卡夫卡的影子。我当然不是在自比大师，只是大师都这么做了，我这么做也应该没什么坏处。现在比以前更敢于写作了，以前不敢的原因是写的糟糕，另外又怕给人留下印象，你天天写东西以后是不是要当个作家啊。因为知道自己没什么才华，所以没有底气接受这个印象。现在的专业、职业规划和写作都没什么关系，写作成了真正兴趣使然的事情，就无所畏惧了。</p>
<p>  前阵子刚看完木心老先生的《文学回忆录》，写的很好。木心老先生的文风，下结论的时候诚恳果断，偶尔对自己的结论再做递进说明，比如，可爱，可爱的一塌糊涂。浪漫，浪漫的一塌糊涂。关联词用的少，说一句是一句，很有底气。</p>
<p>  先生说自己和陶潜相似，喜欢写风，文笔、格调都有风的特征。所以我模仿他的时候总对自己说，要像风一点要轻盈一些。</p>
<p>  不过这篇学的并不是很好。</p>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>扯谈</tag>
      </tags>
  </entry>
  <entry>
    <title>今天中午吃汉堡，加点葱花加点糖</title>
    <url>//eat-a-burger-with-chopped-green-onion-and-sugar.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>  前天我在脖子上贴了个纹身，是一句藏文，意思是，除了上帝没有人可以惩罚你。<br>  中午吃麦当劳，回去的时候在电梯里听到外面远远的一个声音，等一下等一下啊。我按了开门键，一个女生，她点了下头和我说了声谢谢，我也点了下头，什么也没说。<br>  电梯里只有两个人，可能是为了缓和沉闷的气氛，她和我搭话，问，诶，你脖子上的，那个纹身？是韩文吗，是什么意思？<br>  是藏文。<br>  我想到虽然纹身很酷，这句话的意思也很酷，但如果在电梯里对一个陌生人口述出来，会显得很中二，不酷。<br>  就是，今天中午吃汉堡，加点葱花加点糖的意思。<br>  我在心里耸耸肩，语气是敷衍的酷。心里预期的效果是我说了一句敷衍的俏皮话，她笑一下，不再追问，大家和和气气的在各自楼层离开电梯。<br>  她笑了起来，哈没想到西藏人民也爱吃炸鸡汉堡啊。她甩着马尾辫在二楼离开了。<br>  我心情愉快，有那么一会，甚至不想酷了。</p>
]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>扯谈</tag>
      </tags>
  </entry>
  <entry>
    <title>欸，下午放学前记得帮我把要给前面那个女孩的情书写好</title>
    <url>//firstart.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="14a90c7f998a37d38d9eee179d4df58cdca94d142521f5263082e6ebbad8bf7e">a38a73cbb772b22f73d9973e5cac67b1886535b63c8a7456de5356d888031ee0950309e6af6b04d0a1c7aba1870cd16c5675a04c5c887a0f597f71c8832987f81af5e3fc7f80ed624932423258a0b23eac8430304f939650ec0e9917d08e187a5373f02e3aee469dc80cdf56546e24236ebe1e9dfbc384fdca266d3c003ee99c58a5c0e9a7660bc2fa752da407325109ef429ee38ffa71f2de705ee46c1f6fd6fb9e2052561c48172b270b1f8a5469f9be1636354ca968711459cf09fcc8f60c14888fa90492df6c7931fc9c6dbd5a0f300e15de3652107fa127087f9b1eec7f096321adb7fc37aad9e57ff8d07a3e537a02c45a4a7e266879b98567015bf9d89846576c46285af487da6c1ecb53931d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>涂鸦</category>
      </categories>
      <tags>
        <tag>扯谈</tag>
      </tags>
  </entry>
  <entry>
    <title>Here is Kai&#39;s World</title>
    <url>//hello-edison-s-world.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>  哈哈哈我终于解决了部署时出现的 cannot find module、local hexo not found in finder 等问题用<code>github</code>仓库做服务器弄好了基于<code>Node.js</code>的静态博客<code>Hexo</code>我的独立博客了不过，会不会写东西就不知道喽~~~~</p>

        <div id="aplayer-BOVYWYUk" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-BOVYWYUk"),
            narrow: false,
            autoplay: true,
            showlrc: false,
            music: {
              title: "Let's Dance",
              author: "David Bowie",
              url: "http://os1i62usc.bkt.clouddn.com/David%20Bowie%20-%20Let%27s%20Dance.mp3",
              pic: "https://s2.loli.net/2022/04/14/V6YcJQaBp8EWPTl.png",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
]]></content>
      <categories>
        <category>肇始</category>
      </categories>
      <tags>
        <tag>扯谈</tag>
        <tag>肇始</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>//hello-world.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>肇始</category>
      </categories>
      <tags>
        <tag>肇始</tag>
      </tags>
  </entry>
</search>
